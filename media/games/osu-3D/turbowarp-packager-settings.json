{"autoplay":true,"controls":{"greenFlag":{"enabled":false},"stopAll":{"enabled":false},"fullscreen":{"enabled":false},"pause":{"enabled":false}},"compiler":{"warpTimer":true,"enabled":true},"packagedRuntime":true,"turbo":false,"interpolation":true,"framerate":60,"highQualityPen":false,"maxClones":9999999999,"fencing":false,"miscLimits":false,"stageWidth":640,"stageHeight":360,"resizeMode":"preserve-ratio","username":"player####","closeWhenStopped":false,"projectId":"p4-@osu!3D.sb3","custom":{"css":"","js":""},"appearance":{"background":"#000000","foreground":"#ffffff","accent":"#ff4c4c"},"loadingScreen":{"progressBar":true,"text":"Loading assets... \\n This might take a while...","imageMode":"normal","image":null},"monitors":{"editableLists":false,"variableColor":"#ff8c1a","listColor":"#fc662c"},"target":"zip-one-asset","app":{"icon":null,"packageName":"osud","windowTitle":"osu!3D","windowMode":"window","version":"1.0.0","escapeBehavior":"unfullscreen-only"},"chunks":{"gamepad":true,"pointerlock":false},"cloudVariables":{"mode":"ws","cloudHost":"wss://clouddata.turbowarp.org","custom":{},"specialCloudBehaviors":false,"unsafeCloudBehaviors":false},"cursor":{"type":"auto","custom":null,"center":{"x":0,"y":0}},"extensions":["https://extensions.turbowarp.org/gamejolt.js","https://extensions.turbowarp.org/cloudlink.js","https://extensions.turbowarp.org/Lily/MoreEvents.js","https://extensions.turbowarp.org/runtime-options.js","https://extensions.turbowarp.org/TheShovel/CanvasEffects.js","https://extensions.turbowarp.org/Lily/SoundExpanded.js","https://extensions.turbowarp.org/Skyhigh173/json.js","https://extensions.turbowarp.org/Lily/Assets.js","https://extensions.turbowarp.org/text.js","https://extensions.turbowarp.org/utilities.js","data:application/x-javascript;base64,// Name: Tune Shark
// ID: SPtuneShark
// Description: Advanced Sound Engine, inspired by LilyMakesThings
// By: SharkPool

// Version V.2.5.0
// Credit to HOME for the song "Resonance" being used as the default audio link

(function (Scratch) {
  "use strict";

  if (!Scratch.extensions.unsandboxed) throw new Error("Tune Shark extension must be run unsandboxed");

  let enableBlock = true;
  let startedLoop = false;
  let controller = false;
  let pauseVal = false;
  async function waitForUnpause() {
    return new Promise(resolve => {
      const checkCondition = () => {
        if (vm.runtime.ioDevices.clock._paused) {
          setTimeout(checkCondition, 10);
        } else { resolve() }
      };
      checkCondition();
    });
  }

  const menuIconURI =
"data:image/svg+xml;base64,PHN2ZyB2aWV3Qm94PSIwLDAsMTAyLjE4NTE4LDEwMi4xODUxOCIgaGVpZ2h0PSIxMDIuMTg1MTgiIHdpZHRoPSIxMDIuMTg1MTgiIHhtbG5zOnhsaW5rPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rIiB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHZlcnNpb249IjEuMSI+PGcgdHJhbnNmb3JtPSJ0cmFuc2xhdGUoLTI0OC45MDc0MSwtMTQ4LjkwNzQxKSI+PGcgc3R5bGU9Im1peC1ibGVuZC1tb2RlOiBub3JtYWwiIHN0cm9rZS1kYXNob2Zmc2V0PSIwIiBzdHJva2UtZGFzaGFycmF5PSIiIHN0cm9rZS1taXRlcmxpbWl0PSIxMCIgZGF0YS1wYXBlci1kYXRhPSJ7JnF1b3Q7aXNQYWludGluZ0xheWVyJnF1b3Q7OnRydWV9Ij48cGF0aCBzdHJva2UtbGluZWpvaW49Im1pdGVyIiBzdHJva2UtbGluZWNhcD0iYnV0dCIgc3Ryb2tlLXdpZHRoPSIwIiBzdHJva2U9IiMwMDAwMDAiIGZpbGwtcnVsZT0ibm9uemVybyIgZmlsbD0iIzg0ODQ4NCIgZD0iTTI0OC45MDc0MSwyMDBjMCwtMjguMjE3NjYgMjIuODc0OTMsLTUxLjA5MjU5IDUxLjA5MjU5LC01MS4wOTI1OWMyOC4yMTc2NiwwIDUxLjA5MjU5LDIyLjg3NDkzIDUxLjA5MjU5LDUxLjA5MjU5YzAsMjguMjE3NjYgLTIyLjg3NDkzLDUxLjA5MjU5IC01MS4wOTI1OSw1MS4wOTI1OWMtMjguMjE3NjYsMCAtNTEuMDkyNTksLTIyLjg3NDkzIC01MS4wOTI1OSwtNTEuMDkyNTl6Ij48L3BhdGg+PHBhdGggc3Ryb2tlLWxpbmVqb2luPSJtaXRlciIgc3Ryb2tlLWxpbmVjYXA9ImJ1dHQiIHN0cm9rZS13aWR0aD0iMSIgc3Ryb2tlPSJub25lIiBmaWxsLXJ1bGU9Im5vbnplcm8iIGZpbGw9IiNmZmZmZmYiIGRhdGEtcGFwZXItZGF0YT0ieyZxdW90O2luZGV4JnF1b3Q7Om51bGx9IiBkPSJNMzIyLjMxMzMsMjMyLjkyMTI4bC0wLjAwMDQzLC0wLjAwMjA4Yy0xLjE4NCwyLjM5NTg3IC00LjQxMDE4LDMuNzE3NjMgLTcuODA4MywzLjAyMTA3Yy0zLjg5MTU1LC0wLjc5ODA4IC02LjUzNDQyLC0zLjk0MDg3IC01LjkwMjczLC03LjAxOTk5YzAuNjMxNDgsLTMuMDc5NyA0LjI5Nzc3LC00LjkyODM3IDguMTg5MzMsLTQuMTMwMjljMS43NzIxMiwwLjM2MzIzIDMuMjgzMjYsMS4yMTMzIDQuMzQ2MTcsMi4zMjE0NWw2LjMxNTc1LC0xMy4zOTY5Yy05Ljk4MzkyLC0zLjkwNzUxIC0xOC42NzI4MywtNC44MTYxOCAtMTguNjcyODMsLTQuODE2MThsLTguNDkxNjIsMTguMDEyMzRjLTAuOTEzNDYsMi43NjU4NiAtNC4zODE0Nyw0LjM2NzM2IC04LjA1MDg1LDMuNjE1MjljLTMuODkxMTYsLTAuNzk3OSAtNi41MzM4NSwtMy45NDEwNyAtNS45MDI1NSwtNy4wMjAzOGMwLjYzMTMsLTMuMDc5MzEgNC4yOTc1OSwtNC45Mjc5OSA4LjE4OTMzLC00LjEzMDI5YzEuODA1MTcsMC4zNjk4OCAzLjM0MTYsMS4yNDUwMyA0LjQwNzQ5LDIuMzgzNzJsMTEuMzcyNTUsLTI0LjEwMzQyYzAsMCAxMi43ODgxNiwwLjIyMjY0IDI1LjQ2NDk3LDYuNzIyMzN6Ij48L3BhdGg+PHBhdGggc3Ryb2tlLWxpbmVqb2luPSJtaXRlciIgc3Ryb2tlLWxpbmVjYXA9InNxdWFyZSIgc3Ryb2tlLXdpZHRoPSIzIiBzdHJva2U9IiNmZmZmZmYiIGZpbGwtcnVsZT0ibm9uemVybyIgZmlsbD0ibm9uZSIgZD0iTTI3NC44MTgyNSwxNzguMTkxNTZsMy42ODc2LDIxLjYwMzkyIj48L3BhdGg+PHBhdGggc3Ryb2tlLWxpbmVqb2luPSJtaXRlciIgc3Ryb2tlLWxpbmVjYXA9InNxdWFyZSIgc3Ryb2tlLXdpZHRoPSIwIiBzdHJva2U9IiMwMDAwMDAiIGZpbGwtcnVsZT0ibm9uemVybyIgZmlsbD0iI2ZmZmZmZiIgZD0iTTI4MC4wMzkzOCwyMDAuNDM3NDVjMS4yNTk2NywyLjM3NzYgLTAuNzA0MDcsNS41MTAwNyAtNC4zODYxMyw2Ljk5NjU3Yy0zLjY4MjA2LDEuNDg2NSAtNy42ODgxMywwLjc2NDExIC04Ljk0NzgsLTEuNjEzNDljLTEuMjU5NjcsLTIuMzc3NiAwLjcwNDA3LC01LjUxMDA3IDQuMzg2MTMsLTYuOTk2NTdjMy42ODIwNiwtMS40ODY1IDcuNjg4MTMsLTAuNzY0MTEgOC45NDc4LDEuNjEzNDl6Ij48L3BhdGg+PHBhdGggc3Ryb2tlLWxpbmVqb2luPSJtaXRlciIgc3Ryb2tlLWxpbmVjYXA9ImJ1dHQiIHN0cm9rZS13aWR0aD0iMCIgc3Ryb2tlPSIjMDAwMDAwIiBmaWxsLXJ1bGU9Im5vbnplcm8iIGZpbGw9IiNmZmZmZmYiIGQ9Ik0yNzIuNzg3MTQsMTc1Ljc0Njk1YzAsMCA4Ljg1MzU3LC0xLjU1NTA0IDExLjI3NzM3LDIuNTI2NzVjMi4xNjY1NywzLjY0ODg1IDAuMDY1MjcsNy45MzA3OCAwLjE5MzQ3LDkuMjM4MDdjMC4xMjgyLDEuMzA3MjkgMS45ODQwNSwxLjAxMTU5IDEuOTg0MDUsMS4wMTE1OWwtMC4wMTIxLDEuNTI3MTFjMCwwIC0yLjYxMjk1LDAuNjEwMjggLTMuMTEyNCwtMS4yMDMzMmMtMC40OTk0NSwtMS44MTM1OSAtMC41MTAzOSwtNS40NTMzNiAtMi41NzU2MiwtNy41MDUzMmMtMi4wNjU4MSwtMi4wNTE3NyAtNi44NzUwOSwtMC42OTIwNyAtNi44NzUwOSwtMC42OTIwNyI+PC9wYXRoPjxwYXRoIHN0cm9rZS1saW5lam9pbj0icm91bmQiIHN0cm9rZS1saW5lY2FwPSJyb3VuZCIgc3Ryb2tlLXdpZHRoPSIwIiBzdHJva2U9IiMwMDAwMDAiIGZpbGwtcnVsZT0iZXZlbm9kZCIgZmlsbD0iI2ZmZmZmZiIgZD0iTTMwOS4wNzk1NCwxODQuNjY2ODFjLTAuMzI1ODksMi4wNjkyNCAtMi4yOTkxMywzLjIzMzIzIC00LjA5MzM3LDMuOTEwMThjLTEuNjEyMDYsMC43MDk1MSAtMy40Njg4LDAuOTg0OTkgLTUuMTU1MTQsMC4zNjE0NWMtMS41OTQ2MiwtMC4zNzIyOSAtMy4xMTUzOCwtMS43NjU0OSAtMi45MjYyLC0zLjUxNTE2YzAuMTUwOSwtMi4wMzc0NiAxLjg1MzI3LC0zLjczNTEyIDMuNzU0NjEsLTQuMzA0MzZjMS44OTQ4NiwtMC43ODA5NiA0LjE1NTczLC0wLjcxMzc3IDUuOTY1MTcsMC4yNTI5MmMwLjg5MTg1LDAuNDEyNTQgMi4xMzkwOCwtMTMuODE3NjMgMi45NjU3NiwtMjAuMTExODRjMC4wOTgxOSwtMC42MjcxNCAyLjUyNDk2LC0wLjQ2MDE3IDIuNDU1NTMsMC4xNDc2YzAsMCAtMS44MTEyLDE1LjE2Nzc0IC0yLjk2NjM3LDIzLjI1OTIxeiI+PC9wYXRoPjwvZz48L2c+PC9zdmc+PCEtLXJvdGF0aW9uQ2VudGVyOjUxLjA5MjU5OjUxLjA5MjU5LS0+";

  const blockIconURI =
"data:image/svg+xml;base64,PHN2ZyB2ZXJzaW9uPSIxLjEiIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIgeG1sbnM6eGxpbms9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsiIHdpZHRoPSI4Ni4zNDQ5MiIgaGVpZ2h0PSI3OC45NzQwMSIgdmlld0JveD0iMCwwLDg2LjM0NDkyLDc4Ljk3NDAxIj48ZyB0cmFuc2Zvcm09InRyYW5zbGF0ZSgtMjU2LjgyNzU0LC0xNjAuNTEyOTkpIj48ZyBkYXRhLXBhcGVyLWRhdGE9InsmcXVvdDtpc1BhaW50aW5nTGF5ZXImcXVvdDs6dHJ1ZX0iIGZpbGwtcnVsZT0ibm9uemVybyIgc3Ryb2tlPSJub25lIiBzdHJva2UtbGluZWNhcD0iYnV0dCIgc3Ryb2tlLWxpbmVqb2luPSJtaXRlciIgc3Ryb2tlLW1pdGVybGltaXQ9IjEwIiBzdHJva2UtZGFzaGFycmF5PSIiIHN0cm9rZS1kYXNob2Zmc2V0PSIwIiBzdHlsZT0ibWl4LWJsZW5kLW1vZGU6IG5vcm1hbCI+PHBhdGggZD0iTTI1Ni44Mjc1NCwyMzkuNDg3MDF2LTc4Ljk3NDAxaDg2LjM0NDkydjc4Ljk3NDAxeiIgZmlsbD0iIzg0ODQ4NCIgc3Ryb2tlLXdpZHRoPSIwIi8+PHBhdGggZD0iTTMyMS43MTUyLDIxNC4zNDg2NWwtMC4wMDE3NywtMC4wMDIzNmMtMC4wNjg0NCwzLjcwOTM1IC0zLjMzNzA2LDcuMjc4ODcgLTguMDE2MzgsOC40MTU4MWMtNS4zNTksMS4zMDE1NSAtMTAuNTM4MDUsLTEuMDgwMyAtMTEuNTY3NjEsLTUuMzIwNjVjLTEuMDMwMTUsLTQuMjQwOTUgMi40NzkxOSwtOC43MzI2NCA3LjgzODIsLTEwLjAzNDE5YzIuNDQwMjUsLTAuNTkyOTUgNC44NDA5OCwtMC40MjAwOCA2LjgzMTY1LDAuMzQyMnYtMjAuNTYxMDNjLTE0Ljg0OTgsMS4wMDM2IC0yNi4yOTgyMyw1LjAwNjE4IC0yNi4yOTgyMyw1LjAwNjE4djI3LjY0NDYyYzAuNDkwMjksNC4wMTM3OSAtMi45MTYzOSw4LjA3Nzc0IC03Ljk2OTE4LDkuMzA1NTRjLTUuMzU4NDEsMS4zMDE1NSAtMTAuNTM3NDYsLTEuMDgwODkgLTExLjU2NzYxLC01LjMyMTI0Yy0xLjAzMDE1LC00LjI0MDM2IDIuNDc5MTksLTguNzMyMDUgNy44MzgyLC0xMC4wMzQxOWMyLjQ4NTY4LC0wLjYwNDE2IDQuOTMzMDIsLTAuNDE0NzcgNi45NDU1MiwwLjM4NDA5bDAuMDExOCwtMzYuOTk4NTNjMCwwIDE2LjE4OTcsLTcuMjkwNjcgMzUuOTU1NDEsLTYuNjMzNDF6IiBkYXRhLXBhcGVyLWRhdGE9InsmcXVvdDtpbmRleCZxdW90OzpudWxsfSIgZmlsbD0iI2ZmZmZmZiIgc3Ryb2tlLXdpZHRoPSIxIi8+PC9nPjwvZz48L3N2Zz4=";

  const groupIconURI =
"data:image/svg+xml;base64,PHN2ZyB2ZXJzaW9uPSIxLjEiIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIgeG1sbnM6eGxpbms9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsiIHdpZHRoPSI4Ni4zNDQ5MiIgaGVpZ2h0PSI3OC45NzQwMSIgdmlld0JveD0iMCwwLDg2LjM0NDkyLDc4Ljk3NDAxIj48ZyB0cmFuc2Zvcm09InRyYW5zbGF0ZSgtMTk2LjgyNzU0LC0xNDAuNTEyOTkpIj48ZyBkYXRhLXBhcGVyLWRhdGE9InsmcXVvdDtpc1BhaW50aW5nTGF5ZXImcXVvdDs6dHJ1ZX0iIHN0cm9rZS1taXRlcmxpbWl0PSIxMCIgc3Ryb2tlLWRhc2hhcnJheT0iIiBzdHJva2UtZGFzaG9mZnNldD0iMCIgc3R5bGU9Im1peC1ibGVuZC1tb2RlOiBub3JtYWwiPjxwYXRoIGQ9Ik0xOTYuODI3NTQsMjE5LjQ4NzAxdi03OC45NzQwMWg4Ni4zNDQ5MnY3OC45NzQwMXoiIGZpbGw9IiM4NDg0ODQiIGZpbGwtcnVsZT0ibm9uemVybyIgc3Ryb2tlPSJub25lIiBzdHJva2Utd2lkdGg9IjAiIHN0cm9rZS1saW5lY2FwPSJidXR0IiBzdHJva2UtbGluZWpvaW49Im1pdGVyIi8+PHBhdGggZD0iTTI2NS45NTc3MSwxODMuMjM1NjVsLTAuMDAxMDgsLTAuMDAyMTZjLTAuNjA0MDcsMi45Nzk1NCAtMy43NjY3NCw1LjM3MjgyIC03LjcwNjQzLDUuNTk2NzJjLTQuNTExODYsMC4yNTYgLTguMzMzNjEsLTIuNDMwMTIgLTguNTM1OTMsLTYuMDAwMTJjLTAuMjAyNzEsLTMuNTcwNTcgMy4yOTA0NCwtNi42NzE0OCA3LjgwMjMxLC02LjkyNzQ4YzIuMDU0NTQsLTAuMTE2OCAzLjk2MzksMC4zNzc3OSA1LjQ1NTU1LDEuMjg2NzVsMy4wNDI2MiwtMTYuNTcxODFjLTEyLjExNzE4LC0xLjM4ODU5IC0yMS45MzY3MSwwLjE0MzI4IC0yMS45MzY3MSwwLjE0MzI4bC00LjA5MDg1LDIyLjI4MTA2Yy0wLjE5ODgsMy4zMDc1OSAtMy41NDU5LDYuMDc4OTQgLTcuODAwMDUsNi4zMjA4MWMtNC41MTEzOCwwLjI1NjA5IC04LjMzMzA1LC0yLjQzMDUxIC04LjUzNTg0LC02LjAwMDZjLTAuMjAyNzksLTMuNTcwMDkgMy4yOTAzNSwtNi42NzEgNy44MDIzMSwtNi45Mjc0OGMyLjA5MjgyLC0wLjExOTExIDQuMDM3MywwLjM5NTY5IDUuNTQxMTIsMS4zMzczN2w1LjQ4NDU1LC0yOS44MTgzOWMwLDAgMTQuMTI3NDcsLTMuNDgwMzkgMjkuOTYxMDEsLTAuMDI1NzJ6IiBkYXRhLXBhcGVyLWRhdGE9InsmcXVvdDtpbmRleCZxdW90OzpudWxsfSIgZmlsbD0iI2ZmZmZmZiIgZmlsbC1ydWxlPSJub256ZXJvIiBzdHJva2U9Im5vbmUiIHN0cm9rZS13aWR0aD0iMSIgc3Ryb2tlLWxpbmVjYXA9ImJ1dHQiIHN0cm9rZS1saW5lam9pbj0ibWl0ZXIiLz48cGF0aCBkPSJNMjE2LjcyNjQ0LDIwNi4wMzdjLTMuNDE2NzksLTE0Ljk2NzA5IC05LjE1ODY2LC00My4wNzgzNCAtOS4xNTg2NiwtNDMuMDc4MzRjLTAuMjI0MTksLTEuMTI2OSA0LjI5MjUyLC0xLjgxNTY4IDQuNTczNTUsLTAuNjU2OThjMi41MjMyNiwxMS42NTM3OCA3LjA2NDA5LDM4LjA5NzQ2IDguNjY5NTYsMzcuMTg2OTdjMy4yMzcxNywtMi4wOTAwNSA3LjQ1ODgxLC0yLjU2NjMzIDExLjEyNjgyLC0xLjM5ODI1YzMuNjQ3MzEsMC43NzA3NyA3LjA5NzEzLDMuNjg0NjQgNy42OTU0Nyw3LjQ3NTExYzAuNjI1MzgsMy4yNDU4MyAtMi4wMDUyOSw2LjA4OTQ5IC00LjkzMjQ5LDcuMDMzNTljLTMuMDU5OTQsMS40Mjg2MyAtNi41NzgyMywxLjIwMDgzIC05LjcwNTc5LDAuMTIyNjRjLTMuNDYzNTQsLTAuOTg4OTkgLTcuMzM3NjUsLTIuODYxOTEgLTguMjY4NDgsLTYuNjg0NzN6IiBkYXRhLXBhcGVyLWRhdGE9InsmcXVvdDtpbmRleCZxdW90OzpudWxsfSIgZmlsbD0iI2ZmZmZmZiIgZmlsbC1ydWxlPSJldmVub2RkIiBzdHJva2U9IiMwMDAwMDAiIHN0cm9rZS13aWR0aD0iMCIgc3Ryb2tlLWxpbmVjYXA9InJvdW5kIiBzdHJva2UtbGluZWpvaW49InJvdW5kIi8+PC9nPjwvZz48L3N2Zz4=";

  const settingsIconURI =
"data:image/svg+xml;base64,PHN2ZyB2ZXJzaW9uPSIxLjEiIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIgeG1sbnM6eGxpbms9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsiIHdpZHRoPSI4Ni4zNDQ5MiIgaGVpZ2h0PSI3OC45NzQwMSIgdmlld0JveD0iMCwwLDg2LjM0NDkyLDc4Ljk3NDAxIj48ZyB0cmFuc2Zvcm09InRyYW5zbGF0ZSgtMTk2LjgyNzU0LC0xNDAuNTEzMDEpIj48ZyBkYXRhLXBhcGVyLWRhdGE9InsmcXVvdDtpc1BhaW50aW5nTGF5ZXImcXVvdDs6dHJ1ZX0iIGZpbGwtcnVsZT0ibm9uemVybyIgc3Ryb2tlLXdpZHRoPSIwIiBzdHJva2UtbGluZWNhcD0iYnV0dCIgc3Ryb2tlLWxpbmVqb2luPSJtaXRlciIgc3Ryb2tlLW1pdGVybGltaXQ9IjEwIiBzdHJva2UtZGFzaGFycmF5PSIiIHN0cm9rZS1kYXNob2Zmc2V0PSIwIiBzdHlsZT0ibWl4LWJsZW5kLW1vZGU6IG5vcm1hbCI+PHBhdGggZD0iTTE5Ni44Mjc1NCwyMTkuNDg3MDJ2LTc4Ljk3NDAxaDg2LjM0NDkydjc4Ljk3NDAxeiIgZmlsbD0iIzg0ODQ4NCIgc3Ryb2tlPSJub25lIi8+PHBhdGggZD0iTTIxMi40MjMyLDE3Ni4wODE5OGMtMi4yMzEyMSwtMC45MDE0MyAtMy4zMDkyLC0zLjQ0MDkzIC0yLjQwNzc4LC01LjY3MjEzbDEuNzUzMiwtNC4zMzk1YzAuOTAxNDMsLTIuMjMxMjEgMy40NDA5MywtMy4zMDkyIDUuNjcyMTMsLTIuNDA3NzhsMTguMDI3NTQsNy4yODMzYy0yLjEyODcyLDEuMDg4NDggLTMuODkwMzYsMi45MTkwOSAtNC44NTYyNiw1LjMwOTg5Yy0wLjk0OTkzLDIuMzUxMjUgLTAuOTY5ODcsNC44NDczNSAtMC4yMzI4OSw3LjA4MDU5eiIgZmlsbD0iI2ZmZmZmZiIgc3Ryb2tlPSIjMDAwMDAwIi8+PHBhdGggZD0iTTI0My45MTgwMiwxNTIuNDIzMmMwLjkwMTQzLC0yLjIzMTIxIDMuNDQwOTMsLTMuMzA5MiA1LjY3MjEzLC0yLjQwNzc4bDQuMzM5NSwxLjc1MzJjMi4yMzEyMSwwLjkwMTQzIDMuMzA5MiwzLjQ0MDkzIDIuNDA3NzgsNS42NzIxM2wtNy4xNTM2OCwxNy43MDY2OWMtMS4xMDI0NywtMi4wMDU4IC0yLjg3NzIxLC0zLjY1ODU2IC01LjE2NDg2LC00LjU4Mjc5Yy0yLjQ1NjExLC0wLjk5MjI5IC01LjA3MDI3LC0wLjk2OTggLTcuMzc3NzcsLTAuMTI5Nzl6IiBmaWxsPSIjZmZmZmZmIiBzdHJva2U9IiMwMDAwMDAiLz48cGF0aCBkPSJNMjM2LjA4MTk3LDIwNy41NzY4MWMtMC45MDE0MywyLjIzMTIxIC0zLjQ0MDkzLDMuMzA5MiAtNS42NzIxMywyLjQwNzc4bC00LjMzOTUsLTEuNzUzMmMtMi4yMzEyMSwtMC45MDE0MyAtMy4zMDkyLC0zLjQ0MDkzIC0yLjQwNzc4LC01LjY3MjEzbDcuMjQzMTQsLTE3LjkyODE0YzEuMDc2NDIsMi4yMDcxNSAyLjk0MTMxLDQuMDM5MjIgNS4zOTc0Miw1LjAzMTUyYzIuMjg3NjQsMC45MjQyMyA0LjcxMjQsMC45NjgxMSA2Ljg5ODc2LDAuMjkxMDR6IiBmaWxsPSIjZmZmZmZmIiBzdHJva2U9IiMwMDAwMDAiLz48cGF0aCBkPSJNMjY4LjIzMTM4LDE5My45Mjk2NmMtMC45MDE0MywyLjIzMTIxIC0zLjQ0MDkzLDMuMzA5MiAtNS42NzIxMywyLjQwNzc4bC0xNy42MDAxNywtNy4xMTA2NGMyLjA4MTQ1LC0xLjA5NDU3IDMuODAxLC0yLjkwNDAxIDQuNzUwOTIsLTUuMjU1MjdjMC45NjU5MSwtMi4zOTA4MSAwLjk3MDI4LC00LjkzMTM3IDAuMTk1MDUsLTcuMTkzMDdsMTcuNjcxNzYsNy4xMzk1N2MyLjIzMTIxLDAuOTAxNDMgMy4zMDkyLDMuNDQwOTMgMi40MDc3OCw1LjY3MjEzeiIgZmlsbD0iI2ZmZmZmZiIgc3Ryb2tlPSIjMDAwMDAwIi8+PHBhdGggZD0iTTIxMi40MjMyLDE3Ni4wODE5OGMtMi4yMzEyMSwtMC45MDE0MyAtMy4zMDkyLC0zLjQ0MDkzIC0yLjQwNzc4LC01LjY3MjEzbDEuNzUzMiwtNC4zMzk1YzAuOTAxNDMsLTIuMjMxMjEgMy40NDA5MywtMy4zMDkyIDUuNjcyMTMsLTIuNDA3NzhsMTAuMDc2NDcsNC4wNzA5OWwtNC4yNDY1MiwtMTAuMDAzNzdjLTAuOTQwMjksLTIuMjE1MTEgMC4wOTMxNCwtNC43NzMwNyAyLjMwODI1LC01LjcxMzM2bDQuMzA4MTksLTEuODI4NzljMi4yMTUxMSwtMC45NDAyOSA0Ljc3MzA3LDAuMDkzMTQgNS43MTMzNiwyLjMwODI1bDcuNTM4MTQsMTcuNzU4MDVjLTUuMDQ1MTMsLTEuNTMgLTEwLjUxMzcyLDEuMDE5NDkgLTEyLjUyNjYzLDYuMDAxODFjLTAuOTQ5OTMsMi4zNTEyNSAtMC45Njk4Nyw0Ljg0NzM1IC0wLjIzMjg5LDcuMDgwNTl6IiBmaWxsPSIjZmZmZmZmIiBzdHJva2U9IiMwMDAwMDAiLz48cGF0aCBkPSJNMjY4LjIzMTM4LDE5My45Mjk2NmMtMC45MDE0MywyLjIzMTIxIC0zLjQ0MDkzLDMuMzA5MiAtNS42NzIxMywyLjQwNzc4bC0xMC4wNzY0NywtNC4wNzA5OWw0LjI0NjUyLDEwLjAwMzc3YzAuOTQwMjksMi4yMTUxMSAtMC4wOTMxNCw0Ljc3MzA3IC0yLjMwODI1LDUuNzEzMzZsLTQuMzA4MTksMS44Mjg3OWMtMi4yMTUxMSwwLjk0MDI5IC00Ljc3MzA3LC0wLjA5MzE0IC01LjcxMzM2LC0yLjMwODI1bC03LjQ3NjgyLC0xNy42MTM2MWM1LjExNjEzLDEuNzAwMDggMTAuNzM5NywtMC44NTA3MSAxMi43ODczNCwtNS45MTg5N2MwLjk2NTkxLC0yLjM5MDgxIDAuOTcwMjgsLTQuOTMxMzcgMC4xOTUwNSwtNy4xOTMwN2wxNy42NzE3Niw3LjEzOTU3YzIuMjMxMjEsMC45MDE0MyAzLjMwOTIsMy40NDA5MyAyLjQwNzc4LDUuNjcyMTN6IiBmaWxsPSIjZmZmZmZmIiBzdHJva2U9IiMwMDAwMDAiLz48cGF0aCBkPSJNMjE3LjcyOTc5LDE5Ni43MjkyOWMtMi4yMTUxMSwwLjk0MDI5IC00Ljc3MzA3LC0wLjA5MzE0IC01LjcxMzM2LC0yLjMwODI1bC0xLjgyODc5LC00LjMwODE5Yy0wLjk0MDI5LC0yLjIxNTExIDAuMDkzMTQsLTQuNzczMDcgMi4zMDgyNSwtNS43MTMzNmwxMC4wMDM3NywtNC4yNDY1MmwtMTAuMDc2NDcsLTQuMDcwOTljLTIuMjMxMjEsLTAuOTAxNDMgLTMuMzA5MiwtMy40NDA5MyAtMi40MDc3OCwtNS42NzIxM2wxLjc1MzIsLTQuMzM5NWMwLjkwMTQzLC0yLjIzMTIxIDMuNDQwOTMsLTMuMzA5MiA1LjY3MjEzLC0yLjQwNzc4bDE4LjAyNzU0LDcuMjgzM2MtMi4xMjg3MiwxLjA4ODQ4IC0zLjg5MDM2LDIuOTE5MDkgLTQuODU2MjYsNS4zMDk4OWMtMi4wMDIzNyw0Ljk1NjIzIDAuMTI3NDgsMTAuNTU2MDQgNC43Njg1NywxMi45ODA5eiIgZmlsbD0iI2ZmZmZmZiIgc3Ryb2tlPSIjMDAwMDAwIi8+PHBhdGggZD0iTTI2OC4yMzEzOCwxOTMuOTI5NjZjLTAuOTAxNDMsMi4yMzEyMSAtMy40NDA5MywzLjMwOTIgLTUuNjcyMTMsMi40MDc3OGwtMTcuNjAwMTcsLTcuMTEwNjRjMi4wODE0NSwtMS4wOTQ1NyAzLjgwMSwtMi45MDQwMSA0Ljc1MDkyLC01LjI1NTI3YzIuMDU4NDEsLTUuMDk0OTUgLTAuMjQ5OTQsLTEwLjg3MDAyIC01LjE2NDE1LC0xMy4xNzY5N2wxNy43MjQzNiwtNy41MjM4NGMyLjIxNTExLC0wLjk0MDI5IDQuNzczMDcsMC4wOTMxNCA1LjcxMzM2LDIuMzA4MjVsMS44Mjg3OSw0LjMwODE5YzAuOTQwMjksMi4yMTUxMSAtMC4wOTMxNCw0Ljc3MzA3IC0yLjMwODI1LDUuNzEzMzZsLTEwLjAwMzc3LDQuMjQ2NTFsMTAuMDc2NDcsNC4wNzA5OWMyLjIzMTIxLDAuOTAxNDMgMy4zMDkyLDMuNDQwOTMgMi40MDc3OCw1LjY3MjEzeiIgZmlsbD0iI2ZmZmZmZiIgc3Ryb2tlPSIjMDAwMDAwIi8+PHBhdGggZD0iTTI2OC4yMzEzOCwxOTMuOTI5NjZjLTAuOTAxNDMsMi4yMzEyMSAtMy40NDA5MywzLjMwOTIgLTUuNjcyMTMsMi40MDc3OGwtMi4wMDExOCwtMC44MDg0OWMtNi44NDU4Miw5LjA3NDYyIC0xOS4xNjQ4OCwxMi44MTQxOSAtMzAuMjA2NjgsOC4zNTMxOWMtMTEuMDQxODEsLTQuNDYxIC0xNy4zMDU5OCwtMTUuNzA4MzggLTE1LjkyNzAxLC0yNi45OTE2NWwtMi4wMDExOCwtMC44MDg0OWMtMi4yMzEyMSwtMC45MDE0MyAtMy4zMDkyLC0zLjQ0MDkzIC0yLjQwNzc4LC01LjY3MjEzbDEuNzUzMiwtNC4zMzk1YzAuOTAxNDMsLTIuMjMxMjEgMy40NDA5MywtMy4zMDkyIDUuNjcyMTMsLTIuNDA3NzhsMi4wMDExOCwwLjgwODQ5YzYuODQ1ODIsLTkuMDc0NjIgMTkuMTY0ODcsLTEyLjgxNDE5IDMwLjIwNjY4LC04LjM1MzE5YzExLjA0MTgxLDQuNDYxIDE3LjMwNTk5LDE1LjcwODM4IDE1LjkyNzAxLDI2Ljk5MTY1bDIuMDAxMTgsMC44MDg0OWMyLjIzMTIxLDAuOTAxNDMgMy4zMDkyLDMuNDQwOTMgMi40MDc3OCw1LjY3MjEzek0yNDkuNzEsMTgzLjk3MTU0YzIuMTMwNjUsLTUuMjczNzYgLTAuNDE3MzQsLTExLjI3NjIxIC01LjY5MTEsLTEzLjQwNjg2Yy01LjI3Mzc2LC0yLjEzMDY1IC0xMS4yNzYyMSwwLjQxNzM0IC0xMy40MDY4Niw1LjY5MTFjLTIuMTMwNjUsNS4yNzM3NiAwLjQxNzM0LDExLjI3NjIxIDUuNjkxMSwxMy40MDY4NmM1LjI3Mzc2LDIuMTMwNjUgMTEuMjc2MjEsLTAuNDE3MzQgMTMuNDA2ODYsLTUuNjkxMXoiIGZpbGw9IiNmZmZmZmYiIHN0cm9rZT0iIzAwMDAwMCIvPjwvZz48L2c+PC9zdmc+";

  const stopSign =
"data:image/svg+xml;base64,PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz4KPCEtLSBHZW5lcmF0b3I6IEFkb2JlIElsbHVzdHJhdG9yIDE5LjEuMCwgU1ZHIEV4cG9ydCBQbHVnLUluIC4gU1ZHIFZlcnNpb246IDYuMDAgQnVpbGQgMCkgIC0tPgo8c3ZnIHZlcnNpb249IjEuMSIgaWQ9IkxheWVyXzEiIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIgeG1sbnM6eGxpbms9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsiIHg9IjBweCIgeT0iMHB4IgoJIHZpZXdCb3g9IjAgMCAxNCAxNCIgc3R5bGU9ImVuYWJsZS1iYWNrZ3JvdW5kOm5ldyAwIDAgMTQgMTQ7IiB4bWw6c3BhY2U9InByZXNlcnZlIj4KPHN0eWxlIHR5cGU9InRleHQvY3NzIj4KCS5zdDB7ZmlsbDojRUM1OTU5O3N0cm9rZTojQjg0ODQ4O3N0cm9rZS1saW5lY2FwOnJvdW5kO3N0cm9rZS1saW5lam9pbjpyb3VuZDtzdHJva2UtbWl0ZXJsaW1pdDoxMDt9Cjwvc3R5bGU+Cjxwb2x5Z29uIGNsYXNzPSJzdDAiIHBvaW50cz0iNC4zLDAuNSA5LjcsMC41IDEzLjUsNC4zIDEzLjUsOS43IDkuNywxMy41IDQuMywxMy41IDAuNSw5LjcgMC41LDQuMyAiLz4KPC9zdmc+Cg==";
  const startFlag =
"data:image/svg+xml;base64,PHN2ZyBpZD0iTGF5ZXJfMSIgZGF0YS1uYW1lPSJMYXllciAxIiB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHZpZXdCb3g9IjAgMCAxNi42MyAxNy41Ij48ZGVmcz48c3R5bGU+LmNscy0xLC5jbHMtMntmaWxsOiM0Y2JmNTY7c3Ryb2tlOiM0NTk5M2Q7c3Ryb2tlLWxpbmVjYXA6cm91bmQ7c3Ryb2tlLWxpbmVqb2luOnJvdW5kO30uY2xzLTJ7c3Ryb2tlLXdpZHRoOjEuNXB4O308L3N0eWxlPjwvZGVmcz48dGl0bGU+aWNvbi0tZ3JlZW4tZmxhZzwvdGl0bGU+PHBhdGggY2xhc3M9ImNscy0xIiBkPSJNLjc1LDJBNi40NCw2LjQ0LDAsMCwxLDguNDQsMmgwYTYuNDQsNi40NCwwLDAsMCw3LjY5LDBWMTIuNGE2LjQ0LDYuNDQsMCwwLDEtNy42OSwwaDBhNi40NCw2LjQ0LDAsMCwwLTcuNjksMCIvPjxsaW5lIGNsYXNzPSJjbHMtMiIgeDE9IjAuNzUiIHkxPSIxNi43NSIgeDI9IjAuNzUiIHkyPSIwLjc1Ii8+PC9zdmc+";

  class SPtuneShark {
    constructor() {
      this.sounds = {};
      this.overlappables = {};
      this.overriddenVol = {};

      Scratch.vm.runtime.on("PROJECT_START", () => {
        if (controller) this.controlAllSounds({ CONTROL : "stop" });
      });
      Scratch.vm.runtime.on("PROJECT_STOP_ALL", () => {
        if (controller) this.controlAllSounds({ CONTROL : "stop" });
      });
    }
    getInfo() {
      return {
        id: "SPtuneShark",
        name: "Tune Shark",
        color1: "#848484",
        color2: "#676767",
        color3: "#4e4e4e",
        menuIconURI,
        blockIconURI,
        blocks: [
          {
            opcode: "importSound",
            blockType: Scratch.BlockType.COMMAND,
            text: "import sound from URL/URI [URL] named [NAME]",
            blockIconURI: settingsIconURI,
            arguments: {
              URL: {
                type: Scratch.ArgumentType.STRING,
                defaultValue: "https://tinyurl.com/Resonance-Home"
              },
              NAME: {
                type: Scratch.ArgumentType.STRING,
                defaultValue: "MySound"
              }
            },
          },
          {
            func: "enableTest",
            blockType: Scratch.BlockType.BUTTON,
            text: "Enable Sprite Sound Block",
            hideFromPalette: !enableBlock
          },
          {
            opcode: "importMenuSound",
            blockType: Scratch.BlockType.COMMAND,
            text: "import sound [SOUND] named [NAME]",
            blockIconURI: settingsIconURI,
            hideFromPalette: enableBlock,
            arguments: {
              SOUND: { type: Scratch.ArgumentType.SOUND },
              NAME: {
                type: Scratch.ArgumentType.STRING,
                defaultValue: "MySound"
              }
            },
          },
          {
            opcode: "convertURLToURI",
            blockType: Scratch.BlockType.COMMAND,
            text: "convert sound [INPUT_NAME] from URL to URI and save it to sound [OUTPUT_NAME]",
            arguments: {
              INPUT_NAME: {
                type: Scratch.ArgumentType.STRING,
                defaultValue: "MySound"
              },
              OUTPUT_NAME: {
                type: Scratch.ArgumentType.STRING,
                defaultValue: "MySound2"
              }
            },
          },
          { blockType: Scratch.BlockType.LABEL, text: "Audio Playback" },
          {
            opcode: "playSound",
            blockType: Scratch.BlockType.COMMAND,
            text: "play sound [NAME]",
            arguments: {
              NAME: {
                type: Scratch.ArgumentType.STRING,
                defaultValue: "MySound"
              }
            },
          },
          {
            opcode: "playSoundAt",
            blockType: Scratch.BlockType.COMMAND,
            text: "start sound [NAME] at time [START_TIME]",
            arguments: {
              NAME: {
                type: Scratch.ArgumentType.STRING,
                defaultValue: "MySound"
              },
              START_TIME: {
                type: Scratch.ArgumentType.NUMBER,
                defaultValue: 0
              }
            },
          },
          {
            opcode: "startAndStop", // depreciated block
            blockType: Scratch.BlockType.COMMAND,
            text: "play sound [NAME] and stop at [MAX] seconds",
            hideFromPalette: true,
            arguments: {
              NAME: { type: Scratch.ArgumentType.STRING, defaultValue: "MySound" },
              MAX: { type: Scratch.ArgumentType.NUMBER, defaultValue: 2 }
            }
          },
          {
            opcode: "lateStartAndStop",
            blockType: Scratch.BlockType.COMMAND,
            text: "start sound [NAME] at time [START_TIME] and stop at [MAX] seconds",
            arguments: {
              NAME: {
                type: Scratch.ArgumentType.STRING,
                defaultValue: "MySound"
              },
              START_TIME: {
                type: Scratch.ArgumentType.NUMBER,
                defaultValue: 0
              },
              MAX: {
                type: Scratch.ArgumentType.NUMBER,
                defaultValue: 2
              }
            },
          },
          {
            opcode: "stopSound",
            blockType: Scratch.BlockType.COMMAND,
            text: "stop sound [NAME]",
            arguments: {
              NAME: {
                type: Scratch.ArgumentType.STRING,
                defaultValue: "MySound"
              }
            },
          },
          {
            opcode: "controlAllSounds",
            blockType: Scratch.BlockType.COMMAND,
            text: "[CONTROL] all sounds",
            arguments: {
              CONTROL: {
                type: Scratch.ArgumentType.STRING,
                menu: "control"
              }
            },
          },
          "---",
          {
            opcode: "pauseUnpauseSound",
            blockType: Scratch.BlockType.COMMAND,
            text: "[PAUSE_UNPAUSE] sound [NAME]",
            arguments: {
              NAME: {
                type: Scratch.ArgumentType.STRING,
                defaultValue: "MySound"
              },
              PAUSE_UNPAUSE: {
                type: Scratch.ArgumentType.STRING,
                menu: "pauseUnpauseMenu"
              }
            },
          },
          {
            opcode: "pauseUnpauseAllSounds",
            blockType: Scratch.BlockType.COMMAND,
            text: "[PAUSE_UNPAUSE] all sounds",
            arguments: {
              PAUSE_UNPAUSE: {
                type: Scratch.ArgumentType.STRING,
                menu: "pauseUnpauseMenu"
              }
            },
          },
          { blockType: Scratch.BlockType.LABEL, text: "Audio Effects" },
          {
            opcode: "setSoundVolume",
            blockType: Scratch.BlockType.COMMAND,
            text: "set volume of sound [NAME] to [VOLUME]",
            arguments: {
              NAME: {
                type: Scratch.ArgumentType.STRING,
                defaultValue: "MySound"
              },
              VOLUME: {
                type: Scratch.ArgumentType.NUMBER,
                defaultValue: 100
              }
            },
          },
          {
            opcode: "setSoundSpeed",
            blockType: Scratch.BlockType.COMMAND,
            text: "set speed of sound [NAME] to [SPEED]",
            arguments: {
              NAME: {
                type: Scratch.ArgumentType.STRING,
                defaultValue: "MySound"
              },
              SPEED: {
                type: Scratch.ArgumentType.NUMBER,
                defaultValue: 1.0
              }
            },
          },
          {
            opcode: "setSoundPitch",
            blockType: Scratch.BlockType.COMMAND,
            text: "set pitch of sound [NAME] to [PITCH]",
            arguments: {
              NAME: {
                type: Scratch.ArgumentType.STRING,
                defaultValue: "MySound"
              },
              PITCH: {
                type: Scratch.ArgumentType.NUMBER,
                defaultValue: 1.0
              }
            },
          },
          { blockType: Scratch.BlockType.LABEL, text: "Audio Operations" },
          {
            opcode: "toggleLoopSound",
            blockType: Scratch.BlockType.COMMAND,
            text: "set sound [NAME] to [LOOP_STATE]",
            blockIconURI: settingsIconURI,
            arguments: {
              NAME: {
                type: Scratch.ArgumentType.STRING,
                defaultValue: "MySound"
              },
              LOOP_STATE: {
                type: Scratch.ArgumentType.STRING,
                menu: "loopMenu"
              }
            },
          },
          {
            opcode: "toggleOverlap",
            blockType: Scratch.BlockType.COMMAND,
            text: "toggle sound [NAME] overlapping [OVERLAP]",
            blockIconURI: settingsIconURI,
            arguments: {
              NAME: {
                type: Scratch.ArgumentType.STRING,
                defaultValue: "MySound"
              },
              OVERLAP: {
                type: Scratch.ArgumentType.STRING,
                menu: "overlapMenu",
              }
            },
          },
          "---",
          {
            opcode: "soundProperty",
            blockType: Scratch.BlockType.REPORTER,
            text: "sound [NAME] [PROPERTY]",
            blockIconURI: settingsIconURI,
            arguments: {
              NAME: {
                type: Scratch.ArgumentType.STRING,
                defaultValue: "MySound"
              },
              PROPERTY: {
                type: Scratch.ArgumentType.STRING,
                menu: "soundProperties"
              }
            },
          },
          {
            opcode: "currentSoundTime",
            blockType: Scratch.BlockType.REPORTER,
            text: "current time of sound [NAME]",
            blockIconURI: settingsIconURI,
            arguments: {
              NAME: {
                type: Scratch.ArgumentType.STRING,
                defaultValue: "MySound"
              }
            },
          },
          {
            opcode: "getLoudnessAtTime",
            blockType: Scratch.BlockType.REPORTER,
            text: "loudness of sound [NAME] at time [TIME]",
            blockIconURI: settingsIconURI,
            arguments: {
              NAME: {
                type: Scratch.ArgumentType.STRING,
                defaultValue: "MySound"
              },
              TIME: {
                type: Scratch.ArgumentType.NUMBER,
                defaultValue: 0
              }
            },
          },
          "---",
          {
            opcode: "returnInfo",
            blockType: Scratch.BlockType.REPORTER,
            text: "URL used by sound [NAME]",
            blockIconURI: settingsIconURI,
            arguments: {
              NAME: {
                type: Scratch.ArgumentType.STRING,
                defaultValue: "MySound"
              }
            },
          },
          {
            opcode: "soundCheck",
            blockType: Scratch.BlockType.BOOLEAN,
            text: "sound [NAME] [CONTROL]",
            blockIconURI: settingsIconURI,
            arguments: {
              NAME: {
                type: Scratch.ArgumentType.STRING,
                defaultValue: "MySound"
              },
              CONTROL: {
                type: Scratch.ArgumentType.STRING,
                menu: "control2"
              }
            },
          },
          {
            opcode: "allSounds",
            blockType: Scratch.BlockType.REPORTER,
            text: "all sounds",
            disableMonitor: true,
            blockIconURI: settingsIconURI
          },
          {
            opcode: "deleteSound",
            blockType: Scratch.BlockType.COMMAND,
            text: "delete sound [NAME]",
            blockIconURI: settingsIconURI,
            arguments: {
              NAME: {
                type: Scratch.ArgumentType.STRING,
                defaultValue: "MySound"
              }
            },
          },
          {
            opcode: "deleteAllSounds",
            blockType: Scratch.BlockType.COMMAND,
            text: "delete all sounds",
            blockIconURI: settingsIconURI
          },
          {
            opcode: "enableControllers",
            blockType: Scratch.BlockType.COMMAND,
            text: "toggle sound link to [GO] [STOP] [ON_OFF]",
            blockIconURI: settingsIconURI,
            arguments: {
              GO: { type: Scratch.ArgumentType.IMAGE, dataURI: startFlag },
              STOP: { type: Scratch.ArgumentType.IMAGE, dataURI: stopSign },
              ON_OFF: {
                type: Scratch.ArgumentType.STRING,
                menu: "overlapMenu"
              }
            }
          },
          { blockType: Scratch.BlockType.LABEL, text: "Array Sound Grouping" },
          {
            opcode: "playSounds",
            blockType: Scratch.BlockType.COMMAND,
            text: "play sounds [NAMES]",
            blockIconURI: groupIconURI,
            arguments: {
              NAMES: {
                type: Scratch.ArgumentType.STRING,
                defaultValue: "[\"MySound\", \"MySound2\"]"
              }
            },
          },
          {
            opcode: "playSoundsAt",
            blockType: Scratch.BlockType.COMMAND,
            text: "start sounds [NAMES] at time [START_TIME]",
            blockIconURI: groupIconURI,
            arguments: {
              NAMES: {
                type: Scratch.ArgumentType.STRING,
                defaultValue: "[\"MySound\", \"MySound2\"]"
              },
              START_TIME: {
                type: Scratch.ArgumentType.NUMBER,
                defaultValue: 0
              }
            },
          },
          {
            opcode: "stopSounds",
            blockType: Scratch.BlockType.COMMAND,
            text: "stop sounds [NAMES]",
            blockIconURI: groupIconURI,
            arguments: {
              NAMES: {
                type: Scratch.ArgumentType.STRING,
                defaultValue: "[\"MySound\", \"MySound2\"]"
              }
            },
          },
          {
            opcode: "pauseUnpauseSounds",
            blockType: Scratch.BlockType.COMMAND,
            text: "[PAUSE_UNPAUSE] sounds [NAMES]",
            blockIconURI: groupIconURI,
            arguments: {
              NAMES: {
                type: Scratch.ArgumentType.STRING,
                defaultValue: "[\"MySound\", \"MySound2\"]"
              },
              PAUSE_UNPAUSE: {
                type: Scratch.ArgumentType.STRING,
                menu: "pauseUnpauseMenu"
              }
            },
          },
          { blockType: Scratch.BlockType.LABEL, text: "Group Effects" },
          {
            opcode: "setSoundsVolume",
            blockType: Scratch.BlockType.COMMAND,
            text: "set volume of sounds [NAMES] to [VOLUME]",
            blockIconURI: groupIconURI,
            arguments: {
              NAMES: {
                type: Scratch.ArgumentType.STRING,
                defaultValue: "[\"MySound\", \"MySound2\"]"
              },
              VOLUME: {
                type: Scratch.ArgumentType.NUMBER,
                defaultValue: 100
              }
            },
          },
          {
            opcode: "setSoundSpeeds",
            blockType: Scratch.BlockType.COMMAND,
            text: "set speed of sounds [NAMES] to [SPEED]",
            blockIconURI: groupIconURI,
            arguments: {
              NAMES: {
                type: Scratch.ArgumentType.STRING,
                defaultValue: "[\"MySound\", \"MySound2\"]"
              },
              SPEED: {
                type: Scratch.ArgumentType.NUMBER,
                defaultValue: 1.0
              }
            },
          },
          {
            opcode: "setSoundsPitch",
            blockType: Scratch.BlockType.COMMAND,
            text: "set pitch of sounds [NAMES] to [PITCH]",
            blockIconURI: groupIconURI,
            arguments: {
              NAMES: {
                type: Scratch.ArgumentType.STRING,
                defaultValue: "[\"MySound\", \"MySound2\"]"
              },
              PITCH: {
                type: Scratch.ArgumentType.NUMBER,
                defaultValue: 1.0
              }
            },
          }
        ],
        menus: {
          pauseUnpauseMenu: ["pause", "unpause"],
          soundProperties: {
            acceptReporters: true,
            items: ["length", "volume", "speed", "pitch", "paused?", "looping?"]
          },
          loopMenu: ["loopable", "unloopable"],
          control: ["play", "stop"],
          control2: ["exists?", "playing?"],
          overlapMenu: ["on", "off"]
        },
      };
    }

    enableTest() {
      let popup = [
        "This will enable the \"Import Sound from Sprite Menu\" Block. WARNING! Although this Block will Import Sounds from the Sprite Libary, it might not always work for every sound.",
        "Continue?"
      ];
      if (confirm(popup.join("\n\n"))) {
        enableBlock = false;
        Scratch.vm.extensionManager.refreshBlocks();
      }
    }

    strainVolume() {
      if (startedLoop) return;
      startedLoop = true;
      let volOverride = {};
      const loop = () => {
        this.pauseListener();
        pauseVal = vm.runtime.ioDevices.clock._paused;
        let proVol = Scratch.vm.runtime.audioEngine.inputNode.gain.value;
        proVol = Math.round(proVol * 10000) / 100;
        try {
          const names = Object.keys(this.sounds);
          if (names.length > 0) {
            names.forEach(name => {
              const curVol = this.overriddenVol[name].val || 100;
              const volume = Math.max(0, Math.min(100, curVol * (proVol / 100)));
              const soundInstances = this.sounds[name];
              if (soundInstances && soundInstances.length > 0) {
                soundInstances.forEach((audio) => { audio.volume = volume / 100 });
              }
            });
          }
          setTimeout(loop, 0);
        } catch {}
      };
      loop();
    }
    async pauseListener() {
      let pausedSounds = [];
      try {
        const status = vm.runtime.ioDevices.clock._paused;
        if (pauseVal !== status && status) {
          const names = Object.keys(this.sounds);
          if (names.length > 0) {
            names.forEach(name => {
              const soundInstances = this.sounds[name];
              if (soundInstances && soundInstances.length > 0) {
                soundInstances.forEach((audio) => {
                  if (!audio.paused) {
                    pausedSounds.push(audio);
                    audio.pause();
                  }
                });
              }
            });
          }
          await waitForUnpause();
          for (let i = 0; i < pausedSounds.length; i++) { pausedSounds[i].play() }
        }
      } catch(e) { console.log(e) }
    };

    importSound(args) {
      if (this.sounds[args.NAME] !== undefined) this.deleteSound(args);
      const audio = new Audio(args.URL);
      this.sounds[args.NAME] = [audio];
      this.overriddenVol[args.NAME] = { val : 100 };
      this.strainVolume();
    }

    importMenuSound(args, util) {
      if (this.sounds[args.NAME] !== undefined) this.deleteSound(args);
      const index = this.SoundIndex(args.SOUND, util);
      if (index < 0) return;
      const sprite = util.target.sprite;
      const soundDataURI = sprite.sounds[index].asset.encodeDataURI();
      const { URI = soundDataURI, NAME } = args;
      const audio = new Audio(soundDataURI);
      this.sounds[NAME] = [audio];
    }
    SoundIndex(soundName, util) {
      const sounds = util.target.sprite.sounds;
      return sounds.indexOf(sounds.filter((sound) => { return sound.name == soundName })[0]);
    }

    playSound(args) {
      const soundInstances = this.sounds[args.NAME];
      if (soundInstances && soundInstances.length > 0) {
        soundInstances.forEach((audio) => {
          if (audio.currentTime > 0.2 && audio.currentTime !== audio.duration) this.checkOverlap(args);
          audio.play();
        });
      }
    }

    playSoundAt(args) {
      const soundInstances = this.sounds[args.NAME];
      if (soundInstances && soundInstances.length > 0) {
        soundInstances.forEach((audio) => {
          if (audio.currentTime !== args.START_TIME && audio.currentTime > 0.2) this.checkOverlap(args);
          audio.currentTime = args.START_TIME;
          audio.play();
        });
      }
    }
    
    async startAndStop(args) { await this.playSoundandStop(args.NAME, args.MAX, 0) }
    async lateStartAndStop(args) { await this.playSoundandStop(args.NAME, args.MAX, args.START_TIME) }

    async playSoundandStop(NAME, MAX, START_TIME) {
      const soundInstances = this.sounds[NAME];
      if (soundInstances && soundInstances.length > 0) {
        soundInstances.forEach((audio) => {
          audio.currentTime = START_TIME;
          audio.play();
        });
      }
      await new Promise((resolve, reject) => {
        const maxTime = (MAX - START_TIME) * 1000;
        setTimeout(() => {
          const soundInstances = this.sounds[NAME];
          if (soundInstances && soundInstances.length > 0) {
            soundInstances.forEach((audio) => {
              audio.pause();
              audio.currentTime = 0;
            });
          }
          resolve();
        }, maxTime);
      });
    }

    stopSound(args) {
      const soundInstances = this.sounds[args.NAME];
      if (soundInstances && soundInstances.length > 0) {
        soundInstances.forEach((audio) => {
          audio.pause();
          audio.currentTime = 0;
        });
      }
    }

    controlAllSounds(args) {
      Object.values(this.sounds).forEach((soundInstances) => {
        soundInstances.forEach((audio) => {
          if (args.CONTROL === "play") {
            audio.play();
          } else {
            audio.pause();
            audio.currentTime = 0;
          }
        });
      });
    }

    setSoundVolume(args) {
      args.VOLUME = Math.max(0, Math.min(100, args.VOLUME));
      const soundInstances = this.sounds[args.NAME];
      if (soundInstances && soundInstances.length > 0) {
        soundInstances.forEach((audio) => { audio.volume = args.VOLUME / 100 });
        this.overriddenVol[args.NAME] = { val : args.VOLUME };
      }
    }

    setSoundSpeed(args) {
      if (args.SPEED < 0) args.SPEED = 0;
      const soundInstances = this.sounds[args.NAME];
      if (soundInstances && soundInstances.length > 0) {
        soundInstances.forEach((audio) => { audio.playbackRate = args.SPEED });
      }
    }

    setSoundPitch(args) {
      const soundInstances = this.sounds[args.NAME];
      if (soundInstances && soundInstances.length > 0) {
        soundInstances.forEach((audio) => {
          audio.mozPreservesPitch = false;
          audio.playbackRate = 1;
          const semitoneRatio = Math.pow(2, 1 / 12);
          const currentPitch = Math.pow(semitoneRatio, args.PITCH);
          audio.playbackRate = currentPitch;
        });
      }
    }

    toggleLoopSound(args) {
      const soundInstances = this.sounds[args.NAME];
      if (soundInstances && soundInstances.length > 0) {
        const loop = args.LOOP_STATE === "loopable";
        soundInstances.forEach((audio) => { audio.loop = loop });
      }
    }

    toggleOverlap(args) {
      if (args.OVERLAP === "on") {
        const source = this.returnInfo(args);
        if (source !== "Audio Doesnt Exist!") this.overlappables[args.NAME] = {src : source};
      } else {
        delete this.overlappables[args.NAME];
      }
    }

    pauseUnpauseSound(args) {
      const soundInstances = this.sounds[args.NAME];
      if (soundInstances && soundInstances.length > 0) {
        const pause = args.PAUSE_UNPAUSE === "pause";
        soundInstances.forEach((audio) => {
          if (pause && !audio.paused) {
            audio.pause();
          } else if (!pause && audio.paused) {
            audio.play();
          }
        });
      }
    }

    pauseUnpauseAllSounds(args) {
      const pause = args.PAUSE_UNPAUSE === "pause";
      Object.values(this.sounds).forEach((soundInstances) => {
        soundInstances.forEach((audio) => {
          if (pause && !audio.paused) {
            audio.pause();
          } else if (!pause && audio.paused) {
            audio.play();
          }
        });
      });
    }

    soundCheck(args) {
      if (args.CONTROL === "exists?") {
        return this.sounds.hasOwnProperty(args.NAME);
      } else {
        const soundInstances = this.sounds[args.NAME];
        if (soundInstances && soundInstances.length > 0) {
          const audio = soundInstances[0];
          return (audio.currentTime !== 0 && !audio.paused);
        }
        return false;
      }
    }

    soundProperty(args) {
      const soundInstances = this.sounds[args.NAME];
      if (soundInstances && soundInstances.length > 0) {
        const audio = soundInstances[0];
        switch (args.PROPERTY) {
          case "length": return audio.duration;
          case "volume": return this.overriddenVol[args.NAME].val;
          case "speed": return audio.playbackRate;
          case "pitch": return this.getPitchFromAudio(audio);
          case "paused?": return audio.paused;
          case "looping?": return audio.loop;
        }
      }
      return 0;
    }

    getPitchFromAudio(audio) {
      const semitoneRatio = Math.pow(2, 1 / 12);
      const currentPitch = Math.log(audio.playbackRate) / Math.log(semitoneRatio);
      return Math.round(currentPitch * 10) / 10;
    }

    currentSoundTime(args) {
      const soundInstances = this.sounds[args.NAME];
      if (soundInstances && soundInstances.length > 0) {
        const audio = soundInstances[0];
        return audio.currentTime;
      }
      return 0;
    }

    allSounds() { return JSON.stringify(Object.keys(this.sounds)) }

    deleteAllSounds() {
      this.controlAllSounds("stop");  
      this.sounds = {};
      this.overlappables = {};
    }

    deleteSound(args) {
      this.stopSound(args);
      delete this.sounds[args.NAME];
      delete this.overlappables[args.NAME];
    }

    enableControllers(args) { controller = args.ON_OFF === "on" }

    playSounds(args) {
      const namesArray = JSON.parse(args.NAMES);
      namesArray.forEach((name) => {
        const soundInstances = this.sounds[name];
        if (soundInstances && soundInstances.length > 0) {
          soundInstances.forEach((audio) => { audio.play() });
        }
      });
    }

    playSoundsAt(args) {
      const namesArray = JSON.parse(args.NAMES);
      namesArray.forEach((name) => {
        const soundInstances = this.sounds[name];
        if (soundInstances && soundInstances.length > 0) {
          soundInstances.forEach((audio) => {
            audio.currentTime = args.START_TIME;
            audio.play();
          });
        }
      });
    }

    stopSounds(args) {
      const namesArray = JSON.parse(args.NAMES);
      namesArray.forEach((name) => {
        const soundInstances = this.sounds[name];
        if (soundInstances && soundInstances.length > 0) {
          soundInstances.forEach((audio) => {
            audio.pause();
            audio.currentTime = 0;
          });
        }
      });
    }

    pauseUnpauseSounds(args) {
      const namesArray = JSON.parse(args.NAMES);
      const pause = args.PAUSE_UNPAUSE === "pause";
      namesArray.forEach((name) => {
        const soundInstances = this.sounds[name];
        if (soundInstances && soundInstances.length > 0) {
          soundInstances.forEach((audio) => {
            if (pause && !audio.paused) {
              audio.pause();
            } else if (!pause && audio.paused) {
              audio.play();
            }
          });
        }
      });
    }

    setSoundsVolume(args) {
      const adjustedVolume = Math.max(0, Math.min(100, args.VOLUME));
      const namesArray = JSON.parse(args.NAMES);
      namesArray.forEach((name) => {
        const soundInstances = this.sounds[name];
        if (soundInstances && soundInstances.length > 0) {
          soundInstances.forEach((audio) => { audio.volume = adjustedVolume / 100 });
          this.overriddenVol[name] = { val : adjustedVolume };
        }
      });
    }

    setSoundSpeeds(args) {
      if (args.SPEED < 0) args.SPEED = 0;
      const namesArray = JSON.parse(args.NAMES);
      namesArray.forEach((name) => {
        const soundInstances = this.sounds[name];
        if (soundInstances && soundInstances.length > 0) {
          soundInstances.forEach((audio) => { audio.playbackRate = args.SPEED });
        }
      });
    }

    setSoundsPitch(args) {
      const namesArray = JSON.parse(args.NAMES);
      namesArray.forEach((name) => {
        const soundInstances = this.sounds[name];
        if (soundInstances && soundInstances.length > 0) {
          soundInstances.forEach((audio) => {
            audio.mozPreservesPitch = false;
            audio.playbackRate = 1;
            const semitoneRatio = Math.pow(2, 1 / 12);
            const currentPitch = Math.pow(semitoneRatio, args.PITCH);
            audio.playbackRate = currentPitch;
          });
        }
      });
    }

    getLoudnessAtTime(args) {
      const { NAME, TIME } = args;
      const soundInstances = this.sounds[NAME];
      if (soundInstances && soundInstances.length > 0) {
        const audio = soundInstances[0];
        const audioDuration = audio.duration;
        if (TIME >= 0 && TIME <= audioDuration) {
          let audioURI = audio.src;
          if (!audioURI.startsWith("data:")) return "Audio URLs DO NOT WORK, convert to URI!";
          const uriIndex = Math.floor(audioURI.length * (TIME / audioDuration));
          if (uriIndex >= 0 && uriIndex < audioURI.length) {
            const characterAtTime = audioURI.charAt(uriIndex);
            let loudnessValue = characterAtTime.charCodeAt(0);
            loudnessValue = (Math.PI / 180) * loudnessValue; 
            loudnessValue = (Math.sin(loudnessValue / 2) * 100) - 50;
            loudnessValue = loudnessValue * ((loudnessValue < 0) ? -2 : 3);
            return loudnessValue;
          }
        }
      }
      return soundInstances ? "Invalid Time Input!" : "Audio Doesnt Exist!";
    }

    async convertURLToURI(args) {
      const soundInstances = this.sounds[args.INPUT_NAME];
      if (soundInstances && soundInstances.length > 0) {
        const audio = soundInstances[0];
        const audioURI = audio.src;
        try {
          const response = await fetch(audioURI);
          const audioBlob = await response.blob();
          const audioDataURL = await new Promise((resolve) => {
            const reader = new FileReader();
            reader.onloadend = () => resolve(reader.result);
            reader.readAsDataURL(audioBlob);
          });
          this.sounds[args.OUTPUT_NAME] = [new Audio(audioDataURL)];
          console.log("Conversion Success!");
        } catch (error) { console.error("Error Converting: " + error.message) }
      } else { console.log("Audio Doesnt Exist!") }
    }

    returnInfo(args) {
      const soundInstances = this.sounds[args.NAME];
      if (soundInstances && soundInstances.length > 0) return Scratch.Cast.toString(this.sounds[args.NAME][0].src);
      return "Audio Doesnt Exist!";
    }

    checkOverlap(args) {
      if (this.overlappables[args.NAME] !== undefined) {
        const sourcePlayer = this.sounds[args.NAME][0];
        const audioOver = new Audio(this.overlappables[args.NAME].src);
        audioOver.playbackRate = sourcePlayer.playbackRate || audioOver.defaultPlaybackRate;
        audioOver.currentTime = args.START_TIME || 0;
        audioOver.volume = sourcePlayer.volume || 1;
        audioOver.play();

        const checkConInter = setInterval(() => {
          audioOver.playbackRate = sourcePlayer.playbackRate || audioOver.defaultPlaybackRate;
          audioOver.volume = sourcePlayer.volume || 1;
          const curTime = Math.round(sourcePlayer.currentTime * 1000) / 1000;
          const curLen = Math.round(sourcePlayer.duration * 1000) / 1000;
          if (sourcePlayer.paused && curTime !== curLen) {
            audioOver.pause();
            const checkCon = () => {
              if (sourcePlayer.paused) {
                setTimeout(checkCon, 10);
              } else { audioOver.play() }
            };
            checkCon();
          }
          if (sourcePlayer.paused && sourcePlayer.currentTime === 0) {
            audioOver.pause();
            audioOver.currentTime = 0;
            audioOver.src = "";
            if (audioOver.context) audioOver.context.close();
            clearInterval(checkConInter);
          }
        }, 100);
      }
    }
  }

  Scratch.extensions.register(new SPtuneShark());
})(Scratch);
","https://extensions.turbowarp.org/Lily/TempVariables2.js","https://extensions.turbowarp.org/encoding.js","https://extensions.turbowarp.org/Lily/Video.js","https://extensions.turbowarp.org/Lily/lmsutils.js","data:application/x-javascript;base64,(function (Scratch) {
  "use strict";
  const vm = Scratch.vm;


  //3dMath variables
  const spriteData = {};
  let fov = 300;
  const d2r = 0.0174533;
  const camera = {
    position: [0, 0, 0],
    rotation: [0, 0, 0],
    sinAndCos: [
      0,
      1,
      0,
      1,
      0,
      1,
    ],
  };

  //I'm going to write a whole library for pen+ interaction in the future.
  let penPLoaded = false;let penPModule = null;
  let penPIcon = "data:image/svg+xml;base64,PHN2ZyB2ZXJzaW9uPSIxLjEiIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIgeG1sbnM6eGxpbms9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsiIHdpZHRoPSI2My45NDMyMiIgaGVpZ2h0PSI2My45NDMyMiIgdmlld0JveD0iMCwwLDYzLjk0MzIyLDYzLjk0MzIyIj48ZyB0cmFuc2Zvcm09InRyYW5zbGF0ZSgtMjA4LjAyODM3LC0xNDguMDI4MzkpIj48ZyBkYXRhLXBhcGVyLWRhdGE9InsmcXVvdDtpc1BhaW50aW5nTGF5ZXImcXVvdDs6dHJ1ZX0iIHN0cm9rZS1taXRlcmxpbWl0PSIxMCIgc3Ryb2tlLWRhc2hhcnJheT0iIiBzdHJva2UtZGFzaG9mZnNldD0iMCIgc3R5bGU9Im1peC1ibGVuZC1tb2RlOiBub3JtYWwiPjxwYXRoIGQ9Ik0yMTIuNTU4NCwyMDcuMTgyNjJ2LTM3Ljg4NDU3aDM3Ljc1NzQ0djM3Ljg4NDU3eiIgZmlsbD0iI2FkYzIxMyIgZmlsbC1ydWxlPSJub256ZXJvIiBzdHJva2U9IiNmZmZmZmYiIHN0cm9rZS13aWR0aD0iMCIgc3Ryb2tlLWxpbmVjYXA9ImJ1dHQiIHN0cm9rZS1saW5lam9pbj0ibWl0ZXIiLz48cGF0aCBkPSJNMjEzLjk1NjgzLDE2OS42Nzk0NWwxNi4zOTk2OSwtMTcuNTQzODZsMzUuODUwNSwwLjUwODUybC0xNS41MDk3OSwxNi42NTM5NXoiIGZpbGw9IiNhZGMyMTMiIGZpbGwtcnVsZT0ibm9uemVybyIgc3Ryb2tlPSJub25lIiBzdHJva2Utd2lkdGg9IjAiIHN0cm9rZS1saW5lY2FwPSJidXR0IiBzdHJva2UtbGluZWpvaW49Im1pdGVyIi8+PHBhdGggZD0iTTI1MC45NTE0OSwyMDYuNTQ2OTh2LTUzLjAxMjk3aDE2LjkwODIxbC0wLjYzNTY1LDM2LjQ4NjE0eiIgZmlsbD0iI2FkYzIxMyIgZmlsbC1ydWxlPSJub256ZXJvIiBzdHJva2U9IiNmZmZmZmYiIHN0cm9rZS13aWR0aD0iMCIgc3Ryb2tlLWxpbmVjYXA9ImJ1dHQiIHN0cm9rZS1saW5lam9pbj0ibWl0ZXIiLz48cGF0aCBkPSJNMjY4LjgzMDA0LDE1Mi4zNzEyNHYzOC40NDAwMmMwLDAuMDY5NzEgLTAuMDI4ODMsMC4xMzIyMSAtMC4wNDA4OCwwLjE5OTQ1Yy0wLjAxNDQyLDAuMDg4ODYgLTAuMDE5MTQsMC4xNzUzNSAtMC4wNTI4MiwwLjI1OTQ3Yy0wLjA2MDAyLDAuMTQ2NTIgLTAuMTQ4OTksMC4yODEwOSAtMC4yNTk0NywwLjM5MTU3bC0xNi44MTc0OSwxNi44MTc0OWMtMC4wMDk2OSwwLjAwOTU3IC0wLjAyNDEsMC4wMTIwNSAtMC4wMzM2NywwLjAyMTYyYy0wLjEwNTY0LDAuMDk2MTggLTAuMjIwOTUsMC4xODAxOSAtMC4zNTU1MywwLjIzNTQ4Yy0wLjE0NjYzLDAuMDYyNSAtMC4zMDI3MiwwLjA5MzcgLTAuNDU4OTIsMC4wOTM3aC0zOC40NDAwMmMtMC42NjMwOSwwIC0xLjIwMTI5LC0wLjUzODIgLTEuMjAxMjksLTEuMjAxMTh2LTM4LjQzNTI5YzAsLTAuMTU4NTcgMC4wMzEyLC0wLjMxNDc3IDAuMDkxMzMsLTAuNDY2MTJjMC4wNTUzLC0wLjEzMjEgMC4xMzk0MiwtMC4yNDk5IDAuMjM1NDgsLTAuMzUzMTdjMC4wMTE5NCwtMC4wMDk2OSAwLjAxNDQyLC0wLjAyNDEgMC4wMjM5OSwtMC4wMzM2N2wxNi44MTczOCwtMTYuODE3NDljMC4xMTI5NiwtMC4xMTI4NCAwLjI0NTA2LC0wLjE5OTMzIDAuMzk0MDUsLTAuMjYxODRjMC4wODE3NiwtMC4wMzM2NyAwLjE3MDYyLC0wLjAzNjA0IDAuMjU3MTEsLTAuMDUwNDVjMC4wNjczNSwtMC4wMTIwNSAwLjEyOTc0LC0wLjA0MDg4IDAuMTk5NDUsLTAuMDQwODhoMzguNDQwMDJjMC4wOTEzMywwIDAuMTcyOTgsMC4wMzM2NyAwLjI1NDc0LDAuMDUwNDVjMC4wNjcyMywwLjAxNjg5IDAuMTM0NDcsMC4wMTQ0MiAwLjE5Njk3LDAuMDQwODhjMC4yOTc4NywwLjEyMjUzIDAuNTMzMzYsMC4zNTgwMSAwLjY1NTg4LDAuNjU1ODhjMC4wMjY0NywwLjA2MjM5IDAuMDI2NDcsMC4xMzIxIDAuMDQwODgsMC4xOTY5N2MwLjAxOTE0LDAuMDg0MTIgMC4wNTI4MiwwLjE2NTc3IDAuMDUyODIsMC4yNTcxMXpNMjQ5LjYwOTk3LDE3MC4zOTAwMmgtMzYuMDM3NTZ2MzYuMDM3NTZoMzYuMDM3NTZ6TTI2NC43Mjg5NSwxNTMuNTcyNDJoLTM1LjA0MjkybC0xNC40MTUwMiwxNC40MTUwMmgzNS4wNDI5MnpNMjY2LjQyNzU3LDE1NS4yNzEwM2wtMTQuNDE1MDIsMTQuNDE1MDJ2MzUuMDQyOTJsMTQuNDE1MDIsLTE0LjQxNTAyeiIgZmlsbD0iIzdlOGQwYiIgZmlsbC1ydWxlPSJub256ZXJvIiBzdHJva2U9IiM3ZThkMGIiIHN0cm9rZS13aWR0aD0iNiIgc3Ryb2tlLWxpbmVjYXA9ImJ1dHQiIHN0cm9rZS1saW5lam9pbj0ibWl0ZXIiLz48cGF0aCBkPSJNMjIyLjUyNzU2LDE5OC45ODA5NmwtMy4yMjM0NywxLjM1MDA2bDEuMzUyMzQsLTMuMjEzNjFjMC45MjM4MSwtMi4xOTM0OCAyLjIwNDg1LC00LjExMzE1IDMuODE1MDcsLTUuNzE3M2wxNC45Nzk2NSwtMTQuOTI0MjhjMC42NDE2NiwtMC42Mzg2MyAyLjAwOTkzLC0wLjMxMDk3IDMuMDU4MTIsMC43MzM0M2MxLjA0NjY4LDEuMDQyODkgMS4zNzczNywyLjQwNjYgMC43MzU3MSwzLjA0NTIzbC0xNC45Nzk2NSwxNC45MjUwNGMtMS42MTAyMiwxLjYwNDkxIC0zLjUzNzQ3LDIuODgyMTYgLTUuNzM3NzcsMy44MDE0MiIgZmlsbD0iI2I3YzI2NiIgZmlsbC1ydWxlPSJldmVub2RkIiBzdHJva2U9IiM3ZThkMGIiIHN0cm9rZS13aWR0aD0iMSIgc3Ryb2tlLWxpbmVjYXA9InJvdW5kIiBzdHJva2UtbGluZWpvaW49InJvdW5kIi8+PHBhdGggZD0iTTIyOC42NzQ5LDE4Mi45MjEyNmMwLDAgMS45ODQxNCwxLjY4Mzc5IDMuMjk5MzEsLTEuMTcyNThjMi44NDU3NSwtNi4xODE0NyA2LjIyMDkxLC00LjM3Nzg1IDYuMjIwOTEsLTQuMzc3ODUiIGZpbGw9Im5vbmUiIGZpbGwtcnVsZT0iZXZlbm9kZCIgc3Ryb2tlPSIjN2U4ZDBiIiBzdHJva2Utd2lkdGg9IjEiIHN0cm9rZS1saW5lY2FwPSJyb3VuZCIgc3Ryb2tlLWxpbmVqb2luPSJyb3VuZCIvPjxwYXRoIGQ9Ik0yNDMuNTExOTYsMTc5LjQzMDA2YzAsMC4zNTExNyAtMC4xMDYxOCwwLjY2MjE0IC0wLjMyNzY2LDAuODgyODVsLTcuMDgwMjUsNy4wNTM3MWMwLjIxMzg5LC0wLjIxOTk1IDAuMzEwOTcsLTAuNTA2NjUgMC4zMTA5NywtMC44NDk0OGMwLC0wLjY2MjkgLTAuMzg0NTQsLTEuNDg4ODYgLTEuMDY2NCwtMi4xNzUyN2MtMS4wMzMwMywtMS4wMjk5OSAtMi4zODY4OCwtMS4zNjUyMyAtMy4wMzUzNywtMC43NTA4OGw3LjA4MDI1LC03LjA1NDQ3YzAuNjQwMTQsLTAuNjM3MTEgMi4wMDk5MywtMC4zMTA5NyAzLjA2MDQsMC43MjgxMmMwLjY4MTEsMC42ODU2NSAxLjA1ODgxLDEuNTAzMjcgMS4wNTg4MSwyLjE2NTQxTTIyMy44NjM5NywxOTguMzUyOTZjLTAuNDM0NiwwLjIyOTA2IC0wLjg3NzU0LDAuNDMyMzIgLTEuMzM3OTMsMC42Mjk1MmwtMy4yMjQyMywxLjM0ODU1bDEuMzU0NjIsLTMuMjEyMDljMC4xOTU2OCwtMC40NTgxMSAwLjQwMTk5LC0wLjg5OTU0IDAuNjMxOCwtMS4zMzI2MmMwLjUyMzM0LDAuMTM4OCAxLjA5ODI1LDAuNDc0MDQgMS41OTg4NCwwLjk3MjM1YzAuNTAwNTksMC40OTkwNyAwLjgzNTgzLDEuMDcwOTUgMC45NzYxNCwxLjU5NDI5IiBmaWxsPSIjYWRjMjEzIiBmaWxsLXJ1bGU9ImV2ZW5vZGQiIHN0cm9rZT0iIzdlOGQwYiIgc3Ryb2tlLXdpZHRoPSIxIiBzdHJva2UtbGluZWNhcD0icm91bmQiIHN0cm9rZS1saW5lam9pbj0icm91bmQiLz48cGF0aCBkPSJNMjQzLjU3MTEyLDE3OS4zNzE2NmMwLDAuMzUxOTMgLTAuMTA2MTgsMC42NjI5IC0wLjMyODQxLDAuODgzNjFsLTE0Ljk3MzU4LDE0LjkyNjU2Yy0xLjYxNTUzLDEuNjAwMzYgLTMuNTQ0MywyLjg3Njg1IC01Ljc0MzA4LDMuNzk5OWwtMy4yMjQyMywxLjM0Nzc5bDAuNzM4NzQsLTEuNzU2NmwxLjQ2MDA0LC0wLjYxMjg0YzIuMTk4MDMsLTAuOTIzODEgNC4xMjYwNCwtMi4xOTk1NCA1Ljc0MTU3LC0zLjc5OTlsMTQuOTc0MzQsLTE0LjkyNjU2YzAuMjIxNDcsLTAuMjIxNDcgMC4zMjc2NiwtMC41MzI0NCAwLjMyNzY2LC0wLjg4MzYxYzAsLTAuNDg5OTcgLTAuMjA0NzksLTEuMDYxODUgLTAuNTkxNiwtMS42MDk0NmMwLjE4OTYyLDAuMTMwNDYgMC4zNzkyMywwLjI4NTk0IDAuNTU4OTksMC40NjU3YzAuNjgxMSwwLjY4NjQxIDEuMDU4ODEsMS41MDQwMyAxLjA1ODgxLDIuMTY2MTciIGZpbGw9IiM1NzVlNzUiIGZpbGwtcnVsZT0iZXZlbm9kZCIgc3Ryb2tlPSIjNTc1ZTc1IiBzdHJva2Utd2lkdGg9IjEiIHN0cm9rZS1saW5lY2FwPSJyb3VuZCIgc3Ryb2tlLWxpbmVqb2luPSJyb3VuZCIgb3BhY2l0eT0iMC4xNSIvPjxwYXRoIGQ9Ik0yMjkuODgyMzgsMTgyLjQ2NzdjMCwwLjM3OTIzIC0wLjMwNjQyLDAuNjg2NDEgLTAuNjg1NjUsMC42ODY0MWMtMC4zNzkyMywwIC0wLjY4NjQxLC0wLjMwNzE4IC0wLjY4NjQxLC0wLjY4NTY1YzAsLTAuMzc5MjMgMC4zMDg2OSwtMC42ODQ4OSAwLjY4NzE3LC0wLjY4NDg5YzAuMzc5MjMsMCAwLjY4NTY1LDAuMzA2NDIgMC42ODU2NSwwLjY4NTY1eiIgZmlsbD0iIzdlOGQwYiIgZmlsbC1ydWxlPSJldmVub2RkIiBzdHJva2U9IiM3ZThkMGIiIHN0cm9rZS13aWR0aD0iMSIgc3Ryb2tlLWxpbmVjYXA9InJvdW5kIiBzdHJva2UtbGluZWpvaW49InJvdW5kIi8+PHBhdGggZD0iTTIzNC44NDg4NSwxOTMuMjU1MzFoNy4yMTg3OSIgZmlsbD0ibm9uZSIgZmlsbC1ydWxlPSJub256ZXJvIiBzdHJva2U9IiNiN2MyNjYiIHN0cm9rZS13aWR0aD0iMS41IiBzdHJva2UtbGluZWNhcD0icm91bmQiIHN0cm9rZS1saW5lam9pbj0ibWl0ZXIiLz48cGF0aCBkPSJNMjM4LjQ1ODI0LDE5Ni44NjQ3di03LjIxODc5IiBmaWxsPSJub25lIiBmaWxsLXJ1bGU9Im5vbnplcm8iIHN0cm9rZT0iI2I3YzI2NiIgc3Ryb2tlLXdpZHRoPSIxLjUiIHN0cm9rZS1saW5lY2FwPSJyb3VuZCIgc3Ryb2tlLWxpbmVqb2luPSJtaXRlciIvPjwvZz48L2c+PC9zdmc+PCEtLXJvdGF0aW9uQ2VudGVyOjMxLjk3MTYzMDY4NzExOTI3MzozMS45NzE2MDU2ODcxMTkzMDgtLT4=";
  const penPCheck = () => {
    if (penPLoaded) {return;} // Return if pen+ integration is loaded
    if (vm.runtime.ext_penP) {penPLoaded = true;}
    penPModule = vm.runtime.ext_penP;

    if (penPModule) {penPModule.turnAdvancedSettingOff({Setting:"wValueUnderFlow",onOrOff:"on"});}

    vm.runtime.extensionManager.refreshBlocks();
  }
  penPCheck();
  vm.runtime.on("EXTENSION_ADDED", penPCheck);

  class extension {
    getInfo() {
      return {
        blocks: [
          //#3D Vector Math#
          {
            blockType: Scratch.BlockType.LABEL,
            text: "Vector 3",
          },
          {
            disableMonitor: true,
            opcode: "newV3",
            blockType: Scratch.BlockType.REPORTER,
            text: "vector 3 x:[x] y:[y] z:[z]",
            arguments: {
              x: { type: Scratch.ArgumentType.NUMBER, defaultValue: 0 },
              y: { type: Scratch.ArgumentType.NUMBER, defaultValue: 0 },
              z: { type: Scratch.ArgumentType.NUMBER, defaultValue: 0 },
            },
          },
          {
            disableMonitor: true,
            opcode: "newV3fromValue",
            blockType: Scratch.BlockType.REPORTER,
            text: "vector 3 from [value]",
            arguments: {
              value: { type: Scratch.ArgumentType.NUMBER, defaultValue: 0 },
            },
          },
          {
            disableMonitor: true,
            opcode: "getAxisOfV3",
            blockType: Scratch.BlockType.REPORTER,
            text: "get the [axis] axis of [vector]",
            arguments: {
              axis: { type: Scratch.ArgumentType.STRING, menu: "axisMenu" },
              vector: {
                type: Scratch.ArgumentType.STRING,
                defaultValue: "[0,0,0]",
              },
            },
          },
          {
            blockType: Scratch.BlockType.LABEL,
            text: "Equations",
          },
          {
            disableMonitor: true,
            opcode: "addV3",
            blockType: Scratch.BlockType.REPORTER,
            text: "V3: [a] + [b]",
            arguments: {
              a: { type: Scratch.ArgumentType.STRING, defaultValue: "[0,0,0]" },
              b: { type: Scratch.ArgumentType.STRING, defaultValue: "[0,0,0]" },
            },
          },
          {
            disableMonitor: true,
            opcode: "subV3",
            blockType: Scratch.BlockType.REPORTER,
            text: "V3: [a] - [b]",
            arguments: {
              a: { type: Scratch.ArgumentType.STRING, defaultValue: "[0,0,0]" },
              b: { type: Scratch.ArgumentType.STRING, defaultValue: "[0,0,0]" },
            },
          },
          {
            disableMonitor: true,
            opcode: "mulV3",
            blockType: Scratch.BlockType.REPORTER,
            text: "V3: [a] * [b]",
            arguments: {
              a: { type: Scratch.ArgumentType.STRING, defaultValue: "[0,0,0]" },
              b: { type: Scratch.ArgumentType.STRING, defaultValue: "[0,0,0]" },
            },
          },
          {
            disableMonitor: true,
            opcode: "divV3",
            blockType: Scratch.BlockType.REPORTER,
            text: "V3: [a] / [b]",
            arguments: {
              a: { type: Scratch.ArgumentType.STRING, defaultValue: "[0,0,0]" },
              b: { type: Scratch.ArgumentType.STRING, defaultValue: "[0,0,0]" },
            },
          },
          {
            disableMonitor: true,
            opcode: "dotProductOfV3",
            blockType: Scratch.BlockType.REPORTER,
            text: "V3: dot product between [a] and [b]",
            arguments: {
              a: { type: Scratch.ArgumentType.STRING, defaultValue: "[0,0,0]" },
              b: { type: Scratch.ArgumentType.STRING, defaultValue: "[0,0,0]" },
            },
          },
          {
            disableMonitor: true,
            opcode: "crossProductOfV3",
            blockType: Scratch.BlockType.REPORTER,
            text: "V3: cross product between [a] and [b]",
            arguments: {
              a: { type: Scratch.ArgumentType.STRING, defaultValue: "[0,0,0]" },
              b: { type: Scratch.ArgumentType.STRING, defaultValue: "[0,0,0]" },
            },
          },
          {
            disableMonitor: true,
            opcode: "magnitudeV3",
            blockType: Scratch.BlockType.REPORTER,
            text: "V3: magnitude of [a]",
            arguments: {
              a: { type: Scratch.ArgumentType.STRING, defaultValue: "[0,0,0]" },
            },
          },
          {
            disableMonitor: true,
            opcode: "distanceV3",
            blockType: Scratch.BlockType.REPORTER,
            text: "V3: distance between [a] and [b]",
            arguments: {
              a: { type: Scratch.ArgumentType.STRING, defaultValue: "[0,0,0]" },
              b: { type: Scratch.ArgumentType.STRING, defaultValue: "[0,0,0]" },
            },
          },
          {
            disableMonitor: true,
            opcode: "rotateAroundPointV3",
            blockType: Scratch.BlockType.REPORTER,
            text: "V3: rotate [a] around [b] by yaw:[yaw] pitch:[pitch], and roll:[roll]",
            arguments: {
              a: { type: Scratch.ArgumentType.STRING, defaultValue: "[0,0,0]" },
              b: { type: Scratch.ArgumentType.STRING, defaultValue: "[0,0,0]" },
              yaw: { type: Scratch.ArgumentType.STRING, defaultValue: "0" },
              pitch: { type: Scratch.ArgumentType.STRING, defaultValue: "0" },
              roll: { type: Scratch.ArgumentType.STRING, defaultValue: "0" },
            },
          },
          {
            disableMonitor: true,
            opcode: "rotateAroundCenterV3",
            blockType: Scratch.BlockType.REPORTER,
            text: "V3: rotate [a] around the center by yaw:[yaw] pitch:[pitch], and roll:[roll]",
            arguments: {
              a: { type: Scratch.ArgumentType.STRING, defaultValue: "[0,0,0]" },
              yaw: { type: Scratch.ArgumentType.STRING, defaultValue: "0" },
              pitch: { type: Scratch.ArgumentType.STRING, defaultValue: "0" },
              roll: { type: Scratch.ArgumentType.STRING, defaultValue: "0" },
            },
          },

          //#2D Vector Math#
          {
            blockType: Scratch.BlockType.LABEL,
            text: "Vector 2",
          },
          {
            disableMonitor: true,
            opcode: "newV2",
            blockType: Scratch.BlockType.REPORTER,
            text: "vector 2 x:[x] y:[y]",
            arguments: {
              x: { type: Scratch.ArgumentType.NUMBER, defaultValue: 0 },
              y: { type: Scratch.ArgumentType.NUMBER, defaultValue: 0 },
            },
          },
          {
            disableMonitor: true,
            opcode: "newV2fromValue",
            blockType: Scratch.BlockType.REPORTER,
            text: "vector 2 from [value]",
            arguments: {
              value: { type: Scratch.ArgumentType.NUMBER, defaultValue: 0 },
            },
          },
          {
            disableMonitor: true,
            opcode: "getAxisOfV2",
            blockType: Scratch.BlockType.REPORTER,
            text: "V2: get the [axis] axis of [vector]",
            arguments: {
              axis: { type: Scratch.ArgumentType.STRING, menu: "axisMenu2D" },
              vector: {
                type: Scratch.ArgumentType.STRING,
                defaultValue: "[0,0]",
              },
            },
          },
          {
            disableMonitor: true,
            opcode: "project2DFromCam",
            blockType: Scratch.BlockType.REPORTER,
            text: "get projected [a] to 2D from camera",
            arguments: {
              a: {
                type: Scratch.ArgumentType.STRING,
                defaultValue: "[0,0,100]",
              },
            },
          },
          {
            disableMonitor: true,
            opcode: "project2DFromPos",
            blockType: Scratch.BlockType.REPORTER,
            text: "get projected [a] to 2D from [b] yaw:[yaw] pitch:[pitch] roll:[roll]",
            arguments: {
              a: {
                type: Scratch.ArgumentType.STRING,
                defaultValue: "[0,0,100]",
              },
              b: { type: Scratch.ArgumentType.STRING, defaultValue: "[0,0,0]" },
              yaw: { type: Scratch.ArgumentType.STRING, defaultValue: "0" },
              pitch: { type: Scratch.ArgumentType.STRING, defaultValue: "0" },
              roll: { type: Scratch.ArgumentType.STRING, defaultValue: "0" },
            },
          },
          {
            blockType: Scratch.BlockType.LABEL,
            text: "Equations",
          },
          {
            disableMonitor: true,
            opcode: "addV2",
            blockType: Scratch.BlockType.REPORTER,
            text: "V2: [a] + [b]",
            arguments: {
              a: { type: Scratch.ArgumentType.STRING, defaultValue: "[0,0]" },
              b: { type: Scratch.ArgumentType.STRING, defaultValue: "[0,0]" },
            },
          },
          {
            disableMonitor: true,
            opcode: "subV2",
            blockType: Scratch.BlockType.REPORTER,
            text: "V2: [a] - [b]",
            arguments: {
              a: { type: Scratch.ArgumentType.STRING, defaultValue: "[0,0]" },
              b: { type: Scratch.ArgumentType.STRING, defaultValue: "[0,0]" },
            },
          },
          {
            disableMonitor: true,
            opcode: "mulV2",
            blockType: Scratch.BlockType.REPORTER,
            text: "V2: [a] * [b]",
            arguments: {
              a: { type: Scratch.ArgumentType.STRING, defaultValue: "[0,0]" },
              b: { type: Scratch.ArgumentType.STRING, defaultValue: "[0,0]" },
            },
          },
          {
            disableMonitor: true,
            opcode: "divV2",
            blockType: Scratch.BlockType.REPORTER,
            text: "V2: [a] / [b]",
            arguments: {
              a: { type: Scratch.ArgumentType.STRING, defaultValue: "[0,0]" },
              b: { type: Scratch.ArgumentType.STRING, defaultValue: "[0,0]" },
            },
          },
          {
            disableMonitor: true,
            opcode: "dotProductOfV2",
            blockType: Scratch.BlockType.REPORTER,
            text: "V2: dot product between [a] and [b]",
            arguments: {
              a: { type: Scratch.ArgumentType.STRING, defaultValue: "[0,0]" },
              b: { type: Scratch.ArgumentType.STRING, defaultValue: "[0,0]" },
            },
          },
          {
            disableMonitor: true,
            opcode: "crossProductOfV2",
            blockType: Scratch.BlockType.REPORTER,
            text: "V2: cross product between [a] and [b]",
            arguments: {
              a: { type: Scratch.ArgumentType.STRING, defaultValue: "[0,0]" },
              b: { type: Scratch.ArgumentType.STRING, defaultValue: "[0,0]" },
            },
          },
          {
            disableMonitor: true,
            opcode: "magnitudeV2",
            blockType: Scratch.BlockType.REPORTER,
            text: "V2: magnitude of [a]",
            arguments: {
              a: { type: Scratch.ArgumentType.STRING, defaultValue: "[0,0]" },
            },
          },
          {
            disableMonitor: true,
            opcode: "distanceV2",
            blockType: Scratch.BlockType.REPORTER,
            text: "V2: distance between [a] and [b]",
            arguments: {
              a: { type: Scratch.ArgumentType.STRING, defaultValue: "[0,0]" },
              b: { type: Scratch.ArgumentType.STRING, defaultValue: "[0,0]" },
            },
          },
          {
            disableMonitor: true,
            opcode: "rotateAroundPointV2",
            blockType: Scratch.BlockType.REPORTER,
            text: "V2: rotate [a] around [b] by [yaw] degrees",
            arguments: {
              a: { type: Scratch.ArgumentType.STRING, defaultValue: "[0,0]" },
              b: { type: Scratch.ArgumentType.STRING, defaultValue: "[0,0]" },
              yaw: { type: Scratch.ArgumentType.STRING, defaultValue: "0" },
            },
          },
          {
            disableMonitor: true,
            opcode: "rotateAroundCenterV2",
            blockType: Scratch.BlockType.REPORTER,
            text: "V2: rotate [a] around the center by [yaw] degrees",
            arguments: {
              a: { type: Scratch.ArgumentType.STRING, defaultValue: "[0,0]" },
              yaw: { type: Scratch.ArgumentType.STRING, defaultValue: "0" },
            },
          },

          //#CAMERA CONTROLS#
          {
            blockType: Scratch.BlockType.LABEL,
            text: "camera",
          },
          {
            disableMonitor: true,
            opcode: "cam3DsetPosition",
            blockType: Scratch.BlockType.COMMAND,
            text: "set camera position to [a]",
            arguments: {
              a: { type: Scratch.ArgumentType.STRING, defaultValue: "[0,0,0]" },
            },
          },
          {
            disableMonitor: true,
            opcode: "cam3DchangePosition",
            blockType: Scratch.BlockType.COMMAND,
            text: "change camera position by [a]",
            arguments: {
              a: { type: Scratch.ArgumentType.STRING, defaultValue: "[5,0,0]" },
            },
          },
          {
            disableMonitor: true,
            opcode: "cam3DchangePositionOnAxis",
            blockType: Scratch.BlockType.COMMAND,
            text: "change camera [axis] by [a]",
            arguments: {
              a: { type: Scratch.ArgumentType.NUMBER, defaultValue: "15" },
              axis: { type: Scratch.ArgumentType.STRING, defaultValue: "0", menu: "axisMenu2"},
            },
          },
          {
            disableMonitor: false,
            opcode: "cam3DgetPosition",
            blockType: Scratch.BlockType.REPORTER,
            text: "get camera position",
            arguments: {},
          },

          {
            disableMonitor: true,
            opcode: "cam3DsetRotation",
            blockType: Scratch.BlockType.COMMAND,
            text: "set camera rotation to [a]",
            arguments: {
              a: { type: Scratch.ArgumentType.STRING, defaultValue: "[0,0,0]" },
            },
          },
          {
            disableMonitor: true,
            opcode: "cam3DchangeRotation",
            blockType: Scratch.BlockType.COMMAND,
            text: "change camera rotation by [a]",
            arguments: {
              a: { type: Scratch.ArgumentType.STRING, defaultValue: "[15,0,0]" },
            },
          },
          {
            disableMonitor: true,
            opcode: "cam3DchangeRotationOnAxis",
            blockType: Scratch.BlockType.COMMAND,
            text: "change camera [rotator] by [a]",
            arguments: {
              a: { type: Scratch.ArgumentType.NUMBER, defaultValue: "15" },
              rotator: { type: Scratch.ArgumentType.STRING, defaultValue: "0", menu: "angleMenu"},
            },
          },
          {
            disableMonitor: false,
            opcode: "cam3DgetRotation",
            blockType: Scratch.BlockType.REPORTER,
            text: "get camera rotation",
            arguments: {},
          },
          {
            disableMonitor: true,
            opcode: "setFov",
            blockType: Scratch.BlockType.COMMAND,
            text: "set fov to [dist]",
            arguments: {
              dist: { type: Scratch.ArgumentType.NUMBER, defaultValue: 300 },
            },
          },
          {
            disableMonitor: true,
            opcode: "changeFov",
            blockType: Scratch.BlockType.COMMAND,
            text: "change fov by [dist]",
            arguments: {
              dist: { type: Scratch.ArgumentType.NUMBER, defaultValue: 10 },
            },
          },
          {
            disableMonitor: false,
            opcode: "getFov",
            blockType: Scratch.BlockType.REPORTER,
            text: "fov",
          },

          //#SPRITE 3D#
          {
            blockType: Scratch.BlockType.LABEL,
            text: "sprite 3D",
          },
          {
            disableMonitor: true,
            opcode: "spr3DsetPosition",
            blockType: Scratch.BlockType.COMMAND,
            text: "set my position to [a]",
            arguments: {
              a: { type: Scratch.ArgumentType.STRING, defaultValue: "[0,0,0]" },
            },
            filter: "sprite",
          },
          {
            disableMonitor: true,
            opcode: "spr3DsetPositionComponent",
            blockType: Scratch.BlockType.COMMAND,
            text: "set my [component] to [a]",
            arguments: {
              component: { type: Scratch.ArgumentType.STRING, defaultValue: "0", menu: "axisMenu2"},
              a: { type: Scratch.ArgumentType.NUMBER, defaultValue: 0 },
            },
            filter: "sprite",
          },
          {
            disableMonitor: true,
            opcode: "spr3DchangePosition",
            blockType: Scratch.BlockType.COMMAND,
            text: "change my position by [a]",
            arguments: {
              a: { type: Scratch.ArgumentType.STRING, defaultValue: "[0,0,0]" },
            },
            filter: "sprite",
          },
          {
            disableMonitor: true,
            opcode: "spr3DchangePositionComponent",
            blockType: Scratch.BlockType.COMMAND,
            text: "change my [component] by [a]",
            arguments: {
              component: { type: Scratch.ArgumentType.STRING, defaultValue: "0", menu: "axisMenu2"},
              a: { type: Scratch.ArgumentType.NUMBER, defaultValue: 5 },
            },
            filter: "sprite",
          },
          {
            disableMonitor: true,
            opcode: "spr3DgetPosition",
            blockType: Scratch.BlockType.REPORTER,
            text: "my 3d position",
            arguments: {},
            filter: "sprite",
          },
          {
            disableMonitor: true,
            opcode: "spr3DgetPositionComponent",
            blockType: Scratch.BlockType.REPORTER,
            text: "my [component] position",
            arguments: {
              component: { type: Scratch.ArgumentType.STRING, defaultValue: "0", menu: "axisMenu2"},
            },
            filter: "sprite",
          },
          {
            disableMonitor: true,
            opcode: "spr3DsetSize",
            blockType: Scratch.BlockType.COMMAND,
            text: "set my 3d size to [a]",
            arguments: {
              a: { type: Scratch.ArgumentType.NUMBER, defaultValue: 100 },
            },
            filter: "sprite",
          },
          {
            disableMonitor: true,
            opcode: "spr3DchangeSize",
            blockType: Scratch.BlockType.COMMAND,
            text: "change my 3d size by [a]",
            arguments: {
              a: { type: Scratch.ArgumentType.NUMBER, defaultValue: 10 },
            },
            filter: "sprite",
          },
          {
            disableMonitor: true,
            opcode: "spr3DgetSize",
            blockType: Scratch.BlockType.REPORTER,
            text: "my 3d size",
            arguments: {},
            filter: "sprite",
          },
          {
            disableMonitor: true,
            opcode: "spr3D",
            blockType: Scratch.BlockType.COMMAND,
            text: "go to my position in 3D",
            arguments: {},
            filter: "sprite",
          },

          //#Pen+ Integration #
          {
            hideFromPalette:(!penPLoaded),
            blockType: Scratch.BlockType.LABEL,
            text: "Pen+ 3D",
          },
          {
            disableMonitor: true,
            hideFromPalette:(!penPLoaded),
            opcode: "draw3dTri",
            blockType: Scratch.BlockType.COMMAND,
            text: "draw 3d triangle between [point1], [point2], [point3]",
            arguments: {
                point1: { type: Scratch.ArgumentType.STRING, defaultValue: "[0,0,100]"},
                point2: { type: Scratch.ArgumentType.STRING, defaultValue: "[10,0,100]"},
                point3: { type: Scratch.ArgumentType.STRING, defaultValue: "[10,10,100]"},
            },
            blockIconURI: penPIcon,
            filter: "sprite",
          },
          {
            disableMonitor: true,
            hideFromPalette:(!penPLoaded),
            opcode: "draw3dTexTri",
            blockType: Scratch.BlockType.COMMAND,
            text: "draw 3d triangle between [point1], [point2], [point3] with the image [texture]",
            arguments: {
                point1: { type: Scratch.ArgumentType.STRING, defaultValue: "[0,0,100]"},
                point2: { type: Scratch.ArgumentType.STRING, defaultValue: "[10,0,100]"},
                point3: { type: Scratch.ArgumentType.STRING, defaultValue: "[10,10,100]"},
                texture: { menu: "tdMathPPCosMen"}
            },
            blockIconURI: penPIcon,
            filter: "sprite",
          },
        ],
        menus: {
          axisMenu: {
            items: [
              { text: "x / yaw", value: "0" },
              { text: "y / pitch", value: "1" },
              { text: "z / roll", value: "2" },
            ],
            acceptReporters: false,
          },
          axisMenu2D: {
            items: [
              { text: "x", value: "0" },
              { text: "y", value: "1" },
            ],
            acceptReporters: false,
          },
          angleMenu: {
            items: [
              { text: "yaw", value: "0" },
              { text: "pitch", value: "1" },
              { text: "roll", value: "2" },
            ],
            acceptReporters: true,
          },
          axisMenu2: {
            items: [
              { text: "x", value: "0" },
              { text: "y", value: "1" },
              { text: "z", value: "2" },
            ],
            acceptReporters: true,
          },
          tdMathPPCosMen: {
            items: "tdMathPPCosMen", acceptReporters: true
          },
        },
        name: "3D Math",
        id: "obviousAlexCMath3d",
        menuIconURI:
          "data:image/svg+xml;base64,PHN2ZyB2ZXJzaW9uPSIxLjEiIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIgeG1sbnM6eGxpbms9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsiIHdpZHRoPSI4OC44NTEwNCIgaGVpZ2h0PSI4OC44NTEwNCIgdmlld0JveD0iMCwwLDg4Ljg1MTA0LDg4Ljg1MTA0Ij48ZyB0cmFuc2Zvcm09InRyYW5zbGF0ZSgtMTk1LjU3NDQ5LC0xMzUuNTc0NDkpIj48ZyBkYXRhLXBhcGVyLWRhdGE9InsmcXVvdDtpc1BhaW50aW5nTGF5ZXImcXVvdDs6dHJ1ZX0iIGZpbGwtcnVsZT0ibm9uemVybyIgc3Ryb2tlLWxpbmVjYXA9ImJ1dHQiIHN0cm9rZS1saW5lam9pbj0ibWl0ZXIiIHN0cm9rZS1taXRlcmxpbWl0PSIxMCIgc3Ryb2tlLWRhc2hhcnJheT0iIiBzdHJva2UtZGFzaG9mZnNldD0iMCIgc3R5bGU9Im1peC1ibGVuZC1tb2RlOiBub3JtYWwiPjxwYXRoIGQ9Ik0xOTUuNTc0NSwxODAuMDAwMDFjMCwtMjQuNTM1NTQgMTkuODg5OTgsLTQ0LjQyNTUyIDQ0LjQyNTUyLC00NC40MjU1MmMyNC41MzU1NCwwIDQ0LjQyNTUyLDE5Ljg4OTk4IDQ0LjQyNTUyLDQ0LjQyNTUyYzAsMjQuNTM1NTQgLTE5Ljg4OTk4LDQ0LjQyNTUyIC00NC40MjU1Miw0NC40MjU1MmMtMjQuNTM1NTQsMCAtNDQuNDI1NTIsLTE5Ljg4OTk4IC00NC40MjU1MiwtNDQuNDI1NTJ6IiBmaWxsPSIjYzJkOTE2IiBzdHJva2U9IiMwMDAwMDAiIHN0cm9rZS13aWR0aD0iMCIvPjxwYXRoIGQ9Ik0yMTIuNTU4NDIsMjA3LjE4MjYydi0zNy44ODQ1N2gzNy43NTc0NHYzNy44ODQ1N3oiIGZpbGw9IiNhZGMyMTMiIHN0cm9rZT0iI2ZmZmZmZiIgc3Ryb2tlLXdpZHRoPSIwIi8+PHBhdGggZD0iTTIxMy45NTY4NSwxNjkuNjc5NDRsMTYuMzk5NjksLTE3LjU0Mzg2bDM1Ljg1MDUsMC41MDg1MmwtMTUuNTA5NzksMTYuNjUzOTV6IiBmaWxsPSIjYWRjMjEzIiBzdHJva2U9Im5vbmUiIHN0cm9rZS13aWR0aD0iMCIvPjxwYXRoIGQ9Ik0yNTAuOTUxNTEsMjA2LjU0Njk4di01My4wMTI5N2gxNi45MDgyMWwtMC42MzU2NSwzNi40ODYxNHoiIGZpbGw9IiNhZGMyMTMiIHN0cm9rZT0iI2ZmZmZmZiIgc3Ryb2tlLXdpZHRoPSIwIi8+PHBhdGggZD0iTTI2OC44MzAwNiwxNTIuMzcxMjR2MzguNDQwMDJjMCwwLjA2OTcxIC0wLjAyODgzLDAuMTMyMjEgLTAuMDQwODgsMC4xOTk0NWMtMC4wMTQ0MiwwLjA4ODg2IC0wLjAxOTE0LDAuMTc1MzUgLTAuMDUyODIsMC4yNTk0N2MtMC4wNjAwMiwwLjE0NjUyIC0wLjE0ODk5LDAuMjgxMDkgLTAuMjU5NDcsMC4zOTE1N2wtMTYuODE3NDksMTYuODE3NDljLTAuMDA5NjksMC4wMDk1NyAtMC4wMjQxLDAuMDEyMDUgLTAuMDMzNjcsMC4wMjE2MmMtMC4xMDU2NCwwLjA5NjE4IC0wLjIyMDk1LDAuMTgwMTkgLTAuMzU1NTMsMC4yMzU0OGMtMC4xNDY2MywwLjA2MjUgLTAuMzAyNzIsMC4wOTM3IC0wLjQ1ODkyLDAuMDkzN2gtMzguNDQwMDJjLTAuNjYzMDksMCAtMS4yMDEyOSwtMC41MzgyIC0xLjIwMTI5LC0xLjIwMTE4di0zOC40MzUyOWMwLC0wLjE1ODU3IDAuMDMxMiwtMC4zMTQ3NyAwLjA5MTMzLC0wLjQ2NjEyYzAuMDU1MywtMC4xMzIxIDAuMTM5NDIsLTAuMjQ5OSAwLjIzNTQ4LC0wLjM1MzE3YzAuMDExOTQsLTAuMDA5NjkgMC4wMTQ0MiwtMC4wMjQxIDAuMDIzOTksLTAuMDMzNjdsMTYuODE3MzgsLTE2LjgxNzQ5YzAuMTEyOTYsLTAuMTEyODQgMC4yNDUwNiwtMC4xOTkzMyAwLjM5NDA1LC0wLjI2MTg0YzAuMDgxNzYsLTAuMDMzNjcgMC4xNzA2MiwtMC4wMzYwNCAwLjI1NzExLC0wLjA1MDQ1YzAuMDY3MzUsLTAuMDEyMDUgMC4xMjk3NCwtMC4wNDA4OCAwLjE5OTQ1LC0wLjA0MDg4aDM4LjQ0MDAyYzAuMDkxMzMsMCAwLjE3Mjk4LDAuMDMzNjcgMC4yNTQ3NCwwLjA1MDQ1YzAuMDY3MjMsMC4wMTY4OSAwLjEzNDQ3LDAuMDE0NDIgMC4xOTY5NywwLjA0MDg4YzAuMjk3ODcsMC4xMjI1MyAwLjUzMzM2LDAuMzU4MDEgMC42NTU4OCwwLjY1NTg4YzAuMDI2NDcsMC4wNjIzOSAwLjAyNjQ3LDAuMTMyMSAwLjA0MDg4LDAuMTk2OTdjMC4wMTkxNCwwLjA4NDEyIDAuMDUyODIsMC4xNjU3NyAwLjA1MjgyLDAuMjU3MTF6TTI0OS42MDk5OSwxNzAuMzkwMDJoLTM2LjAzNzU2djM2LjAzNzU2aDM2LjAzNzU2ek0yNjQuNzI4OTgsMTUzLjU3MjQyaC0zNS4wNDI5MmwtMTQuNDE1MDIsMTQuNDE1MDJoMzUuMDQyOTJ6TTI2Ni40Mjc1OSwxNTUuMjcxMDNsLTE0LjQxNTAyLDE0LjQxNTAydjM1LjA0MjkybDE0LjQxNTAyLC0xNC40MTUwMnoiIGZpbGw9IiM3ZThkMGIiIHN0cm9rZT0iIzdlOGQwYiIgc3Ryb2tlLXdpZHRoPSI2Ii8+PC9nPjwvZz48L3N2Zz48IS0tcm90YXRpb25DZW50ZXI6NDQuNDI1NTA0OTk5OTk5OTk6NDQuNDI1NTE0OTk5OTk5OTktLT4=",
        blockIconURI:
          "data:image/svg+xml;base64,PHN2ZyB2ZXJzaW9uPSIxLjEiIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIgeG1sbnM6eGxpbms9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsiIHdpZHRoPSI2My45NDMyMiIgaGVpZ2h0PSI2My45NDMyMiIgdmlld0JveD0iMCwwLDYzLjk0MzIyLDYzLjk0MzIyIj48ZyB0cmFuc2Zvcm09InRyYW5zbGF0ZSgtMjA4LjAyODQsLTE0OC4wMjgzOCkiPjxnIGRhdGEtcGFwZXItZGF0YT0ieyZxdW90O2lzUGFpbnRpbmdMYXllciZxdW90Ozp0cnVlfSIgZmlsbC1ydWxlPSJub256ZXJvIiBzdHJva2UtbGluZWNhcD0iYnV0dCIgc3Ryb2tlLWxpbmVqb2luPSJtaXRlciIgc3Ryb2tlLW1pdGVybGltaXQ9IjEwIiBzdHJva2UtZGFzaGFycmF5PSIiIHN0cm9rZS1kYXNob2Zmc2V0PSIwIiBzdHlsZT0ibWl4LWJsZW5kLW1vZGU6IG5vcm1hbCI+PHBhdGggZD0iTTIxMi41NTg0MywyMDcuMTgyNjJ2LTM3Ljg4NDU3aDM3Ljc1NzQ0djM3Ljg4NDU3eiIgZmlsbD0iI2FkYzIxMyIgc3Ryb2tlPSIjZmZmZmZmIiBzdHJva2Utd2lkdGg9IjAiLz48cGF0aCBkPSJNMjEzLjk1Njg2LDE2OS42Nzk0NGwxNi4zOTk2OSwtMTcuNTQzODZsMzUuODUwNSwwLjUwODUybC0xNS41MDk3OSwxNi42NTM5NXoiIGZpbGw9IiNhZGMyMTMiIHN0cm9rZT0ibm9uZSIgc3Ryb2tlLXdpZHRoPSIwIi8+PHBhdGggZD0iTTI1MC45NTE1MiwyMDYuNTQ2OTh2LTUzLjAxMjk3aDE2LjkwODIxbC0wLjYzNTY1LDM2LjQ4NjE0eiIgZmlsbD0iI2FkYzIxMyIgc3Ryb2tlPSIjZmZmZmZmIiBzdHJva2Utd2lkdGg9IjAiLz48cGF0aCBkPSJNMjY4LjgzMDA3LDE1Mi4zNzEyNHYzOC40NDAwMmMwLDAuMDY5NzEgLTAuMDI4ODMsMC4xMzIyMSAtMC4wNDA4OCwwLjE5OTQ1Yy0wLjAxNDQyLDAuMDg4ODYgLTAuMDE5MTQsMC4xNzUzNSAtMC4wNTI4MiwwLjI1OTQ3Yy0wLjA2MDAyLDAuMTQ2NTIgLTAuMTQ4OTksMC4yODEwOSAtMC4yNTk0NywwLjM5MTU3bC0xNi44MTc0OSwxNi44MTc0OWMtMC4wMDk2OSwwLjAwOTU3IC0wLjAyNDEsMC4wMTIwNSAtMC4wMzM2NywwLjAyMTYyYy0wLjEwNTY0LDAuMDk2MTggLTAuMjIwOTUsMC4xODAxOSAtMC4zNTU1MywwLjIzNTQ4Yy0wLjE0NjYzLDAuMDYyNSAtMC4zMDI3MiwwLjA5MzcgLTAuNDU4OTIsMC4wOTM3aC0zOC40NDAwMmMtMC42NjMwOSwwIC0xLjIwMTI5LC0wLjUzODIgLTEuMjAxMjksLTEuMjAxMTh2LTM4LjQzNTI5YzAsLTAuMTU4NTcgMC4wMzEyLC0wLjMxNDc3IDAuMDkxMzMsLTAuNDY2MTJjMC4wNTUzLC0wLjEzMjEgMC4xMzk0MiwtMC4yNDk5IDAuMjM1NDgsLTAuMzUzMTdjMC4wMTE5NCwtMC4wMDk2OSAwLjAxNDQyLC0wLjAyNDEgMC4wMjM5OSwtMC4wMzM2N2wxNi44MTczOCwtMTYuODE3NDljMC4xMTI5NiwtMC4xMTI4NCAwLjI0NTA2LC0wLjE5OTMzIDAuMzk0MDUsLTAuMjYxODRjMC4wODE3NiwtMC4wMzM2NyAwLjE3MDYyLC0wLjAzNjA0IDAuMjU3MTEsLTAuMDUwNDVjMC4wNjczNSwtMC4wMTIwNSAwLjEyOTc0LC0wLjA0MDg4IDAuMTk5NDUsLTAuMDQwODhoMzguNDQwMDJjMC4wOTEzMywwIDAuMTcyOTgsMC4wMzM2NyAwLjI1NDc0LDAuMDUwNDVjMC4wNjcyMywwLjAxNjg5IDAuMTM0NDcsMC4wMTQ0MiAwLjE5Njk3LDAuMDQwODhjMC4yOTc4NywwLjEyMjUzIDAuNTMzMzYsMC4zNTgwMSAwLjY1NTg4LDAuNjU1ODhjMC4wMjY0NywwLjA2MjM5IDAuMDI2NDcsMC4xMzIxIDAuMDQwODgsMC4xOTY5N2MwLjAxOTE0LDAuMDg0MTIgMC4wNTI4MiwwLjE2NTc3IDAuMDUyODIsMC4yNTcxMXpNMjQ5LjYxLDE3MC4zOTAwMmgtMzYuMDM3NTZ2MzYuMDM3NTZoMzYuMDM3NTZ6TTI2NC43Mjg5OCwxNTMuNTcyNDJoLTM1LjA0MjkybC0xNC40MTUwMiwxNC40MTUwMmgzNS4wNDI5MnpNMjY2LjQyNzYsMTU1LjI3MTAzbC0xNC40MTUwMiwxNC40MTUwMnYzNS4wNDI5MmwxNC40MTUwMiwtMTQuNDE1MDJ6IiBmaWxsPSIjN2U4ZDBiIiBzdHJva2U9IiM3ZThkMGIiIHN0cm9rZS13aWR0aD0iNiIvPjwvZz48L2c+PC9zdmc+PCEtLXJvdGF0aW9uQ2VudGVyOjMxLjk3MTU5NTY4NzExOTI3NjozMS45NzE2MTU2ODcxMTkyODItLT4=",
        color1: "#ADC213",
        color2: "#A0B312",
        color3: "#697700",
      };
    }
    
    draw3dTri({ point1, point2, point3 },util) {
      if (!penPModule) throw "Pen+ module not found";
      point1 = JSON.parse(point1);point2 = JSON.parse(point2);point3 = JSON.parse(point3);
      //Check if points are valid
      if (!(point1.length >= 3 && point2.length >=3 && point3.length >= 3)) throw "All points are not Vector3s!";
      //cast points to number

      const target = util.target;
      
      this.checkFor3dPositionData(target.id);
      const sprX = spriteData[target.id].position[0] - camera.position[0];
      const sprY = spriteData[target.id].position[1] - camera.position[1];
      const sprZ = spriteData[target.id].position[2] - camera.position[2];

      point1[0] = Scratch.Cast.toNumber(point1[0]) + sprX;point1[1] = Scratch.Cast.toNumber(point1[1]) + sprY;point1[2] = Scratch.Cast.toNumber(point1[2]) + sprZ;
      point2[0] = Scratch.Cast.toNumber(point2[0]) + sprX;point2[1] = Scratch.Cast.toNumber(point2[1]) + sprY;point2[2] = Scratch.Cast.toNumber(point2[2]) + sprZ;
      point3[0] = Scratch.Cast.toNumber(point3[0]) + sprX;point3[1] = Scratch.Cast.toNumber(point3[1]) + sprY;point3[2] = Scratch.Cast.toNumber(point3[2]) + sprZ;

      //Rotate points around camera
      let temp = point1[0];
      point1[0] = point1[2] * camera.sinAndCos[0] + point1[0] * camera.sinAndCos[1];point1[2] = point1[2] * camera.sinAndCos[1] - temp * camera.sinAndCos[0];
      temp = point1[1];
      point1[1] = point1[2] * camera.sinAndCos[2] + point1[1] * camera.sinAndCos[3];point1[2] = point1[2] * camera.sinAndCos[3] - temp * camera.sinAndCos[2];
      temp = point1[0];
      point1[0] = point1[1] * camera.sinAndCos[4] + point1[0] * camera.sinAndCos[5];point1[1] = point1[1] * camera.sinAndCos[5] - temp * camera.sinAndCos[4];

      temp = point2[0];
      point2[0] = point2[2] * camera.sinAndCos[0] + point2[0] * camera.sinAndCos[1];point2[2] = point2[2] * camera.sinAndCos[1] - temp * camera.sinAndCos[0];
      temp = point2[1];
      point2[1] = point2[2] * camera.sinAndCos[2] + point2[1] * camera.sinAndCos[3];point2[2] = point2[2] * camera.sinAndCos[3] - temp * camera.sinAndCos[2];
      temp = point2[0];
      point2[0] = point2[1] * camera.sinAndCos[4] + point2[0] * camera.sinAndCos[5];point2[1] = point2[1] * camera.sinAndCos[5] - temp * camera.sinAndCos[4];

      temp = point3[0];
      point3[0] = point3[2] * camera.sinAndCos[0] + point3[0] * camera.sinAndCos[1];point3[2] = point3[2] * camera.sinAndCos[1] - temp * camera.sinAndCos[0];
      temp = point3[1];
      point3[1] = point3[2] * camera.sinAndCos[2] + point3[1] * camera.sinAndCos[3];point3[2] = point3[2] * camera.sinAndCos[3] - temp * camera.sinAndCos[2];
      temp = point3[0];
      point3[0] = point3[1] * camera.sinAndCos[4] + point3[0] * camera.sinAndCos[5];point3[1] = point3[1] * camera.sinAndCos[5] - temp * camera.sinAndCos[4];
      
      if (point1[2] < 1 && point2[2] < 1 && point3[2] < 1) {return;}

      //Get projection points
      let project1 = fov / point1[2];
      let project2 = fov / point2[2];
      let project3 = fov / point3[2];

      point1[0] = point1[0] * project1;point1[1] = point1[1] * project1;
      point2[0] = point2[0] * project2;point2[1] = point2[1] * project2;
      point3[0] = point3[0] * project3;point3[1] = point3[1] * project3;

      //Corner Pinch
      penPModule.setTrianglePointAttribute({ point:1, attribute:6, value:point1[2] }, util);
      penPModule.setTrianglePointAttribute({ point:2, attribute:6, value:point2[2] }, util);
      penPModule.setTrianglePointAttribute({ point:3, attribute:6, value:point3[2] }, util);
      //Depth Buffer Value
      penPModule.setTrianglePointAttribute({ point:1, attribute:5, value:point1[2] }, util);
      penPModule.setTrianglePointAttribute({ point:2, attribute:5, value:point2[2] }, util);
      penPModule.setTrianglePointAttribute({ point:3, attribute:5, value:point3[2] }, util);

      penPModule.drawSolidTri({ x1:point1[0], y1:point1[1], x2:point2[0], y2:point2[1], x3:point3[0], y3:point3[1] },util);
    }
    draw3dTexTri({ point1, point2, point3, texture },util) {
      if (!penPModule) throw "Pen+ module not found";
      point1 = JSON.parse(point1);point2 = JSON.parse(point2);point3 = JSON.parse(point3);
      //Check if we have all needed points
      if (!(point1.length >= 3 && point2.length >=3 && point3.length >= 3)) throw "All points are not Vector3s!";
      //cast points to number
      
      const target = util.target;
      
      this.checkFor3dPositionData(target.id);
      const sprX = spriteData[target.id].position[0] - camera.position[0];
      const sprY = spriteData[target.id].position[1] - camera.position[1];
      const sprZ = spriteData[target.id].position[2] - camera.position[2];

      point1[0] = Scratch.Cast.toNumber(point1[0]) + sprX;point1[1] = Scratch.Cast.toNumber(point1[1]) + sprY;point1[2] = Scratch.Cast.toNumber(point1[2]) + sprZ;
      point2[0] = Scratch.Cast.toNumber(point2[0]) + sprX;point2[1] = Scratch.Cast.toNumber(point2[1]) + sprY;point2[2] = Scratch.Cast.toNumber(point2[2]) + sprZ;
      point3[0] = Scratch.Cast.toNumber(point3[0]) + sprX;point3[1] = Scratch.Cast.toNumber(point3[1]) + sprY;point3[2] = Scratch.Cast.toNumber(point3[2]) + sprZ;
      //Rotate points around camera
      let temp = point1[0];
      point1[0] = point1[2] * camera.sinAndCos[0] + point1[0] * camera.sinAndCos[1];point1[2] = point1[2] * camera.sinAndCos[1] - temp * camera.sinAndCos[0];
      temp = point1[1];
      point1[1] = point1[2] * camera.sinAndCos[2] + point1[1] * camera.sinAndCos[3];point1[2] = point1[2] * camera.sinAndCos[3] - temp * camera.sinAndCos[2];
      temp = point1[0];
      point1[0] = point1[1] * camera.sinAndCos[4] + point1[0] * camera.sinAndCos[5];point1[1] = point1[1] * camera.sinAndCos[5] - temp * camera.sinAndCos[4];

      temp = point2[0];
      point2[0] = point2[2] * camera.sinAndCos[0] + point2[0] * camera.sinAndCos[1];point2[2] = point2[2] * camera.sinAndCos[1] - temp * camera.sinAndCos[0];
      temp = point2[1];
      point2[1] = point2[2] * camera.sinAndCos[2] + point2[1] * camera.sinAndCos[3];point2[2] = point2[2] * camera.sinAndCos[3] - temp * camera.sinAndCos[2];
      temp = point2[0];
      point2[0] = point2[1] * camera.sinAndCos[4] + point2[0] * camera.sinAndCos[5];point2[1] = point2[1] * camera.sinAndCos[5] - temp * camera.sinAndCos[4];

      temp = point3[0];
      point3[0] = point3[2] * camera.sinAndCos[0] + point3[0] * camera.sinAndCos[1];point3[2] = point3[2] * camera.sinAndCos[1] - temp * camera.sinAndCos[0];
      temp = point3[1];
      point3[1] = point3[2] * camera.sinAndCos[2] + point3[1] * camera.sinAndCos[3];point3[2] = point3[2] * camera.sinAndCos[3] - temp * camera.sinAndCos[2];
      temp = point3[0];
      point3[0] = point3[1] * camera.sinAndCos[4] + point3[0] * camera.sinAndCos[5];point3[1] = point3[1] * camera.sinAndCos[5] - temp * camera.sinAndCos[4];
      
      if (point1[2] < 1 && point2[2] < 1 && point3[2] < 1) {return;}

      //Get projection points
      let project1 = fov / point1[2];
      let project2 = fov / point2[2];
      let project3 = fov / point3[2];

      point1[0] = point1[0] * project1;point1[1] = point1[1] * project1;
      point2[0] = point2[0] * project2;point2[1] = point2[1] * project2;
      point3[0] = point3[0] * project3;point3[1] = point3[1] * project3;

      //Corner Pinch
      penPModule.setTrianglePointAttribute({ point:1, attribute:6, value:point1[2] }, util);
      penPModule.setTrianglePointAttribute({ point:2, attribute:6, value:point2[2] }, util);
      penPModule.setTrianglePointAttribute({ point:3, attribute:6, value:point3[2] }, util);
      //Depth Buffer Value
      penPModule.setTrianglePointAttribute({ point:1, attribute:5, value:point1[2] }, util);
      penPModule.setTrianglePointAttribute({ point:2, attribute:5, value:point2[2] }, util);
      penPModule.setTrianglePointAttribute({ point:3, attribute:5, value:point3[2] }, util);

      penPModule.drawTexTri({ x1:point1[0], y1:point1[1], x2:point2[0], y2:point2[1], x3:point3[0], y3:point3[1], tex:texture },util);
    }
    tdMathPPCosMen() {
      if (!penPModule) throw "Pen+ module not found";
      return penPModule.costumeMenuFunction();
    }
    newV3({ x, y, z }) {
      return JSON.stringify([
        Scratch.Cast.toNumber(x) || 0,
        Scratch.Cast.toNumber(y) || 0,
        Scratch.Cast.toNumber(z) || 0,
      ]);
    }
    newV3fromValue({ value }) {
      if (typeof value == "number") {
        return JSON.stringify([value, value, value]);
      }
      return JSON.stringify([0, 0, 0]);
    }
    getAxisOfV3({ axis, vector }) {
      axis = Scratch.Cast.toNumber(axis);
      vector = JSON.parse(vector);
      if (vector) {
        return vector[axis];
      }
      return 0;
    }
    addV3({ a, b }) {
      a = JSON.parse(a);
      b = JSON.parse(b);
      if (a && b) {
        return JSON.stringify([a[0] + b[0], a[1] + b[1], a[2] + b[2]]);
      }
      return "[0,0,0]";
    }
    subV3({ a, b }) {
      a = JSON.parse(a);
      b = JSON.parse(b);
      if (a && b) {
        return JSON.stringify([a[0] - b[0], a[1] - b[1], a[2] - b[2]]);
      }
      return "[0,0,0]";
    }
    mulV3({ a, b }) {
      a = JSON.parse(a);
      b = JSON.parse(b);
      if (a && b) {
        return JSON.stringify([a[0] * b[0], a[1] * b[1], a[2] * b[2]]);
      }
      return "[0,0,0]";
    }
    divV3({ a, b }) {
      a = JSON.parse(a);
      b = JSON.parse(b);
      if (a && b) {
        const c = [0, 0, 0];
        c[0] = a[0] / b[0];
        c[1] = a[1] / b[1];
        c[2] = a[2] / b[2];
        if (isNaN(c[0])) {
          c[0] = 0;
        }

        if (isNaN(c[1])) {
          c[1] = 0;
        }

        if (isNaN(c[2])) {
          c[2] = 0;
        }

        return JSON.stringify(c);
      }
      return "[0,0,0]";
    }
    dotProductOfV3({ a, b }) {
      a = JSON.parse(a);
      b = JSON.parse(b);
      if (a.length == 3 && b.length == 3) {
        return a[0] * b[0] + a[1] * b[1] + a[2] + b[2];
      }
      return 0;
    }
    dotProductOfV2({ a, b }) {
      a = JSON.parse(a);
      b = JSON.parse(b);
      if (a.length == 2 && b.length == 2) {
        return a[0] * b[0] + a[1] * b[1];
      }
      return 0;
    }
    crossProductOfV3({ a, b }) {
      a = JSON.parse(a);
      b = JSON.parse(b);

      if (a && b) {
        const c = [0, 0, 0];

        c[0] = a[1] * b[2] - a[2] * b[1];
        c[1] = a[2] * b[0] - a[0] * b[2];
        c[2] = a[0] * b[1] - a[1] * b[0];

        return JSON.stringify(c);
      }
      return "[0,0,0]";
    }
    magnitudeV3({ a }) {
      a = JSON.parse(a);
      if (a) {
        return Math.sqrt(
          Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2)
        );
      }
      return 0;
    }
    distanceV3({ a, b }) {
      a = JSON.parse(a);
      b = JSON.parse(b);
      if (a && b) {
        return Math.sqrt(
          Math.pow(a[0] - b[0], 2) +
            Math.pow(a[1] - b[1], 2) +
            Math.pow(a[2] - b[2], 2)
        );
      }
      return 0;
    }
    rotateAroundPointV3({ a, b, yaw, pitch, roll }) {
      a = JSON.parse(a);
      b = JSON.parse(b);

      if (a && b) {
        a[0] -= b[0];
        a[1] -= b[1];
        a[2] -= b[2];

        const sinAndCos = [
          Math.sin(yaw * d2r),
          Math.cos(yaw * d2r),
          Math.sin(pitch * d2r),
          Math.cos(pitch * d2r),
          Math.sin(roll * d2r),
          Math.cos(roll * d2r),
        ];

        let temp = a[0];

        a[0] = a[2] * sinAndCos[0] + a[0] * sinAndCos[1];
        a[2] = a[2] * sinAndCos[1] - temp * sinAndCos[0];

        temp = a[1];

        a[1] = a[2] * sinAndCos[2] + a[1] * sinAndCos[3];
        a[2] = a[2] * sinAndCos[3] - temp * sinAndCos[2];

        temp = a[0];

        a[0] = a[1] * sinAndCos[4] + a[0] * sinAndCos[5];
        a[1] = a[1] * sinAndCos[5] - temp * sinAndCos[4];

        a[0] += b[0];
        a[1] += b[1];
        a[2] += b[2];

        return JSON.stringify(a);
      }
      return "[0,0,0]";
    }
    rotateAroundCenterV3({ a, yaw, pitch, roll }) {
      a = JSON.parse(a);

      if (a) {
        const sinAndCos = [
          Math.sin(yaw * d2r),
          Math.cos(yaw * d2r),
          Math.sin(pitch * d2r),
          Math.cos(pitch * d2r),
          Math.sin(roll * d2r),
          Math.cos(roll * d2r),
        ];

        let temp = a[0];

        a[0] = a[2] * sinAndCos[0] + a[0] * sinAndCos[1];
        a[2] = a[2] * sinAndCos[1] - temp * sinAndCos[0];

        temp = a[1];

        a[1] = a[2] * sinAndCos[2] + a[1] * sinAndCos[3];
        a[2] = a[2] * sinAndCos[3] - temp * sinAndCos[2];

        temp = a[0];

        a[0] = a[1] * sinAndCos[4] + a[0] * sinAndCos[5];
        a[1] = a[1] * sinAndCos[5] - temp * sinAndCos[4];

        return JSON.stringify(a);
      }
      return "[0,0,0]";
    }
    newV2({ x, y }) {
      return JSON.stringify([
        Scratch.Cast.toNumber(x) || 0,
        Scratch.Cast.toNumber(y) || 0,
      ]);
    }
    newV2fromValue({ value }) {
      if (typeof value == "number") {
        return JSON.stringify([value, value]);
      }
      return JSON.stringify([0, 0]);
    }
    getAxisOfV2({ axis, vector }) {
      axis = Scratch.Cast.toNumber(axis);
      vector = JSON.parse(vector);
      if (vector) {
        return vector[axis];
      }
      return 0;
    }
    project2DFromCam({ a }) {
      a = JSON.parse(a);

      if (a) {
        a[0] -= camera.position[0];
        a[1] -= camera.position[1];
        a[2] -= camera.position[2];

        let temp = a[0];

        a[0] = a[2] * camera.sinAndCos[0] + a[0] * camera.sinAndCos[1];
        a[2] = a[2] * camera.sinAndCos[1] - temp * camera.sinAndCos[0];

        temp = a[1];

        a[1] = a[2] * camera.sinAndCos[2] + a[1] * camera.sinAndCos[3];
        a[2] = a[2] * camera.sinAndCos[3] - temp * camera.sinAndCos[2];

        temp = a[0];

        a[0] = a[1] * camera.sinAndCos[4] + a[0] * camera.sinAndCos[5];
        a[1] = a[1] * camera.sinAndCos[5] - temp * camera.sinAndCos[4];

        let project = fov / a[2];

        return JSON.stringify([a[0] * project, a[1] * project]);
      }
      return "[0,0]";
    }
    project2DFromPos({ a, b, yaw, pitch, roll }) {
      a = JSON.parse(a);
      b = JSON.parse(b);

      if (a && b) {
        a[0] -= b[0];
        a[1] -= b[1];
        a[2] -= b[2];

        const sinAndCos = [
          Math.sin(-yaw * d2r),
          Math.cos(-yaw * d2r),
          Math.sin(-pitch * d2r),
          Math.cos(-pitch * d2r),
          Math.sin(-roll * d2r),
          Math.cos(-roll * d2r),
        ];

        let temp = a[0];

        a[0] = a[2] * sinAndCos[0] + a[0] * sinAndCos[1];
        a[2] = a[2] * sinAndCos[1] - temp * sinAndCos[0];

        temp = a[1];

        a[1] = a[2] * sinAndCos[2] + a[1] * sinAndCos[3];
        a[2] = a[2] * sinAndCos[3] - temp * sinAndCos[2];

        temp = a[0];

        a[0] = a[1] * sinAndCos[4] + a[0] * sinAndCos[5];
        a[1] = a[1] * sinAndCos[5] - temp * sinAndCos[4];

        let project = fov / a[2];

        return JSON.stringify([a[0] * project, a[1] * project]);
      }
      return "[0,0]";
    }
    addV2({ a, b }) {
      a = JSON.parse(a);
      b = JSON.parse(b);
      if (a && b) {
        return JSON.stringify([a[0] + b[0], a[1] + b[1]]);
      }
      return "[0,0]";
    }
    subV2({ a, b }) {
      a = JSON.parse(a);
      b = JSON.parse(b);
      if (a && b) {
        return JSON.stringify([a[0] - b[0], a[1] - b[1], a[2] - b[2]]);
      }
      return "[0,0]";
    }
    mulV2({ a, b }) {
      a = JSON.parse(a);
      b = JSON.parse(b);
      if (a && b) {
        return JSON.stringify([a[0] * b[0], a[1] * b[1]]);
      }
      return "[0,0]";
    }
    divV2({ a, b }) {
      a = JSON.parse(a);
      b = JSON.parse(b);
      if (a && b) {
        const c = [0, 0];
        c[0] = a[0] / b[0];
        c[1] = a[1] / b[1];
        if (isNaN(c[0])) {
          c[0] = 0;
        }

        if (isNaN(c[1])) {
          c[1] = 0;
        }

        return JSON.stringify(c);
      }
      return "[0,0]";
    }
    crossProductOfV2({ a, b }) {
      a = JSON.parse(a);
      b = JSON.parse(b);

      if (a && b) {
        const c = [0, 0];

        c[0] = a[1] - b[1];
        c[1] = b[0] - a[0];

        return JSON.stringify(c);
      }
      return 0;
    }
    magnitudeV2({ a }) {
      a = JSON.parse(a);
      if (a) {
        return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2));
      }
      return 0;
    }
    distanceV2({ a, b }) {
      a = JSON.parse(a);
      b = JSON.parse(b);
      if (a && b) {
        return Math.sqrt(Math.pow(a[0] - b[0], 2) + Math.pow(a[1] - b[1], 2));
      }
      return 0;
    }
    rotateAroundPointV2({ a, b, yaw }) {
      a = JSON.parse(a);
      b = JSON.parse(b);

      if (a && b) {
        a[0] -= b[0];
        a[1] -= b[1];

        const sinAndCos = [Math.sin(yaw * d2r), Math.cos(yaw * d2r)];

        let temp = a[0];

        a[0] = a[1] * sinAndCos[0] + a[0] * sinAndCos[1];
        a[1] = a[1] * sinAndCos[1] - temp * sinAndCos[0];

        a[0] += b[0];
        a[1] += b[1];

        return JSON.stringify(a);
      }
      return "[0,0]";
    }
    rotateAroundCenterV2({ a, yaw }) {
      a = JSON.parse(a);

      if (a) {
        const sinAndCos = [Math.sin(yaw * d2r), Math.cos(yaw * d2r)];

        let temp = a[0];

        a[0] = a[1] * sinAndCos[0] + a[0] * sinAndCos[1];
        a[1] = a[1] * sinAndCos[1] - temp * sinAndCos[0];

        return JSON.stringify(a);
      }
      return "[0,0]";
    }
    cam3DsetPosition({ a }) {
      a = JSON.parse(a);

      if (a) {
        camera.position = a;
      }
    }
    cam3DchangePosition({ a }) {
      a = JSON.parse(a);

      if (a[0] != undefined && a[1] != undefined && a[2] != undefined) {
        camera.position[0] += a[0];
        camera.position[1] += a[1];
        camera.position[2] += a[2];
      }
    }
    cam3DchangePositionOnAxis({ a, axis}) {
      a = Scratch.Cast.toNumber(a);
      axis = Scratch.Cast.toNumber(axis);

      if (camera.position[axis] != undefined) {
        camera.position[axis] += a;
      }
    }
    cam3DgetPosition() {
      return JSON.stringify(camera.position);
    }
    cam3DsetRotation({ a }) {
      a = JSON.parse(a);

      if (a) {
        camera.rotation = a;

        camera.sinAndCos = [
          Math.sin(-camera.rotation[0] * d2r),
          Math.cos(-camera.rotation[0] * d2r),
          Math.sin(-camera.rotation[1] * d2r),
          Math.cos(-camera.rotation[1] * d2r),
          Math.sin(-camera.rotation[2] * d2r),
          Math.cos(-camera.rotation[2] * d2r),
        ];
      }
    }
    cam3DchangeRotation({ a }) {
      a = JSON.parse(a);

      if (a[0] != undefined && a[1] != undefined && a[2] != undefined) {
        camera.rotation[0] += a[0];
        camera.rotation[1] += a[1];
        camera.rotation[2] += a[2];
        camera.sinAndCos = [
          Math.sin(-camera.rotation[0] * d2r),
          Math.cos(-camera.rotation[0] * d2r),
          Math.sin(-camera.rotation[1] * d2r),
          Math.cos(-camera.rotation[1] * d2r),
          Math.sin(-camera.rotation[2] * d2r),
          Math.cos(-camera.rotation[2] * d2r),
        ];
      }
    }
    cam3DchangeRotationOnAxis({ a, rotator}) {
      a = Scratch.Cast.toNumber(a);
      rotator = Scratch.Cast.toNumber(rotator);

      if (camera.rotation[rotator] != undefined) {
        camera.rotation[rotator] += a;
        camera.sinAndCos = [
          Math.sin(-camera.rotation[0] * d2r),
          Math.cos(-camera.rotation[0] * d2r),
          Math.sin(-camera.rotation[1] * d2r),
          Math.cos(-camera.rotation[1] * d2r),
          Math.sin(-camera.rotation[2] * d2r),
          Math.cos(-camera.rotation[2] * d2r),
        ];
      }
    }
    cam3DgetRotation() {
      return JSON.stringify(camera.rotation);
    }
    setFov({ dist }) {
      fov = dist;
    }
    changeFov({ dist }) {
      fov += dist;
    }
    getFov() {
      return fov;
    }
    checkFor3dPositionData(targetID) {
      if (!spriteData[targetID]) {
        spriteData[targetID] = {position:[0, 0, fov], size:100};
      }
    }
    spr3DsetPosition({ a }, util) {
      const target = util.target;
      this.checkFor3dPositionData(target.id);

      a = JSON.parse(a);
      if (a) {
        spriteData[target.id].position[0] = a[0];
        spriteData[target.id].position[1] = a[1];
        spriteData[target.id].position[2] = a[2];
      }
    }
    spr3DsetPositionComponent({ a, component }, util){
      const target = util.target;
      this.checkFor3dPositionData(target.id);

      a = JSON.parse(a);

      if (a) {
        //String literal for the funnies!
        if (spriteData[target.id].position[component] == undefined) throw `Component ${component} doesn't exist`;
        spriteData[target.id].position[component] = a;
      }
    }
    spr3DchangePosition({ a }, util) {
      const target = util.target;
      this.checkFor3dPositionData(target.id);

      a = JSON.parse(a);

      if (a) {
        spriteData[target.id].position[0] += a[0];
        spriteData[target.id].position[1] += a[1];
        spriteData[target.id].position[2] += a[2];
      }
    }
    spr3DchangePositionComponent({ a, component }, util){
      const target = util.target;
      this.checkFor3dPositionData(target.id);
      //String literal for the funnies!
      if (spriteData[target.id].position[component] == undefined) throw `Component ${component} doesn't exist`;
      spriteData[target.id].position[component] += a;
    }
    spr3DgetPositionComponent({component}, util) {
      const target = util.target;
      this.checkFor3dPositionData(target.id);
      //String literal for the funnies!
      if ((spriteData[target.id].position[component] == undefined)) throw `Component ${component} doesn't exist`;
      return spriteData[target.id].position[component];
    }
    spr3DgetPosition(args, util) {
      const target = util.target;
      this.checkFor3dPositionData(target.id);
      return JSON.stringify(spriteData[target.id].position);
    }
    spr3DsetSize({ a }, util) {
      const target = util.target;
      this.checkFor3dPositionData(target.id);
      spriteData[target.id].size = a;
    }
    spr3DchangeSize({ a }, util) {
      const target = util.target;
      this.checkFor3dPositionData(target.id);
      spriteData[target.id].size += a;
    }
    spr3DgetSize(args, util) {
      const target = util.target;
      this.checkFor3dPositionData(target.id);
      return spriteData[target.id].size;
    }
    spr3D(args, util) {
      const target = util.target;
      this.checkFor3dPositionData(target.id);
      const myData = JSON.parse(JSON.stringify(spriteData[target.id]));

      myData.position[0] -= camera.position[0];
      myData.position[1] -= camera.position[1];
      myData.position[2] -= camera.position[2];

      let temp = myData.position[0];

      myData.position[0] = myData.position[2] * camera.sinAndCos[0] + myData.position[0] * camera.sinAndCos[1];
      myData.position[2] = myData.position[2] * camera.sinAndCos[1] - temp * camera.sinAndCos[0];

      temp = myData.position[1];

      myData.position[1] = myData.position[2] * camera.sinAndCos[2] + myData.position[1] * camera.sinAndCos[3];
      myData.position[2] = myData.position[2] * camera.sinAndCos[3] - temp * camera.sinAndCos[2];

      temp = myData.position[0];

      myData.position[0] = myData.position[1] * camera.sinAndCos[4] + myData.position[0] * camera.sinAndCos[5];
      myData.position[1] = myData.position[1] * camera.sinAndCos[5] - temp * camera.sinAndCos[4];

      let project = fov / myData.position[2];

      if (myData.position[2] < 1) {
        target.setVisible(false);
      } else {
        target.setVisible(true);
        target.setSize(myData.size * project);
        target.setXY(myData.position[0] * project, myData.position[1] * project);
      }
    }
  }
  Scratch.extensions.register(new extension());
})(Scratch);
","https://extensions.turbowarp.org/NOname-awa/global-coordinate.js","https://extensions.turbowarp.org/Lily/ClonesPlus.js","https://extensions.turbowarp.org/stretch.js","https://extensions.turbowarp.org/true-fantom/network.js","https://extensions.turbowarp.org/files.js","data:application/x-javascript;base64,// Name: Better Input
// ID: BetterInputSP
// Description: Expansion of the "ask and wait" Blocks
// By: SharkPool

// Version V.4.0.3

(function (Scratch) {
  "use strict";
  if (!Scratch.extensions.unsandboxed) throw new Error("Better Input must run unsandboxed");

  const menuIconURI =
"data:image/svg+xml;base64,PHN2ZyB2ZXJzaW9uPSIxLjEiIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIgeG1sbnM6eGxpbms9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsiIHdpZHRoPSIxMzQuMTc2MjgiIGhlaWdodD0iMTM0LjE3NjI4IiB2aWV3Qm94PSIwLDAsMTM0LjE3NjI4LDEzNC4xNzYyOCI+PGcgdHJhbnNmb3JtPSJ0cmFuc2xhdGUoLTE3Mi45MTE4NiwtMTEyLjkxMTg2KSI+PGcgZGF0YS1wYXBlci1kYXRhPSJ7JnF1b3Q7aXNQYWludGluZ0xheWVyJnF1b3Q7OnRydWV9IiBmaWxsLXJ1bGU9Im5vbnplcm8iIHN0cm9rZS1saW5lY2FwPSJidXR0IiBzdHJva2UtbGluZWpvaW49Im1pdGVyIiBzdHJva2UtbWl0ZXJsaW1pdD0iMTAiIHN0cm9rZS1kYXNoYXJyYXk9IiIgc3Ryb2tlLWRhc2hvZmZzZXQ9IjAiIHN0eWxlPSJtaXgtYmxlbmQtbW9kZTogbm9ybWFsIj48cGF0aCBkPSJNMTcyLjkxMTg2LDE4MGMwLC0zNy4wNTE3NiAzMC4wMzYzOCwtNjcuMDg4MTQgNjcuMDg4MTQsLTY3LjA4ODE0YzM3LjA1MTc2LDAgNjcuMDg4MTQsMzAuMDM2MzggNjcuMDg4MTQsNjcuMDg4MTRjMCwzNy4wNTE3NiAtMzAuMDM2MzgsNjcuMDg4MTQgLTY3LjA4ODE0LDY3LjA4ODE0Yy0zNy4wNTE3NiwwIC02Ny4wODgxNCwtMzAuMDM2MzggLTY3LjA4ODE0LC02Ny4wODgxNHoiIGZpbGw9IiM5NDAwZmYiIHN0cm9rZT0ibm9uZSIgc3Ryb2tlLXdpZHRoPSIwIi8+PHBhdGggZD0iTTI0OS42Nzg4MiwxNDEuMDQ1NzZsMTAuODMzOSwwLjAzOTgzYzEwLjUxNTI2LDAuMDc5NjYgMTAuODMzOSwwLjExOTQ5IDExLjUxMTAyLDAuNTk3NDVjMi40Mjk2NiwxLjg3MjA0IDIuMzg5ODMsNC45Mzg5OSAtMC4xNTkzMyw2LjY1MTY5Yy0wLjc1Njc4LDAuNTE3OCAtMS4xMTUyNSwwLjU1NzYzIC00LjM0MTUyLDAuNTU3NjNoLTMuNTA1MDl2MzEuMTA3NjN2MzEuMDY3NzloMy40NjUyNmMzLjk0MzIyLDAgNC44OTkxNiwwLjMxODY1IDUuODE1MjYsMS45NTE3YzEuMDM1NiwxLjgzMjIgMC41MTc4LDMuOTQzMjMgLTEuMjc0NTgsNS4yNTc2M2MtMC42NzcxMiwwLjUxNzggLTAuOTk1NzYsMC41MTc4IC0xMS41MTEwMiwwLjU5NzQ1bC0xMC44MzM5LDAuMDc5NjZsLTEuMTE1MjUsLTAuNTU3NjNjLTEuMTU1MDksLTAuNjM3MjkgLTIuMTkwNjgsLTIuMTUwODUgLTIuMTkwNjgsLTMuMzg1NmMwLC0wLjg3NjI3IDAuOTk1NzcsLTIuNjY4NjQgMS43OTIzNywtMy4yNjYxYzAuNTk3NDYsLTAuNDc3OTcgMS4xMTUyNSwtMC41MTc4IDQuMzQxNTIsLTAuNTk3NDVsMy42NjQ0LC0wLjA3OTY3di0zMS4wNjc3OXYtMzEuMDY3NzlsLTMuNjY0NCwtMC4wNzk2N2MtMy4yMjYyNywtMC4wNzk2NiAtMy43NDQwNiwtMC4xMTk0OSAtNC4zNDE1MiwtMC41OTc0NWMtMC43OTY2MSwtMC41NTc2MyAtMS43OTIzNywtMi4zNSAtMS43OTIzNywtMy4yNjYxYzAsLTEuMjM0NzUgMC45OTU3NiwtMi43ODgxNCAyLjE5MDY4LC0zLjM4NTZ6IiBmaWxsPSJub25lIiBzdHJva2U9IiM2OTAwYjQiIHN0cm9rZS13aWR0aD0iMTAiLz48cGF0aCBkPSJNMjI0LjY2NTI2LDE1OC40NTE3aDI4LjA0MDY3djIxLjU0ODMxdjIxLjUwODQ4bC0yOC40Mzg5OCwtMC4wMzk4M2MtMjguMiwtMC4wNzk2NiAtMjguNDM4OTksLTAuMDc5NjcgLTI5LjMxNTI2LC0wLjU5NzQ2Yy0wLjQ3Nzk3LC0wLjI3ODgyIC0xLjExNTI1LC0wLjkxNjEgLTEuMzk0MDcsLTEuNDczNzNsLTAuNTU3NjMsLTAuOTU1OTN2LTE4LjQ0MTUzYzAsLTE3LjcyNDU4IDAuMDM5ODMsLTE4LjQ0MTUzIDAuNDc3OTcsLTE5LjM1NzYzYzAuNTk3NDYsLTEuMDc1NDIgMC45NTU5MywtMS40MzM5IDIuMTUwODUsLTEuODcyMDNjMC43NTY3OCwtMC4yMzg5OSA2LjE3MzczLC0wLjMxODY1IDI5LjAzNjQ0LC0wLjMxODY1ek0yMTQuNjI3OTcsMTY4LjQ0OTE2Yy0wLjYzNzI5LDAuMzk4MyAtMS4zMTQ0MSwxLjc5MjM3IC01LjAxODY0LDkuOTk3NDZjLTQuNjIwMzQsMTAuMjM2NDQgLTQuODU5MzIsMTAuOTEzNTYgLTMuODIzNzIsMTIuMDI4ODJjMS4xNTUwOSwxLjIzNDc1IDIuOTQ3NDUsMS4yNzQ1NyAzLjk4MzA1LDAuMDM5ODNjMC4zMTg2NSwtMC4zOTgzIDAuNzk2NiwtMS4yNzQ1NyAxLjAzNTU5LC0xLjk1MTdsMC40MzgxNCwtMS4yMzQ3NWg0Ljc3OTY2aDQuNzc5NjZsMC41NTc2MywxLjQzMzljMC43MTY5NSwxLjk1MTcgMS40NzM3MywyLjYyODgyIDIuOTA3NjMsMi42Mjg4MmMwLjkxNjEsMCAxLjE5NDkxLC0wLjExOTQ5IDEuNzkyMzcsLTAuNzk2NjFjMC41MTc4LC0wLjU1NzYzIDAuNzE2OTUsLTEuMDM1NTkgMC43MTY5NSwtMS42NzI4OGMwLC0wLjYzNzI5IC0xLjE1NTA4LC0zLjU4NDc0IC0zLjc4MzksLTkuNDM5ODNjLTQuOTc4ODEsLTExLjE5MjM3IC00LjczOTg0LC0xMC43MTQ0MSAtNS41MzY0NSwtMTEuMTEyNzFjLTAuOTE2MSwtMC41MTc4IC0xLjkxMTg3LC0wLjQ3Nzk2IC0yLjgyNzk3LDAuMDc5NjZ6IiBmaWxsPSJub25lIiBzdHJva2U9IiM2OTAwYjQiIHN0cm9rZS13aWR0aD0iMTAiLz48cGF0aCBkPSJNMjE2LjEwMTcsMTc2LjA5NjYxYzAuMTU5MzIsMC4xNTkzMiAyLjU4ODk4LDYuMTMzOSAyLjU4ODk4LDYuMzMzMDVjMCwwLjE1OTMyIC0xLjE5NDkxLDAuMjM4OTggLTIuNzA4NDcsMC4yMzg5OGMtMi4wNzExOCwwIC0yLjY2ODY0LC0wLjA3OTY2IC0yLjU4ODk4LC0wLjMxODY1YzAuMDc5NjYsLTAuMTU5MzIgMC42NzcxMiwtMS42MzMwNSAxLjM5NDA3LC0zLjMwNTkzYzAuNzE2OTUsLTEuNjMzMDUgMS4zMTQ0LC0yLjk4NzI5IDEuMzE0NCwtMi45NDc0NnoiIGZpbGw9Im5vbmUiIHN0cm9rZT0iIzY5MDBiNCIgc3Ryb2tlLXdpZHRoPSIxMCIvPjxwYXRoIGQ9Ik0yNjcuNjQyMzgsMTgwdi0yMS41ODgxM2w4LjI4NDc0LDAuMDc5NjZjNy44MDY3OCwwLjA3OTY2IDguMzI0NTgsMC4xMTk1IDkuMTIxMTksMC41OTc0NmMwLjQ3Nzk2LDAuMjc4ODIgMS4xMTUyNSwwLjkxNjEgMS4zOTQwNywxLjQ3MzczbDAuNTU3NjIsMC45NTU5M3YxOC40ODEzNnYxOC40NDE1M2wtMC41NTc2MiwwLjk1NTkzYy0wLjI3ODgyLDAuNTU3NjMgLTAuOTE2MTEsMS4xOTQ5MSAtMS4zOTQwNywxLjQ3MzczYy0wLjgzNjQ0LDAuNTE3OCAtMS4zMTQ0MSwwLjUxNzggLTkuMTIxMTksMC41OTc0NmwtOC4yODQ3NCwwLjA3OTY2di0yMS41NDgzeiIgZmlsbD0ibm9uZSIgc3Ryb2tlPSIjNjkwMGI0IiBzdHJva2Utd2lkdGg9IjEwIi8+PHBhdGggZD0iTTI0OS42Nzg4MiwxNDEuMDQ1NzZsMTAuODMzOSwwLjAzOTgzYzEwLjUxNTI2LDAuMDc5NjYgMTAuODMzOSwwLjExOTQ5IDExLjUxMTAyLDAuNTk3NDVjMi40Mjk2NiwxLjg3MjA0IDIuMzg5ODMsNC45Mzg5OSAtMC4xNTkzMyw2LjY1MTY5Yy0wLjc1Njc4LDAuNTE3OCAtMS4xMTUyNSwwLjU1NzYzIC00LjM0MTUyLDAuNTU3NjNoLTMuNTA1MDl2MzEuMTA3NjN2MzEuMDY3NzloMy40NjUyNmMzLjk0MzIyLDAgNC44OTkxNiwwLjMxODY1IDUuODE1MjYsMS45NTE3YzEuMDM1NiwxLjgzMjIgMC41MTc4LDMuOTQzMjMgLTEuMjc0NTgsNS4yNTc2M2MtMC42NzcxMiwwLjUxNzggLTAuOTk1NzYsMC41MTc4IC0xMS41MTEwMiwwLjU5NzQ1bC0xMC44MzM5LDAuMDc5NjZsLTEuMTE1MjUsLTAuNTU3NjNjLTEuMTU1MDksLTAuNjM3MjkgLTIuMTkwNjgsLTIuMTUwODUgLTIuMTkwNjgsLTMuMzg1NmMwLC0wLjg3NjI3IDAuOTk1NzcsLTIuNjY4NjQgMS43OTIzNywtMy4yNjYxYzAuNTk3NDYsLTAuNDc3OTcgMS4xMTUyNSwtMC41MTc4IDQuMzQxNTIsLTAuNTk3NDVsMy42NjQ0LC0wLjA3OTY3di0zMS4wNjc3OXYtMzEuMDY3NzlsLTMuNjY0NCwtMC4wNzk2N2MtMy4yMjYyNywtMC4wNzk2NiAtMy43NDQwNiwtMC4xMTk0OSAtNC4zNDE1MiwtMC41OTc0NWMtMC43OTY2MSwtMC41NTc2MyAtMS43OTIzNywtMi4zNSAtMS43OTIzNywtMy4yNjYxYzAsLTEuMjM0NzUgMC45OTU3NiwtMi43ODgxNCAyLjE5MDY4LC0zLjM4NTZ6IiBmaWxsPSIjZmZmZmZmIiBzdHJva2U9Im5vbmUiIHN0cm9rZS13aWR0aD0iMSIvPjxwYXRoIGQ9Ik0yNTEuMzcyNiwxNTguNDUxN3Y0My4wNTY3OGMwLDAgLTU1LjU0NDYzLC0wLjExOTUgLTU2LjQyMDksLTAuNjM3MjljLTAuNDc3OTcsLTAuMjc4ODIgLTEuMTE1MjUsLTAuOTE2MSAtMS4zOTQwNywtMS40NzM3M2wtMC41NTc2MywtMC45NTU5M3YtMTguNDQxNTNjMCwtMTcuNzI0NTggMC4wMzk4MywtMTguNDQxNTMgMC40Nzc5NywtMTkuMzU3NjNjMC41OTc0NiwtMS4wNzU0MiAwLjk1NTkzLC0xLjQzMzkgMi4xNTA4NSwtMS44NzIwM2MwLjc1Njc4LC0wLjIzODk5IDU1Ljc0Mzc4LC0wLjMxODY1IDU1Ljc0Mzc4LC0wLjMxODY1ek0yMTQuNjI3OTcsMTY4LjQ0OTE2Yy0wLjYzNzI5LDAuMzk4MyAtMS4zMTQ0MSwxLjc5MjM3IC01LjAxODY0LDkuOTk3NDZjLTQuNjIwMzQsMTAuMjM2NDQgLTQuODU5MzIsMTAuOTEzNTYgLTMuODIzNzIsMTIuMDI4ODJjMS4xNTUwOSwxLjIzNDc1IDIuOTQ3NDUsMS4yNzQ1NyAzLjk4MzA1LDAuMDM5ODNjMC4zMTg2NSwtMC4zOTgzIDAuNzk2NiwtMS4yNzQ1NyAxLjAzNTU5LC0xLjk1MTdsMC40MzgxNCwtMS4yMzQ3NWg0Ljc3OTY2aDQuNzc5NjZsMC41NTc2MywxLjQzMzljMC43MTY5NSwxLjk1MTcgMS40NzM3MywyLjYyODgyIDIuOTA3NjMsMi42Mjg4MmMwLjkxNjEsMCAxLjE5NDkxLC0wLjExOTQ5IDEuNzkyMzcsLTAuNzk2NjFjMC41MTc4LC0wLjU1NzYzIDAuNzE2OTUsLTEuMDM1NTkgMC43MTY5NSwtMS42NzI4OGMwLC0wLjYzNzI5IC0xLjE1NTA4LC0zLjU4NDc0IC0zLjc4MzksLTkuNDM5ODNjLTQuOTc4ODEsLTExLjE5MjM3IC00LjczOTg0LC0xMC43MTQ0MSAtNS41MzY0NSwtMTEuMTEyNzFjLTAuOTE2MSwtMC41MTc4IC0xLjkxMTg3LC0wLjQ3Nzk2IC0yLjgyNzk3LDAuMDc5NjZ6IiBmaWxsPSIjZmZmZmZmIiBzdHJva2U9Im5vbmUiIHN0cm9rZS13aWR0aD0iMSIvPjxwYXRoIGQ9Ik0yMTYuMTAxNywxNzYuMDk2NjFjMC4xNTkzMiwwLjE1OTMyIDIuNTg4OTgsNi4xMzM5IDIuNTg4OTgsNi4zMzMwNWMwLDAuMTU5MzIgLTEuMTk0OTEsMC4yMzg5OCAtMi43MDg0NywwLjIzODk4Yy0yLjA3MTE4LDAgLTIuNjY4NjQsLTAuMDc5NjYgLTIuNTg4OTgsLTAuMzE4NjVjMC4wNzk2NiwtMC4xNTkzMiAwLjY3NzEyLC0xLjYzMzA1IDEuMzk0MDcsLTMuMzA1OTNjMC43MTY5NSwtMS42MzMwNSAxLjMxNDQsLTIuOTg3MjkgMS4zMTQ0LC0yLjk0NzQ2eiIgZmlsbD0iI2ZmZmZmZiIgc3Ryb2tlPSJub25lIiBzdHJva2Utd2lkdGg9IjEiLz48cGF0aCBkPSJNMjY4Ljk3NTcxLDE1OC40MTE4N2MwLDAgMTUuMjc1OTksMC4xOTkxNSAxNi4wNzI2LDAuNjc3MTJjMC40Nzc5NiwwLjI3ODgyIDEuMTE1MjUsMC45MTYxIDEuMzk0MDcsMS40NzM3M2wwLjU1NzYyLDAuOTU1OTN2MTguNDgxMzZ2MTguNDQxNTNsLTAuNTU3NjIsMC45NTU5M2MtMC4yNzg4MiwwLjU1NzYzIC0wLjkxNjExLDEuMTk0OTEgLTEuMzk0MDcsMS40NzM3M2MtMC44MzY0NCwwLjUxNzggLTE2LjA3MjYsMC42NzcxMiAtMTYuMDcyNiwwLjY3NzEyeiIgZmlsbD0iI2ZmZmZmZiIgc3Ryb2tlPSJub25lIiBzdHJva2Utd2lkdGg9IjEiLz48L2c+PC9nPjwvc3ZnPg==";

  const blockIconURI =
"data:image/svg+xml;base64,PHN2ZyB2ZXJzaW9uPSIxLjEiIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIgeG1sbnM6eGxpbms9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsiIHdpZHRoPSI3OS4zNjMxMyIgaGVpZ2h0PSI4Ny45MjE0OSIgdmlld0JveD0iMCwwLDc5LjM2MzEzLDg3LjkyMTQ5Ij48ZyB0cmFuc2Zvcm09InRyYW5zbGF0ZSgtMjAwLjMxODQzLC0xMzYuMDQxNDMpIj48ZyBkYXRhLXBhcGVyLWRhdGE9InsmcXVvdDtpc1BhaW50aW5nTGF5ZXImcXVvdDs6dHJ1ZX0iIGZpbGwtcnVsZT0ibm9uemVybyIgc3Ryb2tlLWxpbmVjYXA9ImJ1dHQiIHN0cm9rZS1saW5lam9pbj0ibWl0ZXIiIHN0cm9rZS1taXRlcmxpbWl0PSIxMCIgc3Ryb2tlLWRhc2hhcnJheT0iIiBzdHJva2UtZGFzaG9mZnNldD0iMCIgc3R5bGU9Im1peC1ibGVuZC1tb2RlOiBub3JtYWwiPjxwYXRoIGQ9Ik0yMzIuNjcxMTksMTgwLjAwMDAzdjIxLjU0ODNsLTExLjcwNjUyLC0wLjA3OTY2Yy0xMS4wMzExNiwtMC4wNzk2NiAtMTEuNzA2NTQsLTAuMDc5NjYgLTEyLjg4ODQ1LC0wLjU5NzQ2Yy0wLjY3NTM3LC0wLjI3ODgyIC0xLjU3NTg3LC0wLjkxNjEgLTEuOTY5ODUsLTEuNDczNzNsLTAuNzg3OTMsLTAuOTU1OTN2LTE4LjQ0MTUzdi0xOC40ODEzNmwwLjc4NzkzLC0wLjk1NTkzYzAuMzkzOTgsLTAuNTU3NjMgMS4yOTQ0OCwtMS4xOTQ5MSAxLjk2OTg1LC0xLjQ3MzczYzEuMTI1NjMsLTAuNDc3OTYgMS44NTcyOSwtMC41MTc4IDEyLjg4ODQ1LC0wLjU5NzQ2bDExLjcwNjUyLC0wLjA3OTY2djIxLjU4ODEzeiIgZGF0YS1wYXBlci1kYXRhPSJ7JnF1b3Q7aW5kZXgmcXVvdDs6bnVsbH0iIGZpbGw9Im5vbmUiIHN0cm9rZT0iIzY5MDBiNCIgc3Ryb2tlLXdpZHRoPSIxMCIvPjxwYXRoIGQ9Ik0yMzAuNzg3MTYsMjAxLjU0ODMzYzAsMCAtMjEuNTI5MDQsLTAuMTU5MzIgLTIyLjcxMDk0LC0wLjY3NzEyYy0wLjY3NTM3LC0wLjI3ODgyIC0xLjU3NTg3LC0wLjkxNjEgLTEuOTY5ODUsLTEuNDczNzNsLTAuNzg3OTMsLTAuOTU1OTN2LTE4LjQ0MTUzdi0xOC40ODEzNmwwLjc4NzkzLC0wLjk1NTkzYzAuMzkzOTgsLTAuNTU3NjMgMS4yOTQ0OCwtMS4xOTQ5MSAxLjk2OTg1LC0xLjQ3MzczYzEuMTI1NjMsLTAuNDc3OTcgMjIuNzEwOTQsLTAuNjc3MTIgMjIuNzEwOTQsLTAuNjc3MTJ6IiBkYXRhLXBhcGVyLWRhdGE9InsmcXVvdDtpbmRleCZxdW90OzpudWxsfSIgZmlsbD0iI2ZmZmZmZiIgc3Ryb2tlPSJub25lIiBzdHJva2Utd2lkdGg9IjEiLz48cGF0aCBkPSJNMjQ3LjMyODgxLDE4MC4wMDAwMXYtMjEuNTg4MTNsMTEuNzA2NTIsMC4wNzk2NmMxMS4wMzExNiwwLjA3OTY2IDExLjc2MjgyLDAuMTE5NSAxMi44ODg0NSwwLjU5NzQ2YzAuNjc1MzcsMC4yNzg4MiAxLjU3NTg3LDAuOTE2MSAxLjk2OTg1LDEuNDczNzNsMC43ODc5MywwLjk1NTkzdjE4LjQ4MTM2djE4LjQ0MTUzbC0wLjc4NzkzLDAuOTU1OTNjLTAuMzkzOTgsMC41NTc2MyAtMS4yOTQ0OCwxLjE5NDkxIC0xLjk2OTg1LDEuNDczNzNjLTEuMTgxOTEsMC41MTc4IC0xLjg1NzI5LDAuNTE3OCAtMTIuODg4NDUsMC41OTc0NmwtMTEuNzA2NTIsMC4wNzk2NnYtMjEuNTQ4M3oiIGZpbGw9Im5vbmUiIHN0cm9rZT0iIzY5MDBiNCIgc3Ryb2tlLXdpZHRoPSIxMCIvPjxwYXRoIGQ9Ik0yNDkuMjEyODQsMTU4LjQxMTg4YzAsMCAyMS41ODUzMiwwLjE5OTE1IDIyLjcxMDk0LDAuNjc3MTJjMC42NzUzNywwLjI3ODgyIDEuNTc1ODcsMC45MTYxIDEuOTY5ODUsMS40NzM3M2wwLjc4NzkzLDAuOTU1OTN2MTguNDgxMzZ2MTguNDQxNTNsLTAuNzg3OTMsMC45NTU5M2MtMC4zOTM5OCwwLjU1NzYzIC0xLjI5NDQ4LDEuMTk0OTEgLTEuOTY5ODUsMS40NzM3M2MtMS4xODE5MSwwLjUxNzggLTIyLjcxMDk0LDAuNjc3MTIgLTIyLjcxMDk0LDAuNjc3MTJ6IiBmaWxsPSIjZmZmZmZmIiBzdHJva2U9Im5vbmUiIHN0cm9rZS13aWR0aD0iMSIvPjxwYXRoIGQ9Ik0yMjkuNTk1NTYsMTQxLjA0NTc3bDEwLjgzMzksMC4wMzk4M2MxMC41MTUyNiwwLjA3OTY2IDEwLjgzMzksMC4xMTk0OSAxMS41MTEwMiwwLjU5NzQ1YzIuNDI5NjYsMS44NzIwNCAyLjM4OTgzLDQuOTM4OTkgLTAuMTU5MzMsNi42NTE2OWMtMC43NTY3OCwwLjUxNzggLTEuMTE1MjUsMC41NTc2MyAtNC4zNDE1MiwwLjU1NzYzaC0zLjUwNTA5djMxLjEwNzYzdjMxLjA2Nzc5aDMuNDY1MjZjMy45NDMyMiwwIDQuODk5MTYsMC4zMTg2NSA1LjgxNTI2LDEuOTUxN2MxLjAzNTYsMS44MzIyIDAuNTE3OCwzLjk0MzIzIC0xLjI3NDU4LDUuMjU3NjNjLTAuNjc3MTIsMC41MTc4IC0wLjk5NTc2LDAuNTE3OCAtMTEuNTExMDIsMC41OTc0NWwtMTAuODMzOSwwLjA3OTY2bC0xLjExNTI1LC0wLjU1NzYzYy0xLjE1NTA5LC0wLjYzNzI5IC0yLjE5MDY4LC0yLjE1MDg1IC0yLjE5MDY4LC0zLjM4NTZjMCwtMC44NzYyNyAwLjk5NTc3LC0yLjY2ODY0IDEuNzkyMzcsLTMuMjY2MWMwLjU5NzQ2LC0wLjQ3Nzk3IDEuMTE1MjUsLTAuNTE3OCA0LjM0MTUyLC0wLjU5NzQ1bDMuNjY0NCwtMC4wNzk2N3YtMzEuMDY3Nzl2LTMxLjA2Nzc5bC0zLjY2NDQsLTAuMDc5NjdjLTMuMjI2MjcsLTAuMDc5NjYgLTMuNzQ0MDYsLTAuMTE5NDkgLTQuMzQxNTIsLTAuNTk3NDVjLTAuNzk2NjEsLTAuNTU3NjMgLTEuNzkyMzcsLTIuMzUgLTEuNzkyMzcsLTMuMjY2MWMwLC0xLjIzNDc1IDAuOTk1NzYsLTIuNzg4MTQgMi4xOTA2OCwtMy4zODU2eiIgZmlsbD0ibm9uZSIgc3Ryb2tlPSIjNjkwMGI0IiBzdHJva2Utd2lkdGg9IjEwIi8+PHBhdGggZD0iTTIyOS41OTU1NiwxNDEuMDQ1NzdsMTAuODMzOSwwLjAzOTgzYzEwLjUxNTI2LDAuMDc5NjYgMTAuODMzOSwwLjExOTQ5IDExLjUxMTAyLDAuNTk3NDVjMi40Mjk2NiwxLjg3MjA0IDIuMzg5ODMsNC45Mzg5OSAtMC4xNTkzMyw2LjY1MTY5Yy0wLjc1Njc4LDAuNTE3OCAtMS4xMTUyNSwwLjU1NzYzIC00LjM0MTUyLDAuNTU3NjNoLTMuNTA1MDl2MzEuMTA3NjN2MzEuMDY3NzloMy40NjUyNmMzLjk0MzIyLDAgNC44OTkxNiwwLjMxODY1IDUuODE1MjYsMS45NTE3YzEuMDM1NiwxLjgzMjIgMC41MTc4LDMuOTQzMjMgLTEuMjc0NTgsNS4yNTc2M2MtMC42NzcxMiwwLjUxNzggLTAuOTk1NzYsMC41MTc4IC0xMS41MTEwMiwwLjU5NzQ1bC0xMC44MzM5LDAuMDc5NjZsLTEuMTE1MjUsLTAuNTU3NjNjLTEuMTU1MDksLTAuNjM3MjkgLTIuMTkwNjgsLTIuMTUwODUgLTIuMTkwNjgsLTMuMzg1NmMwLC0wLjg3NjI3IDAuOTk1NzcsLTIuNjY4NjQgMS43OTIzNywtMy4yNjYxYzAuNTk3NDYsLTAuNDc3OTcgMS4xMTUyNSwtMC41MTc4IDQuMzQxNTIsLTAuNTk3NDVsMy42NjQ0LC0wLjA3OTY3di0zMS4wNjc3OXYtMzEuMDY3NzlsLTMuNjY0NCwtMC4wNzk2N2MtMy4yMjYyNywtMC4wNzk2NiAtMy43NDQwNiwtMC4xMTk0OSAtNC4zNDE1MiwtMC41OTc0NWMtMC43OTY2MSwtMC41NTc2MyAtMS43OTIzNywtMi4zNSAtMS43OTIzNywtMy4yNjYxYzAsLTEuMjM0NzUgMC45OTU3NiwtMi43ODgxNCAyLjE5MDY4LC0zLjM4NTZ6IiBmaWxsPSIjZmZmZmZmIiBzdHJva2U9Im5vbmUiIHN0cm9rZS13aWR0aD0iMSIvPjwvZz48L2c+PC9zdmc+";

  const formatIcon =
"data:image/svg+xml;base64,PHN2ZyB2ZXJzaW9uPSIxLjEiIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIgeG1sbnM6eGxpbms9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsiIHdpZHRoPSIxNTAuOTAzNTUiIGhlaWdodD0iOTUuNSIgdmlld0JveD0iMCwwLDE1MC45MDM1NSw5NS41Ij48ZyB0cmFuc2Zvcm09InRyYW5zbGF0ZSgtMTY0LjU0ODIyLC0xMzIuMjUpIj48ZyBkYXRhLXBhcGVyLWRhdGE9InsmcXVvdDtpc1BhaW50aW5nTGF5ZXImcXVvdDs6dHJ1ZX0iIGZpbGwtcnVsZT0ibm9uemVybyIgc3Ryb2tlLWxpbmVjYXA9ImJ1dHQiIHN0cm9rZS1saW5lam9pbj0ibWl0ZXIiIHN0cm9rZS1taXRlcmxpbWl0PSIxMCIgc3Ryb2tlLWRhc2hhcnJheT0iIiBzdHJva2UtZGFzaG9mZnNldD0iMCIgc3R5bGU9Im1peC1ibGVuZC1tb2RlOiBub3JtYWwiPjxwYXRoIGQ9Ik0yMzkuNzQxOTcsMjAxLjgxODIzYzAsMCAtNDAuMjY2OTcsLTAuMTU5MzIgLTQxLjU1OTI5LC0wLjY3NzEyYy0wLjczODQ2LC0wLjI3ODgyIC0xLjcyMzA5LC0wLjkxNjEgLTIuMTUzODcsLTEuNDczNzNsLTAuODYxNTQsLTAuOTU1OTN2LTE4LjQ0MTUzdi0xOC40ODEzNmwwLjg2MTU0LC0wLjk1NTkzYzAuNDMwNzksLTAuNTU3NjMgMS40MTU0MSwtMS4xOTQ5MSAyLjE1Mzg3LC0xLjQ3MzczYzEuMjMwNzksLTAuNDc3OTYgNDEuNTU5MjksLTAuNjc3MTIgNDEuNTU5MjksLTAuNjc3MTJ6IiBkYXRhLXBhcGVyLWRhdGE9InsmcXVvdDtpbmRleCZxdW90OzpudWxsfSIgZmlsbD0ibm9uZSIgc3Ryb2tlPSIjNjkwMGI0IiBzdHJva2Utd2lkdGg9IjEwIi8+PHBhdGggZD0iTTIzNC4wOTEzNiwxNTguNjgxNzhjMCwwIDQyLjY2MTg0LDAuMTk5MTYgNDMuODkyNjIsMC42NzcxMmMwLjczODQ2LDAuMjc4ODIgMS43MjMwOSwwLjkxNjEgMi4xNTM4NywxLjQ3MzczbDAuODYxNTQsMC45NTU5M3YxOC40ODEzNnYxOC40NDE1M2wtMC44NjE1NCwwLjk1NTkzYy0wLjQzMDc5LDAuNTU3NjMgLTEuNDE1NDEsMS4xOTQ5MSAtMi4xNTM4NywxLjQ3MzczYy0xLjI5MjMyLDAuNTE3OCAtNDMuODkyNjIsMC42NzcxMiAtNDMuODkyNjIsMC42NzcxMnoiIGZpbGw9Im5vbmUiIHN0cm9rZT0iIzY5MDBiNCIgc3Ryb2tlLXdpZHRoPSIxMCIvPjxwYXRoIGQ9Ik0yMzYuMTUxNCwxNTguNjgxNzhjMCwwIDQwLjYwMTgxLDAuMTk5MTUgNDEuODMyNTksMC42NzcxMmMwLjczODQ2LDAuMjc4ODIgMS43MjMwOSwwLjkxNjEgMi4xNTM4NywxLjQ3MzczbDAuODYxNTQsMC45NTU5M3YxOC40ODEzNnYxOC40NDE1M2wtMC44NjE1NCwwLjk1NTkzYy0wLjQzMDc5LDAuNTU3NjMgLTEuNDE1NDEsMS4xOTQ5MSAtMi4xNTM4NywxLjQ3MzczYy0xLjI5MjMyLDAuNTE3OCAtNDEuODMyNTksMC42NzcxMiAtNDEuODMyNTksMC42NzcxMnoiIGZpbGw9IiNmZmZmZmYiIHN0cm9rZT0ibm9uZSIgc3Ryb2tlLXdpZHRoPSIxIi8+PHBhdGggZD0iTTIzNy42ODE5MywyMDEuODE4MjNjMCwwIC0zOC4yMDY5NCwtMC4xNTkzMiAtMzkuNDk5MjYsLTAuNjc3MTJjLTAuNzM4NDYsLTAuMjc4ODIgLTEuNzIzMDksLTAuOTE2MSAtMi4xNTM4NywtMS40NzM3M2wtMC44NjE1NCwtMC45NTU5M3YtMTguNDQxNTN2LTE4LjQ4MTM2bDAuODYxNTQsLTAuOTU1OTNjMC40MzA3OSwtMC41NTc2MyAxLjQxNTQxLC0xLjE5NDkxIDIuMTUzODcsLTEuNDczNzNjMS4yMzA3OCwtMC40Nzc5NyAzOS40OTkyNiwtMC42NzcxMiAzOS40OTkyNiwtMC42NzcxMnoiIGRhdGEtcGFwZXItZGF0YT0ieyZxdW90O2luZGV4JnF1b3Q7Om51bGx9IiBmaWxsPSIjZmZmZmZmIiBzdHJva2U9Im5vbmUiIHN0cm9rZS13aWR0aD0iMSIvPjxwYXRoIGQ9Ik0xNjkuNTQ4MjIsMTU0LjQwNzUydi0xNy4xNTc1MmgxNy4xNTc1MnoiIGZpbGw9Im5vbmUiIHN0cm9rZT0iIzY5MDBiNCIgc3Ryb2tlLXdpZHRoPSIxMCIvPjxwYXRoIGQ9Ik0zMTAuNDUxNzgsMjA1LjU5MjQ4djE3LjE1NzUyaC0xNy4xNTc1MnoiIGRhdGEtcGFwZXItZGF0YT0ieyZxdW90O2luZGV4JnF1b3Q7Om51bGx9IiBmaWxsPSJub25lIiBzdHJva2U9IiM2OTAwYjQiIHN0cm9rZS13aWR0aD0iMTAiLz48cGF0aCBkPSJNMTY5LjU0ODIzLDE1NC40MDc1MnYtMTcuMTU3NTJoMTcuMTU3NTJ6IiBmaWxsPSIjZmZmZmZmIiBzdHJva2U9Im5vbmUiIHN0cm9rZS13aWR0aD0iMCIvPjxwYXRoIGQ9Ik0zMTAuNDUxNzgsMjA1LjU5MjQ4djE3LjE1NzUyaC0xNy4xNTc1MnoiIGRhdGEtcGFwZXItZGF0YT0ieyZxdW90O2luZGV4JnF1b3Q7Om51bGx9IiBmaWxsPSIjZmZmZmZmIiBzdHJva2U9Im5vbmUiIHN0cm9rZS13aWR0aD0iMCIvPjxwYXRoIGQ9Ik0xODYuNzA1NzYsMjIyLjc1aC0xNy4xNTc1MnYtMTcuMTU3NTJ6IiBkYXRhLXBhcGVyLWRhdGE9InsmcXVvdDtpbmRleCZxdW90OzpudWxsfSIgZmlsbD0ibm9uZSIgc3Ryb2tlPSIjNjkwMGI0IiBzdHJva2Utd2lkdGg9IjEwIi8+PHBhdGggZD0iTTI5My4yOTQyNSwxMzcuMjVoMTcuMTU3NTJ2MTcuMTU3NTJ6IiBkYXRhLXBhcGVyLWRhdGE9InsmcXVvdDtpbmRleCZxdW90OzpudWxsfSIgZmlsbD0ibm9uZSIgc3Ryb2tlPSIjNjkwMGI0IiBzdHJva2Utd2lkdGg9IjEwIi8+PHBhdGggZD0iTTE4Ni43MDU3NiwyMjIuNzVoLTE3LjE1NzUydi0xNy4xNTc1MnoiIGRhdGEtcGFwZXItZGF0YT0ieyZxdW90O2luZGV4JnF1b3Q7Om51bGx9IiBmaWxsPSIjZmZmZmZmIiBzdHJva2U9Im5vbmUiIHN0cm9rZS13aWR0aD0iMCIvPjxwYXRoIGQ9Ik0yOTMuMjk0MjUsMTM3LjI1aDE3LjE1NzUydjE3LjE1NzUyeiIgZGF0YS1wYXBlci1kYXRhPSJ7JnF1b3Q7aW5kZXgmcXVvdDs6bnVsbH0iIGZpbGw9IiNmZmZmZmYiIHN0cm9rZT0ibm9uZSIgc3Ryb2tlLXdpZHRoPSIwIi8+PHBhdGggZD0iTTIzNi4yNjY0NCwxNjUuNjY5ODVjMS4xODI3MiwtMC43MTk5MSAyLjQ4NDMxLC0wLjc3MTMzIDMuNjY3MDMsLTAuMTAyODNjMS4wMjg0NSwwLjUxNDIyIDAuNzc2MzksLTAuMDQwOTQgNy4yMDQyMSwxNC40MDg4YzMuMzkzOSw3LjU1OTEzIDQuODY5NjUsMTEuNDA4NTMgNC44Njk2NSwxMi4yMzEyOWMwLDAuODIyNzYgLTAuMjYyMzgsMS40NDUyOSAtMC45MzA4OCwyLjE2NTIxYy0wLjc3MTM0LDAuODc0MTkgLTEuMTM3ODQsMS4wMzM3NCAtMi4zMjA1NSwxLjAzMzc0Yy0xLjg1MTIxLDAgLTIuODk4MjIsLTAuOTgyNTUgLTMuODIzODIsLTMuNTAyMjdsLTAuNjUyODgsLTEuNzQwOWwtNi4yMDUwNSwwLjAwOTg1bC02LjIwNSwtMC4wMDk5bC0wLjQ5ODQ5LDEuNDgzODZjLTAuMzA4NTQsMC44NzQyIC0wLjk5MDc4LDIuMTE2OTMgLTEuNDAyMTcsMi42MzExNWMtMS4zMzcsMS41OTQwOSAtMy42NjMxMywxLjUzMzU5IC01LjE1NDM5LC0wLjA2MDUxYy0xLjMzNywtMS40Mzk4NCAtMS4wNDcyOSwtMi4zNzMyOCA0LjkxNzczLC0xNS41ODg4OGM0Ljc4MjI5LC0xMC41OTMwNiA1LjcxMTg0LC0xMi40NDQ0MSA2LjUzNDYsLTEyLjk1ODYzeiIgZGF0YS1wYXBlci1kYXRhPSJ7JnF1b3Q7bm9Ib3ZlciZxdW90OzpmYWxzZSwmcXVvdDtvcmlnSXRlbSZxdW90OzpbJnF1b3Q7UGF0aCZxdW90Oyx7JnF1b3Q7YXBwbHlNYXRyaXgmcXVvdDs6dHJ1ZSwmcXVvdDtzZWdtZW50cyZxdW90OzpbW1szMzcuMjU1OTQsMTk4LjIzMTY1XSxbMCwwXSxbLTEuMjc0NTgsMC43OTY2XV0sW1szMjcuMjE4NjYsMjE4LjIyNjU3XSxbNy40MDg0NiwtMTYuNDEwMThdLFstOS4yNDA2OCwyMC40NzI4OF1dLFtbMzE5LjU3MTIyLDI0Mi4yODQyMV0sWy0yLjA3MTIsLTIuMjMwNTJdLFsyLjMxMDE4LDIuNDY5NV1dLFtbMzI3LjUzNzMyLDI0Mi4zNjM4N10sWy0yLjA3MTIsMi40Njk0OF0sWzAuNjM3MywtMC43OTY2XV0sW1szMjkuNjA4NSwyMzguNDYwNDddLFstMC40Nzc5OCwxLjM1NDI2XSxbMCwwXV0sWzMzMC40ODQ3OCwyMzUuOTkwOTddLFszNDAuMDQ0MSwyMzUuOTkwOTddLFszNDkuNjAzNDIsMjM1Ljk5MDk3XSxbWzM1MC43MTg2OCwyMzguODU4NzddLFswLDBdLFsxLjQzMzksMy45MDM0XV0sW1szNTYuNTMzOTQsMjQ0LjExNjQxXSxbLTIuODY3OCwwXSxbMS44MzIyLDBdXSxbWzM2MC4xMTg2OCwyNDIuNTIzMTldLFstMS4xOTQ5MiwxLjM1NDI0XSxbMS4wMzU2LC0xLjExNTI2XV0sW1szNjEuNTUyNTgsMjM5LjE3NzQzXSxbMCwxLjI3NDU4XSxbMCwtMS4yNzQ1OF1dLFtbMzUzLjk4NDc4LDIyMC4yOTc3N10sWzUuMjU3NjQsMTEuNzEwMThdLFstOS45NTc2MiwtMjIuMzg0NzRdXSxbWzM0Mi45MTE4OCwxOTguMDcyMzVdLFsxLjU5MzIyLDAuNzk2Nl0sWy0xLjgzMjIsLTEuMDM1Nl1dLFtbMzM3LjI1NTk0LDE5OC4yMzE2N10sWzEuODMyMiwtMS4xMTUyNF0sWzAsMF1dXSwmcXVvdDtjbG9zZWQmcXVvdDs6dHJ1ZSwmcXVvdDtmaWxsQ29sb3ImcXVvdDs6WzAsMCwwLDFdfV19IiBmaWxsPSIjNjkwMGI0IiBzdHJva2U9Im5vbmUiIHN0cm9rZS13aWR0aD0iMC41Ii8+PHBhdGggZD0iTTIzOC4xNzcwNCwxNzUuNjA3MDJjMC4yMDU2OSwwLjIwNTY5IDMuMzQyNDYsNy45MTkwOCAzLjM0MjQ2LDguMTc2MTljMCwwLjIwNTY5IC0xLjU0MjY3LDAuMzA4NTMgLTMuNDk2NzMsMC4zMDg1M2MtMi42NzM5NywwIC0zLjQ0NTMxLC0wLjEwMjg0IC0zLjM0MjQ2LC0wLjQxMTM5YzAuMTAyODQsLTAuMjA1NjkgMC44NzQxOSwtMi4xMDgzMiAxLjc5OTc5LC00LjI2ODA3YzAuOTI1NjEsLTIuMTA4MzIgMS42OTY5NCwtMy44NTY3IDEuNjk2OTQsLTMuODA1Mjd6IiBmaWxsPSIjZmZmZmZmIiBzdHJva2U9Im5vbmUiIHN0cm9rZS13aWR0aD0iMSIvPjwvZz48L2c+PC9zdmc+";

  const colorIcon =
"data:image/svg+xml;base64,PHN2ZyB2ZXJzaW9uPSIxLjEiIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIgeG1sbnM6eGxpbms9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsiIHdpZHRoPSI3NS41MzUxNyIgaGVpZ2h0PSI3MS40OTc0NiIgdmlld0JveD0iMCwwLDc1LjUzNTE3LDcxLjQ5NzQ2Ij48ZyB0cmFuc2Zvcm09InRyYW5zbGF0ZSgtMjAyLjIzMjQxLC0xNDQuMjUxMjcpIj48ZyBkYXRhLXBhcGVyLWRhdGE9InsmcXVvdDtpc1BhaW50aW5nTGF5ZXImcXVvdDs6dHJ1ZX0iIGZpbGwtcnVsZT0ibm9uemVybyIgc3Ryb2tlLWxpbmVjYXA9ImJ1dHQiIHN0cm9rZS1saW5lam9pbj0ibWl0ZXIiIHN0cm9rZS1taXRlcmxpbWl0PSIxMCIgc3Ryb2tlLWRhc2hhcnJheT0iIiBzdHJva2UtZGFzaG9mZnNldD0iMCIgc3R5bGU9Im1peC1ibGVuZC1tb2RlOiBub3JtYWwiPjxwYXRoIGQ9Ik0yMjMuNTM4NTYsMTY1LjcxMjcxYzAsLTkuMDkxNDEgNy4zNzAwNCwtMTYuNDYxNDQgMTYuNDYxNDQsLTE2LjQ2MTQ0YzkuMDkxNDEsMCAxNi40NjE0NCw3LjM3MDA0IDE2LjQ2MTQ0LDE2LjQ2MTQ0YzAsOS4wOTE0MSAtNy4zNzAwMywxNi40NjE0NCAtMTYuNDYxNDQsMTYuNDYxNDRjLTkuMDkxNDEsMCAtMTYuNDYxNDQsLTcuMzcwMDMgLTE2LjQ2MTQ0LC0xNi40NjE0NHoiIGZpbGw9Im5vbmUiIHN0cm9rZT0iIzY5MDBiNCIgc3Ryb2tlLXdpZHRoPSIxMCIvPjxwYXRoIGQ9Ik0yMDcuMjMyNDIsMTk0LjI4NzI5YzAsLTkuMDkxNDEgNy4zNzAwNCwtMTYuNDYxNDQgMTYuNDYxNDQsLTE2LjQ2MTQ0YzkuMDkxNDEsMCAxNi40NjE0NCw3LjM3MDA0IDE2LjQ2MTQ0LDE2LjQ2MTQ0YzAsOS4wOTE0MSAtNy4zNzAwNCwxNi40NjE0NCAtMTYuNDYxNDQsMTYuNDYxNDRjLTkuMDkxNDEsMCAtMTYuNDYxNDQsLTcuMzcwMDMgLTE2LjQ2MTQ0LC0xNi40NjE0NHoiIGZpbGw9Im5vbmUiIHN0cm9rZT0iIzY5MDBiNCIgc3Ryb2tlLXdpZHRoPSIxMCIvPjxwYXRoIGQ9Ik0yMzkuODQ0NzEsMTk0LjI4NzI5YzAsLTkuMDkxNDEgNy4zNzAwNCwtMTYuNDYxNDQgMTYuNDYxNDQsLTE2LjQ2MTQ0YzkuMDkxNDEsMCAxNi40NjE0NCw3LjM3MDA0IDE2LjQ2MTQ0LDE2LjQ2MTQ0YzAsOS4wOTE0MSAtNy4zNzAwMywxNi40NjE0NCAtMTYuNDYxNDQsMTYuNDYxNDRjLTkuMDkxNDEsMCAtMTYuNDYxNDQsLTcuMzcwMDMgLTE2LjQ2MTQ0LC0xNi40NjE0NHoiIGZpbGw9Im5vbmUiIHN0cm9rZT0iIzY5MDBiNCIgc3Ryb2tlLXdpZHRoPSIxMCIvPjxwYXRoIGQ9Ik0yMjMuNTM4NTYsMTY1LjcxMjcxYzAsLTkuMDkxNDEgNy4zNzAwMywtMTYuNDYxNDQgMTYuNDYxNDQsLTE2LjQ2MTQ0YzkuMDkxNCwwIDE2LjQ2MTQ0LDcuMzcwMDQgMTYuNDYxNDQsMTYuNDYxNDRjMCw5LjA5MTQxIC03LjM3MDAzLDE2LjQ2MTQ0IC0xNi40NjE0NCwxNi40NjE0NGMtOS4wOTE0LDAgLTE2LjQ2MTQ0LC03LjM3MDAzIC0xNi40NjE0NCwtMTYuNDYxNDR6IiBmaWxsPSIjMDBmZjAxIiBzdHJva2U9Im5vbmUiIHN0cm9rZS13aWR0aD0ibm9uZSIvPjxwYXRoIGQ9Ik0yMDcuMjMyNDEsMTk0LjI4NzI5YzAsLTkuMDkxNCA3LjM3MDA0LC0xNi40NjE0NCAxNi40NjE0NCwtMTYuNDYxNDRjOS4wOTE0LDAgMTYuNDYxNDQsNy4zNzAwNCAxNi40NjE0NCwxNi40NjE0NGMwLDkuMDkxNCAtNy4zNzAwNCwxNi40NjE0NCAtMTYuNDYxNDQsMTYuNDYxNDRjLTkuMDkxNCwwIC0xNi40NjE0NCwtNy4zNzAwNCAtMTYuNDYxNDQsLTE2LjQ2MTQ0eiIgZmlsbD0iI2ZmMDAwMCIgc3Ryb2tlPSJub25lIiBzdHJva2Utd2lkdGg9Im5vbmUiLz48cGF0aCBkPSJNMjM5Ljg0NDcxLDE5NC4yODcyOWMwLC05LjA5MTQxIDcuMzcwMDMsLTE2LjQ2MTQ0IDE2LjQ2MTQ0LC0xNi40NjE0NGM5LjA5MTQsMCAxNi40NjE0NCw3LjM3MDA0IDE2LjQ2MTQ0LDE2LjQ2MTQ0YzAsOS4wOTE0MSAtNy4zNzAwMywxNi40NjE0NCAtMTYuNDYxNDQsMTYuNDYxNDRjLTkuMDkxNCwwIC0xNi40NjE0NCwtNy4zNzAwNCAtMTYuNDYxNDQsLTE2LjQ2MTQ0eiIgZmlsbD0iIzAwNzFmZiIgc3Ryb2tlPSJub25lIiBzdHJva2Utd2lkdGg9Im5vbmUiLz48L2c+PC9nPjwvc3ZnPg==";

  const effectIcon =
"data:image/svg+xml;base64,PHN2ZyB2ZXJzaW9uPSIxLjEiIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIgeG1sbnM6eGxpbms9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsiIHdpZHRoPSI1Ny40NDI0MSIgaGVpZ2h0PSI3MC40NSIgdmlld0JveD0iMCwwLDU3LjQ0MjQxLDcwLjQ1Ij48ZyB0cmFuc2Zvcm09InRyYW5zbGF0ZSgtMjEwLjI2NjQ1LC0xNDQuODU2NTUpIj48ZyBkYXRhLXBhcGVyLWRhdGE9InsmcXVvdDtpc1BhaW50aW5nTGF5ZXImcXVvdDs6dHJ1ZX0iIGZpbGw9IiNmZmZmZmYiIGZpbGwtcnVsZT0iZXZlbm9kZCIgc3Ryb2tlLWxpbmVjYXA9ImJ1dHQiIHN0cm9rZS1saW5lam9pbj0ibWl0ZXIiIHN0cm9rZS1taXRlcmxpbWl0PSIxMCIgc3Ryb2tlLWRhc2hhcnJheT0iIiBzdHJva2UtZGFzaG9mZnNldD0iMCIgc3R5bGU9Im1peC1ibGVuZC1tb2RlOiBub3JtYWwiPjxwYXRoIGQ9Ik0yMTUuMjY2NDUsMTkzLjkwNDFjLTMuOTg4MTUsLTguMTE3MSAtMy45OTYxMSwtMTguMjQzMDUgMC4xNTIyMSwtMjYuNDExMDNjNC42ODc3OSwtOS41NzQzMSAxMi41NzY5MSwtMTMuODE3OTcgMTUuNzQ3NTYsLTE1LjE5Nzc1YzEuOTA1OCwtMC44ODUwOCAzLjkxMzg4LC0xLjU3NDk3IDYuMDc1MzcsLTIuMDgzMTNsMi4xMjA1OSwtMC40NTc2OGMxLjU1ODA1LC0wLjMxOTcgMy4xMDkyOCwwLjY0NjE0IDMuNDQ2OCwyLjE4NzQ1YzAuMzQwOTMsMS41NDQ2OCAtMC42NTExOCwzLjA2NTggLTIuMjE2MDUsMy40MDIzM2wtMi4wNjI2MywwLjQ0NDIyYy0xLjcxNDg4LDAuNDAzODQgLTMuMzU4MTYsMC45NjkyMSAtNC45NjA1MywxLjcxNjMxYy0yLjA4MzA4LDAuOTAxOSAtOC45NzMyOCw0LjM5MTczIC0xMi45NDg1MiwxMi41MTU2Yy0zLjAxNzIzLDUuOTMzMDUgLTMuOTE3MjksMTUuMzY2MDIgMC44MzE4NywyMy4xNDk5OGM0LjMwMjU0LDcuNDk3OTIgMTMuMTEyMTcsMTIuMDk0OTMgMjEuNDY4MzcsMTEuMzIwOTFjNy45MDI3NiwtMC41Njg3NCAxNS4xNTQzNCwtNS44Mjg3MiAxNy42OTc2OCwtMTIuNzk0OTJjMi41ODA4NCwtNi41NTIyNiAwLjg2NTk2LC0xMy4yNjk0MyAtMS45NjcxNywtMTcuMDUyMDRjLTMuNDEyNzEsLTQuNjYwOTYgLTcuNjYwNywtNi4wOTQ1OCAtOS4zMjc4NSwtNi40OTUwNWMtMC4yNDg4OCwtMC4wNzQwNCAtNi4wODU2LC0xLjgyNzM2IC0xMS4yNDA0NiwwLjc1MzgzYy0yLjIxOTQ1LDEuMDYzNDQgLTUuMDkwMDksMy40NTYxOCAtNi42Mjc2OCw3LjA1MDMzYy0xLjY2MDMzLDMuNzExOTQgLTEuMjMwNzYsOC40ODM5NSAxLjAxOTM4LDExLjY1NDA4YzIuMjYzNzgsMy4zOTg5NyA2LjUzMjIyLDUuMzIzOTIgMTAuMjA0MDQsNC42NzEwNWMzLjY1NDc3LC0wLjU3NTQ3IDYuMTI2NTEsLTMuMjk0NjQgNi43MTI5MSwtNS42ODQwMWMwLjY4ODY4LC0yLjU2NzczIC0wLjM2ODIsLTQuNzM4MzYgLTEuMTkzMjYsLTUuNTE5MTFjLTEuNDAxMjIsLTEuMzgzMTQgLTIuNjExNTIsLTEuNDA2NyAtMi42NjI2NiwtMS40MTAwN2MtMC41NzI3NiwtMC4wMTY4MyAtMC44NTU3MywwLjAyNjkyIC0xLjAyNjIsMC4wNTM4NGMtMC42NTQ1OSwwLjIzODk0IC0xLjU4MTkyLDAuNzYzOTMgLTEuODU0NjYsMS4zMTU4NGMtMC4wNDc3MywwLjA5MDg2IC0wLjE3MDQ3LDAuMzM5OSAwLjA2NDc4LDAuOTYyNDhjMC41NjI1MywxLjQ3NzM3IC0wLjE5Nzc0LDMuMTI5NzQgLTEuNjk0NDIsMy42ODUwMmMtMS40ODk4NiwwLjU1ODY0IC0zLjE2NzI0LC0wLjE5MTgyIC0zLjczMzE4LC0xLjY3MjU2Yy0wLjkzMDc0LC0yLjQ0OTk1IC0wLjQxNTkzLC00LjM2ODE4IDAuMTgwNjksLTUuNTQ2MDNjMS41NTgwNSwtMy4wNjU4IDUuMTc1MzIsLTQuMTc2MzUgNS41ODQ0MywtNC4yOTQxNGMwLjE4NzUxLC0wLjA1NzIxIDAuMzg1MjUsLTAuMDkwODYgMC41Nzk1OCwtMC4xMDc2OWMwLjM5ODg5LC0wLjA2MDU4IDEuMTAxMiwtMC4xNTQ4IDIuMDUyNCwtMC4xMTc3OWMyLjE3ODU0LDAuMDI2OTIgNC42NjA1MSwxLjE2NDQgNi41NjI5LDMuMDQ1NjFjMi4yNDY3MywyLjEyMDE1IDQuMDA1OTMsNi4zODA2MyAyLjc1ODEyLDExLjAxMTNjLTEuMjE3MTIsNC45NTcxIC01Ljg5NDY4LDkuMDU2MDYgLTExLjM1Mjk3LDkuOTE0MjFjLTUuODcwODIsMS4wNDY2MSAtMTIuNDgxNDUsLTEuODQ3NTYgLTE1Ljk3MjU3LC03LjA5NDA4Yy0zLjM2NDk4LC00LjcyODI2IC00LjAwOTM0LC0xMS42NDczNSAtMS41NDc4MiwtMTcuMTM2MTdjMi43MDAxNywtNi4zMjAwNiA3Ljg1ODQ0LC05LjE4MDU3IDkuMzcyMTcsLTkuOTA3NDhjNy4yNzg4NiwtMy42MzQ1NCAxNS4wNTg4OCwtMS4yMzUwNyAxNS4zODYxNywtMS4xMzQxMWMyLjA5MzMxLDAuNDk0NyA3LjkxMjk5LDIuNDQzMjIgMTIuNDM3MTMsOC42MjUyOWMzLjQ3NzQ5LDQuNjUwODYgNi4yOTY5OCwxMy4zMzY3MyAyLjcxMzgsMjIuNDI5ODFjLTMuMjcyOTMsOC45NjE4MyAtMTIuNTkwNTUsMTUuNzY5ODUgLTIyLjYzNzc2LDE2LjQ5MzM5Yy0wLjc4NzU1LDAuMDc0MDQgLTEuNTg1MzIsMC4xMTQ0MiAtMi4zNzk2OSwwLjExNDQyYy05Ljc1MDYsMCAtMTkuNjI3MzQsLTUuNjIwMDcgLTI0LjU4MTA2LC0xNC4yNDg3M2MwLDAgLTAuODIwNDksLTEuNDE4MzQgLTEuMTgxODEsLTIuMTUzNzN6IiBzdHJva2U9IiM2OTAwYjQiIHN0cm9rZS13aWR0aD0iMTAiLz48cGF0aCBkPSJNMjE2LjQ0ODI3LDE5Ni4wNTc4NGMtNS4xMzQ0MSwtOC40MjAwMSAtNS41NTM3NSwtMTkuNjU2NzkgLTEuMDI5NjEsLTI4LjU2NDc3YzQuNjg3NzksLTkuNTc0MzEgMTIuNTc2OTEsLTEzLjgxNzk3IDE1Ljc0NzU2LC0xNS4xOTc3NWMxLjkwNTgsLTAuODg1MDggMy45MTM4OCwtMS41NzQ5NyA2LjA3NTM3LC0yLjA4MzEzbDIuMTIwNTksLTAuNDU3NjhjMS41NTgwNSwtMC4zMTk3IDMuMTA5MjgsMC42NDYxNCAzLjQ0NjgsMi4xODc0NWMwLjM0MDkzLDEuNTQ0NjggLTAuNjUxMTgsMy4wNjU4IC0yLjIxNjA1LDMuNDAyMzNsLTIuMDYyNjMsMC40NDQyMmMtMS43MTQ4OCwwLjQwMzg0IC0zLjM1ODE2LDAuOTY5MjEgLTQuOTYwNTMsMS43MTYzMWMtMi4wODMwOCwwLjkwMTkgLTguOTczMjgsNC4zOTE3MyAtMTIuOTQ4NTIsMTIuNTE1NmMtMy4wMTcyMyw1LjkzMzA1IC0zLjkxNzI5LDE1LjM2NjAyIDAuODMxODcsMjMuMTQ5OThjNC4zMDI1NCw3LjQ5NzkyIDEzLjExMjE3LDEyLjA5NDkzIDIxLjQ2ODM3LDExLjMyMDkxYzcuOTAyNzYsLTAuNTY4NzQgMTUuMTU0MzQsLTUuODI4NzIgMTcuNjk3NjgsLTEyLjc5NDkyYzIuNTgwODQsLTYuNTUyMjYgMC44NjU5NiwtMTMuMjY5NDMgLTEuOTY3MTcsLTE3LjA1MjA0Yy0zLjQxMjcxLC00LjY2MDk2IC03LjY2MDcsLTYuMDk0NTggLTkuMzI3ODUsLTYuNDk1MDVjLTAuMjQ4ODgsLTAuMDc0MDQgLTYuMDg1NiwtMS44MjczNiAtMTEuMjQwNDYsMC43NTM4M2MtMi4yMTk0NSwxLjA2MzQ0IC01LjA5MDA5LDMuNDU2MTggLTYuNjI3NjgsNy4wNTAzM2MtMS42NjAzMywzLjcxMTk0IC0xLjIzMDc2LDguNDgzOTUgMS4wMTkzOCwxMS42NTQwOGMyLjI2Mzc4LDMuMzk4OTcgNi41MzIyMiw1LjMyMzkyIDEwLjIwNDA0LDQuNjcxMDVjMy42NTQ3NywtMC41NzU0NyA2LjEyNjUxLC0zLjI5NDY0IDYuNzEyOTEsLTUuNjg0MDFjMC42ODg2OCwtMi41Njc3MyAtMC4zNjgyLC00LjczODM2IC0xLjE5MzI2LC01LjUxOTExYy0xLjQwMTIyLC0xLjM4MzE0IC0yLjYxMTUyLC0xLjQwNjcgLTIuNjYyNjYsLTEuNDEwMDdjLTAuNTcyNzYsLTAuMDE2ODMgLTAuODU1NzMsMC4wMjY5MiAtMS4wMjYyLDAuMDUzODRjLTAuNjU0NTksMC4yMzg5NCAtMS41ODE5MiwwLjc2MzkzIC0xLjg1NDY2LDEuMzE1ODRjLTAuMDQ3NzMsMC4wOTA4NiAtMC4xNzA0NywwLjMzOTkgMC4wNjQ3OCwwLjk2MjQ4YzAuNTYyNTMsMS40NzczNyAtMC4xOTc3NCwzLjEyOTc0IC0xLjY5NDQyLDMuNjg1MDJjLTEuNDg5ODYsMC41NTg2NCAtMy4xNjcyNCwtMC4xOTE4MiAtMy43MzMxOCwtMS42NzI1NmMtMC45MzA3NCwtMi40NDk5NSAtMC40MTU5MywtNC4zNjgxOCAwLjE4MDY5LC01LjU0NjAzYzEuNTU4MDUsLTMuMDY1OCA1LjE3NTMyLC00LjE3NjM1IDUuNTg0NDMsLTQuMjk0MTRjMC4xODc1MSwtMC4wNTcyMSAwLjM4NTI1LC0wLjA5MDg2IDAuNTc5NTgsLTAuMTA3NjljMC4zOTg4OSwtMC4wNjA1OCAxLjEwMTIsLTAuMTU0OCAyLjA1MjQsLTAuMTE3NzljMi4xNzg1NCwwLjAyNjkyIDQuNjYwNTEsMS4xNjQ0IDYuNTYyOSwzLjA0NTYxYzIuMjQ2NzMsMi4xMjAxNSA0LjAwNTkzLDYuMzgwNjMgMi43NTgxMiwxMS4wMTEzYy0xLjIxNzEyLDQuOTU3MSAtNS44OTQ2OCw5LjA1NjA2IC0xMS4zNTI5Nyw5LjkxNDIxYy01Ljg3MDgyLDEuMDQ2NjEgLTEyLjQ4MTQ1LC0xLjg0NzU2IC0xNS45NzI1NywtNy4wOTQwOGMtMy4zNjQ5OCwtNC43MjgyNiAtNC4wMDkzNCwtMTEuNjQ3MzUgLTEuNTQ3ODIsLTE3LjEzNjE3YzIuNzAwMTcsLTYuMzIwMDYgNy44NTg0NCwtOS4xODA1NyA5LjM3MjE3LC05LjkwNzQ4YzcuMjc4ODYsLTMuNjM0NTQgMTUuMDU4ODgsLTEuMjM1MDcgMTUuMzg2MTcsLTEuMTM0MTFjMi4wOTMzMSwwLjQ5NDcgNy45MTI5OSwyLjQ0MzIyIDEyLjQzNzEzLDguNjI1MjljMy40Nzc0OSw0LjY1MDg2IDYuMjk2OTgsMTMuMzM2NzMgMi43MTM4LDIyLjQyOTgxYy0zLjI3MjkzLDguOTYxODMgLTEyLjU5MDU1LDE1Ljc2OTg1IC0yMi42Mzc3NiwxNi40OTMzOWMtMC43ODc1NSwwLjA3NDA0IC0xLjU4NTMyLDAuMTE0NDIgLTIuMzc5NjksMC4xMTQ0MmMtOS43NTA2LDAgLTE5LjYyNzM0LC01LjYyMDA3IC0yNC41ODEwNiwtMTQuMjQ4NzN6IiBzdHJva2U9Im5vbmUiIHN0cm9rZS13aWR0aD0iMSIvPjwvZz48L2c+PC9zdmc+";

  let newColorType = "";
  let overlayImageContainer = "";
  const vm = Scratch.vm;
  const fontMenu = [
    "Scratch", "Sans Serif", "Serif",
    "Handwriting", "Marker", "Curly", "Pixel"
  ];  

  const xmlEscape = function (unsafe) {
    return Scratch.Cast.toString(unsafe).replace(/[<>&'"]/g, c => {
      switch (c) {
        case "<": return "&lt;";
        case ">": return "&gt;";
        case "&": return "&amp;";
        case "'": return "&apos;";
        case "\"": return "&quot;";
      }
    });
  };

  class BetterInputSP {
    constructor() {
      this.activeOverlays = []; this.activeUI = []; this.askBoxPromises = [];
      this.isWaitingForInput = false; this.isDropdownOpen = false;
      this.userInput = " "; this.defaultValue = "";
      this.textBoxX = 0; this.textBoxY = 0;
      this.askBoxInfo = [0, 1]; this.appendTarget = ["window", false];
      this.forceInput = "Disabled";
      this.overlayInput = null;
      this.uiOrder = ["question", "input", "buttons"];

      this.optionList = ["Option 1", "Option 2", "Option 3"];
      this.sliderInfo = [0, 100, 50];
      this.Timeout = 0;

      this.shadowEnabled = true;
      this.isInputEnabled = "Enabled";
      this.DropdownText = "Dropdown";
      this.fontSize = "14px";
      this.textAlign = "left";
      this.fontFamily = "Sans Serif";
       // overlay + Image, input, dropdown button 
      this.mainUIinfo = {
        // Border Radius
        overlayRad: 5, 
        inputRad: 4,
        dropBtnRad: 5,
        // Border Information
        overlayBord: "1px none #000000",
        inputBord: "1px solid #000000",
        dropBtnBord: "1px none #000000",
        // Text Padding
        overlayPad: "15px",
        inputPad: "5px",
        dropBtnPad: "5px 10px",
        // Text Shadow
        overlayTxtShad: "none",
        inputTxtShad: "none",
        dropBtnTxtShad: "none",
        // Outline: Color + Thickness
        overlayOutline: ["", 0],
        inputOutline: ["", 0],
        dropBtnOutline: ["", 0]
      };
      this.lastPressBtn = "";
      this.buttonJSON = {
        "Submit": {
          color: "#0074D9", textColor: "#ffffff",
          name: "Submit", image: "", imgScale: 100,
          borderRadius: 5, border: "1px none #000000",
          padding: "5px 10px", dropShadow: "none", outline: ["", 0]
        },
        "Cancel": {
          color: "#d9534f", textColor: "#ffffff",
          name: "Cancel", image: "", imgScale: 100,
          borderRadius: 5, border: "1px none #000000",
          padding: "5px 10px", dropShadow: "none", outline: ["", 0]
        },
      };

      this.questionColor = "#000000";
      this.inputColor = "#000000";
      this.textBoxColor = ["#ffffff"];
      this.inputFieldColor = "#ffffff";
      this.dropdownButtonColor = ["#5f5f5f", "#ffffff"];
      this.overlayImage = [" ", " ", " "];

      this.Blur = 0; this.Brightness = 0; this.Opacity = 100;
      this.Invert = 0; this.Saturation = 100; this.Hue = 0;
      this.Sepia = 0; this.Contrast = 100; this.Scale = 100; 
      this.SkewX = 0; this.SkewY = 0; this.Rotation = 90;
      this.imgScale = [100, 100, 100];
      this.shadowS = [0, 0, 5, "#000000"];
    }

    getInfo() {
      return {
        id: "BetterInputSP",
        name: "Better Input",
        color1: "#9400ff",
        color2: "#7800cd",
        color3: "#6900b3",
        menuIconURI,
        blockIconURI,
        blocks: [
          {
            opcode: "askAndWait",
            blockType: Scratch.BlockType.COMMAND,
            text: "ask [question] and wait",
            arguments: {
              question: { type: Scratch.ArgumentType.STRING, defaultValue: "What is your name?" }
            },
          },
          {
            opcode: "askAndWaitForInput",
            blockType: Scratch.BlockType.REPORTER,
            text: "ask [question] and wait",
            arguments: {
              question: { type: Scratch.ArgumentType.STRING, defaultValue: "What is your name?" }
            },
          },
          {
            opcode: "getUserInput", blockType: Scratch.BlockType.REPORTER,
            text: "user input"
          },
          {
            opcode: "setDefaultV",
            blockType: Scratch.BlockType.COMMAND,
            text: "set default value to [defaultV]",
            arguments: {
              defaultV: { type: Scratch.ArgumentType.STRING, defaultValue: "My Name Is..." }
            },
          },
          {
            opcode: "removeAskBoxes", blockType: Scratch.BlockType.COMMAND,
            text: "remove all ask boxes"
          },
          { blockType: Scratch.BlockType.LABEL, text: "Formatting" },
          {
            opcode: "setEnable", blockType: Scratch.BlockType.COMMAND,
            hideFromPalette: true, text: "set [ENABLE_MENU] to be [ACTION]",
            arguments: {
              ENABLE_MENU: { type: Scratch.ArgumentType.STRING, menu: "enableMenu" },
              ACTION: { type: Scratch.ArgumentType.STRING, menu: "inputActionMenu" }
            },
          },
          {
            opcode: "getBoxCount", blockType: Scratch.BlockType.REPORTER,
            hideFromPalette: true, text: "box count"
          },
          {
            opcode: "getMaxCount", blockType: Scratch.BlockType.REPORTER,
            hideFromPalette: true, text: "box limit"
          },
          {
            opcode: "setFontSize",
            blockType: Scratch.BlockType.COMMAND,
            text: "set font size to [SIZE]",
            blockIconURI: formatIcon,
            arguments: {
              SIZE: { type: Scratch.ArgumentType.NUMBER, defaultValue: 14 }
            },
          },
          {
            opcode: "setTextAlignment",
            blockType: Scratch.BlockType.COMMAND,
            text: "set alignment to [ALIGNMENT]",
            blockIconURI: formatIcon,
            arguments: {
              ALIGNMENT: { type: Scratch.ArgumentType.STRING, menu: "alignmentMenu" }
            },
          },
          {
            opcode: "setFontFamily",
            blockType: Scratch.BlockType.COMMAND,
            text: "set font to [FONT]",
            blockIconURI: formatIcon,
            arguments: {
              FONT: { type: Scratch.ArgumentType.STRING, menu: "fontMenu" }
            },
          },
          {
            opcode: "setDropShadow",
            blockType: Scratch.BlockType.COMMAND,
            text: "set [ELEMENT] shadow to x [x] y [y] z [z] color [COLOR]",
            arguments: {
              ELEMENT: { type: Scratch.ArgumentType.STRING, menu: "textsMenu" },
              x: { type: Scratch.ArgumentType.NUMBER, defaultValue: 0 },
              y: { type: Scratch.ArgumentType.NUMBER, defaultValue: 0 },
              z: { type: Scratch.ArgumentType.NUMBER, defaultValue: 2 },
              COLOR: { type: Scratch.ArgumentType.COLOR, defaultValue: "#ff0000" }
            },
          },
          {
            opcode: "setOutline",
            blockType: Scratch.BlockType.COMMAND,
            text: "set [ELEMENT] outline to [COLOR] thickness [THICK]",
            arguments: {
              ELEMENT: { type: Scratch.ArgumentType.STRING, menu: "textsMenu" },
              COLOR: { type: Scratch.ArgumentType.COLOR, defaultValue: "#ff0000" },
              THICK: { type: Scratch.ArgumentType.NUMBER, defaultValue: 5 }
            },
          },
          "---",
          {
            opcode: "setInputType",
            blockType: Scratch.BlockType.COMMAND,
            text: "set Input Box to be [ACTION]",
            blockIconURI: formatIcon,
            arguments: {
              ACTION: { type: Scratch.ArgumentType.STRING, menu: "inputActionMenu" }
            },
          },
          {
            opcode: "setDropdown",
            blockType: Scratch.BlockType.COMMAND,
            text: "set dropdown options to array: [DROPDOWN]",
            blockIconURI: formatIcon,
            arguments: {
              DROPDOWN: { type: Scratch.ArgumentType.STRING, defaultValue: "[\"Option 1\", \"Option 2\", \"Option 3\"]" }
            },
          },
          {
            opcode: "setSlider",
            blockType: Scratch.BlockType.COMMAND,
            text: "set slider to min: [MIN] max: [MAX] default: [DEFAULT]",
            blockIconURI: formatIcon,
            arguments: {
              MIN: { type: Scratch.ArgumentType.NUMBER, defaultValue: 0 },
              MAX: { type: Scratch.ArgumentType.NUMBER, defaultValue: 100 },
              DEFAULT: { type: Scratch.ArgumentType.NUMBER, defaultValue: 50 }
            },
          },
          { blockType: Scratch.BlockType.LABEL, text: "Buttons" },
          {
            opcode: "setButton",
            blockType: Scratch.BlockType.COMMAND,
            text: "[BUTTON] button named [NAME]",
            blockIconURI: formatIcon,
            arguments: {
              BUTTON: { type: Scratch.ArgumentType.STRING, menu: "buttonType" },
              NAME: { type: Scratch.ArgumentType.STRING, defaultValue: "Submit" }
            },
          },
          {
            opcode: "deleteAllButtons", blockType: Scratch.BlockType.COMMAND,
            text: "remove all buttons", blockIconURI: formatIcon
          },
          {
            opcode: "setButtonText",
            blockType: Scratch.BlockType.COMMAND,
            text: "set [BUTTON_MENU] button name to [TEXT]",
            blockIconURI: formatIcon,
            arguments: {
              BUTTON_MENU: { type: Scratch.ArgumentType.STRING, menu: "buttonMenu" },
              TEXT: { type: Scratch.ArgumentType.STRING, defaultValue: "my dropdown" }
            },
          },
          {
            opcode: "lastButton", blockType: Scratch.BlockType.REPORTER,
            text: "last pressed button", blockIconURI: formatIcon
          },
          { blockType: Scratch.BlockType.LABEL, text: "Positioning" },
          {
            opcode: "setPrePosition",
            blockType: Scratch.BlockType.COMMAND,
            text: "preset textbox position to x: [X] y: [Y]",
            blockIconURI: formatIcon,
            arguments: {
              X: { type: Scratch.ArgumentType.NUMBER, defaultValue: 0 },
              Y: { type: Scratch.ArgumentType.NUMBER, defaultValue: 0 }
            },
          },
          {
            opcode: "setPosition",
            blockType: Scratch.BlockType.COMMAND,
            text: "set textbox position to x: [X] y: [Y]",
            blockIconURI: formatIcon,
            arguments: {
              X: { type: Scratch.ArgumentType.NUMBER, defaultValue: 0 },
              Y: { type: Scratch.ArgumentType.NUMBER, defaultValue: 0 }
            },
          },
          {
            opcode: "changePosition",
            blockType: Scratch.BlockType.COMMAND,
            text: "change textbox position by x: [X] y: [Y]",
            blockIconURI: formatIcon,
            arguments: {
              X: { type: Scratch.ArgumentType.NUMBER, defaultValue: 5 },
              Y: { type: Scratch.ArgumentType.NUMBER, defaultValue: 0 }
            },
          },
          {
            opcode: "getXpos", blockType: Scratch.BlockType.REPORTER,
            blockIconURI: formatIcon, text: "x position"
          },
          {
            opcode: "getYpos", blockType: Scratch.BlockType.REPORTER,
            blockIconURI: formatIcon, text: "y position"
          },
          {
            opcode: "setDirection",
            blockType: Scratch.BlockType.COMMAND,
            text: "set direction to [ROTATE]",
            blockIconURI: formatIcon,
            arguments: {
              ROTATE: { type: Scratch.ArgumentType.ANGLE, defaultValue: 90 }
            },
          },
          {
            opcode: "changeDirection",
            blockType: Scratch.BlockType.COMMAND,
            text: "change direction by [ROTATE]",
            blockIconURI: formatIcon,
            arguments: {
              ROTATE: { type: Scratch.ArgumentType.ANGLE, defaultValue: 15 }
            },
          },
          {
            opcode: "reportDirection", blockType: Scratch.BlockType.REPORTER,
            text: "direction", blockIconURI: formatIcon
          },
          { blockType: Scratch.BlockType.LABEL, text: "Visual Settings" },
          {
            opcode: "setColorSettings",
            blockType: Scratch.BlockType.COMMAND,
            text: "set [COLOR_TYPE] color to [COLOR]",
            blockIconURI: colorIcon,
            arguments: {
              COLOR_TYPE: { type: Scratch.ArgumentType.STRING, menu: "colorSettingsMenu" },
              COLOR: { type: Scratch.ArgumentType.COLOR, defaultValue: "#000000" }
            },
          },
          {
            opcode: "setGradient", blockType: Scratch.BlockType.COMMAND,
            text: "set [COLOR_TYPE] color to gradient with [COLOR1] and [COLOR2] with direction [DIR]",
            hideFromPalette: true, //deprecated but needed for support
            arguments: {
              COLOR_TYPE: { type: Scratch.ArgumentType.STRING, menu: "elementMenu" },
              COLOR1: { type: Scratch.ArgumentType.COLOR }, COLOR2: { type: Scratch.ArgumentType.COLOR },
              DIR: { type: Scratch.ArgumentType.ANGLE }
            },
          },
          {
            opcode: "setCircleGradient", blockType: Scratch.BlockType.COMMAND,
            text: "set [COLOR_TYPE] color to radial gradient with [COLOR1] and [COLOR2] at x [X] y [Y]",
            hideFromPalette: true, //deprecated but needed for support
            arguments: {
              COLOR_TYPE: { type: Scratch.ArgumentType.STRING, menu: "elementMenu" },
              COLOR1: { type: Scratch.ArgumentType.COLOR }, COLOR2: { type: Scratch.ArgumentType.COLOR },
              X: { type: Scratch.ArgumentType.NUMBER }, Y: { type: Scratch.ArgumentType.NUMBER }
            },
          },
          "---",
          {
            opcode: "setImage",
            blockType: Scratch.BlockType.COMMAND,
            text: "set [ELEMENT] image to [IMAGE]",
            blockIconURI: colorIcon,
            arguments: {
              ELEMENT: { type: Scratch.ArgumentType.STRING, menu: "elementMenu" },
              IMAGE: { type: Scratch.ArgumentType.STRING, defaultValue: "input-url-here" }
            },
          },
          {
            opcode: "scaleImage",
            blockType: Scratch.BlockType.COMMAND,
            text: "scale [ELEMENT] image to [SCALE]%",
            blockIconURI: colorIcon,
            arguments: {
              ELEMENT: { type: Scratch.ArgumentType.STRING, menu: "elementMenu" },
              SCALE: { type: Scratch.ArgumentType.NUMBER, defaultValue: 100 }
            },
          },
          "---",
          {
            opcode: "enableShadow",
            blockType: Scratch.BlockType.COMMAND,
            text: "set box shadow to be [ACTION]",
            blockIconURI: colorIcon,
            arguments: {
              ACTION: { type: Scratch.ArgumentType.STRING, menu: "buttonActionMenu" }
            },
          },
          {
            opcode: "setShadow",
            blockType: Scratch.BlockType.COMMAND,
            text: "set box shadow [SHADOW] to [AMT]",
            blockIconURI: colorIcon,
            arguments: {
              SHADOW: { type: Scratch.ArgumentType.STRING, menu: "shadowStuff" },
              AMT: { type: Scratch.ArgumentType.NUMBER, defaultValue: 5 }
            },
          },
          "---",
          {
            opcode: "setBorder",
            blockType: Scratch.BlockType.COMMAND,
            text: "set [ELEMENT] border to [TYPE] color [COLOR] width [WIDTH]",
            blockIconURI: colorIcon,
            arguments: {
              ELEMENT: { type: Scratch.ArgumentType.STRING, menu: "elementMenu" },
              TYPE: { type: Scratch.ArgumentType.STRING, menu: "borderTypes" },
              COLOR: { type: Scratch.ArgumentType.COLOR },
              WIDTH: { type: Scratch.ArgumentType.NUMBER, defaultValue: 5 },
            },
          },
          {
            opcode: "setBorderRadius",
            blockType: Scratch.BlockType.COMMAND,
            text: "set [ELEMENT] border radius to [VALUE]",
            blockIconURI: colorIcon,
            arguments: {
              ELEMENT: { type: Scratch.ArgumentType.STRING, menu: "elementMenu" },
              VALUE: { type: Scratch.ArgumentType.NUMBER, defaultValue: 5 },
            },
          },
          {
            opcode: "setPadding",
            blockType: Scratch.BlockType.COMMAND,
            text: "set [ELEMENT] padding to T: [N1] B: [N3] L: [N4] R: [N2]",
            blockIconURI: colorIcon,
            arguments: {
              ELEMENT: { type: Scratch.ArgumentType.STRING, menu: "elementMenu" },
              N1: { type: Scratch.ArgumentType.NUMBER, defaultValue: 5 },
              N2: { type: Scratch.ArgumentType.NUMBER, defaultValue: 5 },
              N3: { type: Scratch.ArgumentType.NUMBER, defaultValue: 5 },
              N4: { type: Scratch.ArgumentType.NUMBER, defaultValue: 5 }
            },
          },
          { blockType: Scratch.BlockType.LABEL, text: "Effects" },
          {
            opcode: "resetEffect",
            blockType: Scratch.BlockType.COMMAND,
            text: "reset effects",
            blockIconURI: effectIcon
          },
          {
            opcode: "setEffect",
            blockType: Scratch.BlockType.COMMAND,
            text: "set effect [EFFECT] to [AMT]",
            blockIconURI: effectIcon,
            arguments: {
              EFFECT: { type: Scratch.ArgumentType.STRING, menu: "effectMenu" },
              AMT: { type: Scratch.ArgumentType.NUMBER, defaultValue: 5 },
            },
          },
          {
            opcode: "changeEffect",
            blockType: Scratch.BlockType.COMMAND,
            text: "change effect [EFFECT] by [AMT]",
            blockIconURI: effectIcon,
            arguments: {
              EFFECT: { type: Scratch.ArgumentType.STRING, menu: "effectMenu" },
              AMT: { type: Scratch.ArgumentType.NUMBER, defaultValue: 5 }
            },
          },
          {
            opcode: "showEffect",
            blockType: Scratch.BlockType.REPORTER,
            text: "effect [EFFECT]",
            blockIconURI: effectIcon,
            arguments: {
              EFFECT: { type: Scratch.ArgumentType.STRING, menu: "effectMenu" }
            },
          },
          "---",
          {
            opcode: "setTimeout",
            blockType: Scratch.BlockType.COMMAND,
            text: "when submitted delete textbox after [TIME] secs",
            blockIconURI: effectIcon,
            arguments: {
              TIME: { type: Scratch.ArgumentType.NUMBER, defaultValue: 5 }
            },
          },
          {
            opcode: "reportTimeout",
            blockType: Scratch.BlockType.REPORTER,
            text: "current textbox timeout",
            blockIconURI: effectIcon
          },
          { blockType: Scratch.BlockType.LABEL, text: "Operations" },
          {
            opcode: "setUI",
            blockType: Scratch.BlockType.COMMAND,
            text: "set UI order to [ARRAY]",
            arguments: {
              ARRAY: { type: Scratch.ArgumentType.STRING, defaultValue: "[\"question\", \"input\", \"buttons\"]" }
            },
          },
          {
            opcode: "getUIOrder",
            blockType: Scratch.BlockType.REPORTER,
            text: "UI order"
          },
          "---",
          {
            opcode: "setAppend",
            blockType: Scratch.BlockType.COMMAND,
            text: "append next textbox to [TARGET]",
            arguments: {
              TARGET: { type: Scratch.ArgumentType.STRING, menu: "appendMenu" }
            },
          },
          {
            opcode: "setFocus",
            blockType: Scratch.BlockType.COMMAND,
            text: "toggle focus mode to [TYPE]",
            arguments: {
              TYPE: { type: Scratch.ArgumentType.STRING, menu: "buttonActionMenu" }
            },
          },
          "---",
          {
            opcode: "isWaitingInput",
            blockType: Scratch.BlockType.BOOLEAN,
            text: "is waiting?"
          },
          {
            opcode: "isDropdown",
            blockType: Scratch.BlockType.BOOLEAN,
            text: "is dropdown open?"
          },
          {
            opcode: "setSubmitEvent",
            blockType: Scratch.BlockType.COMMAND,
            text: "set force input to [ENTER]",
            arguments: {
              ENTER: { type: Scratch.ArgumentType.STRING, menu: "enterMenu" }
            },
          },
          {
            opcode: "setMaxBoxCount",
            blockType: Scratch.BlockType.COMMAND,
            text: "set max box count to: [MAX]",
            arguments: {
              MAX: { type: Scratch.ArgumentType.NUMBER, defaultValue: 1 }
            },
          },
          {
            opcode: "getBoxInfo",
            blockType: Scratch.BlockType.REPORTER,
            text: "textbox [INFO]",
            arguments: {
              INFO: { type: Scratch.ArgumentType.STRING, menu: "boxInfo" }
            },
          },
        ],
        menus: {
          enableMenu: { acceptReporters: true, items: ["Button 2", "Button 3", "Button 4", "Textbox Shadow"] },
          // ^ Old Menu ^ (Needed for V2 Support)
          fontMenu: { acceptReporters: true, items: "allFonts" },
          buttonMenu: {
            acceptReporters: true,
            items: this.allButtons(["Dropdown"], false),
          },
          elementMenu: {
            acceptReporters: true,
            items: this.allButtons(["Textbox", "Input Box", "Dropdown Button"], false),
          },
          colorSettingsMenu: {
            acceptReporters: true,
            items: this.allButtons([
              "Textbox", "Question Text", "Textbox Shadow",
              "Input Text", "Input Box",
              "Dropdown Button", "Dropdown Text"
            ], true),
          },
          textsMenu: {
            acceptReporters: true,
            items: this.allButtons(["Question Text", "Input Text", "Dropdown Text"], true, true),
          },
          appendMenu: ["window", "canvas"],
          buttonType: { acceptReporters: true, items: ["add", "remove"] },
          buttonActionMenu: { acceptReporters: true, items: ["Enabled", "Disabled"] },
          alignmentMenu: { acceptReporters: true, items: ["left", "right", "center"] },
          shadowStuff: { acceptReporters: true, items: ["Size", "X", "Y"] },
          boxInfo: {
            acceptReporters: true,
            items: ["count", "limit", "button count", "button names"],
          },
          inputActionMenu: {
            acceptReporters: true,
            items: [
              "None", "Text", "Password", "Number", "Color",
              "Dropdown", "Multi-Select Dropdown",
              "Horizontal Slider", "Vertical Slider"
            ],
          },
          effectMenu: {
            acceptReporters: true,
            items: [
              "Blur", "Brightness", "Opacity",
              "Invert", "Saturation", "Hue",
              "Sepia", "Contrast",
              "Scale", "SkewX", "SkewY",
            ],
          },
          enterMenu: {
            acceptReporters: true,
            items: ["Disabled", "Enter Key", "Shift + Enter Key"],
          },
          borderTypes: {
            acceptReporters: true,
            items: [
              "none", "solid", "dotted", "dashed",
              "double", "groove", "ridge", "inset", "outset"
            ],
          }
        },
      };
    }

    allFonts() {
      const customFonts = Scratch.vm.runtime.fontManager
        ? Scratch.vm.runtime.fontManager.getFonts().map((i) => ({
            text: i.name, value: i.family
          }))
        : [];
      return [ ...fontMenu, ...customFonts ];
    }

    allButtons(array, enableTxt, justTxt) {
      let customBtn = Object.keys(this.buttonJSON);
      if (justTxt) customBtn = customBtn.map(btn => btn + " Text");
      else if (enableTxt) customBtn.forEach((btn) => { customBtn.push(btn + " Text") });
      return [ ...array, ...customBtn ];
    }

    updateOverlayPos(overlay) {
      if (this.Rotation > 359) this.Rotation = 0;
      else if (this.Rotation < 1) this.Rotation = 360;
      if (this.textBoxX !== null && this.textBoxY !== null) {
        if (this.appendTarget[0] === "window") {
          overlay.style.left = `${50 + this.textBoxX}%`;
          overlay.style.top = `${50 + this.textBoxY}%`;
        }
        overlay.style.transform = `
          translate${this.appendTarget[0] === "window" ? "(-50%, -50%)" : `(${-50 + this.textBoxX}%, ${-50 + this.textBoxY}%)` }
          SkewX(${this.SkewX}deg) SkewY(${this.SkewY}deg)
          rotate(${this.Rotation - 90}deg) scale(${this.Scale / 100})
        `;
      } else {
        overlay.style.left = "50%";
        overlay.style.top = "50%";
      }
    }
    updateOverlay(overlay) {
      const newOpacity =  this.Opacity / 100;
      const newBrightness = this.Brightness + 100;
      overlay.style.backgroundImage = "";
      overlay.style[this.textBoxColor[0].includes("gradient") ? "backgroundImage" : "backgroundColor"] = this.textBoxColor[0];
      overlay.style.boxShadow = this.shadowEnabled ? `${this.shadowS[0]}px ${this.shadowS[1]}px ${this.shadowS[2]}px ${this.shadowS[3]}` : "none";
      overlay.style.transform = `
        translate${this.appendTarget[0] === "window" ? "(-50%, -50%)" : `(${-50 + this.textBoxX}%, ${-50 + this.textBoxY}%)` }
        SkewX(${this.SkewX}deg) SkewY(${this.SkewY}deg)
        rotate(${this.Rotation - 90}deg) scale(${this.Scale / 100})
      `;
      overlay.style.filter = `
        blur(${this.Blur}px) brightness(${newBrightness}%)
        invert(${this.Invert}%) saturate(${this.Saturation}%)
        hue-rotate(${this.Hue}deg) sepia(${this.Sepia}%)
        contrast(${this.Contrast}%)
      `;
      overlay.style.opacity = newOpacity;
      overlay.style.border = this.mainUIinfo.overlayBord;
      overlay.style.padding = this.mainUIinfo.overlayPad;
      overlay.style.fontFamily = this.fontFamily;
      overlay.style.textAlign = this.textAlign;
      overlay.style.borderRadius = `${this.mainUIinfo.overlayRad}px`;
      overlayImageContainer.style.borderRadius = `${this.mainUIinfo.overlayRad}px`;
      overlayImageContainer.style.background = "";
      this.setImageStyles(overlayImageContainer, this.overlayImage[0], this.imgScale[0]);
      this.updateButtonImages(overlay);
    }
    updateButtonImages(overlay) {
      let text = overlay.querySelector(".question");
      if (text) {
        text.style.color = this.questionColor;
        text.style.textShadow = this.mainUIinfo.overlayTxtShad;
        this.tryOutline(text, this.mainUIinfo.overlayOutline[0], this.mainUIinfo.overlayOutline[1]);
      }
      const inputField = overlay.querySelector("input");
      if (inputField) {
        inputField.style.width = this.isInputEnabled === "Color" ? "100%" : "auto";
        inputField.style.background = "";
        inputField.style.fontFamily = this.fontFamily;
        inputField.style[this.inputFieldColor.includes("gradient") ? "backgroundImage" : "backgroundColor"] = this.inputFieldColor;
        inputField.style.color = this.inputColor;
        inputField.style.textShadow = this.mainUIinfo.inputTxtShad;
        this.tryOutline(inputField, this.mainUIinfo.inputOutline[0], this.mainUIinfo.inputOutline[1]);
        inputField.style.border = this.mainUIinfo.inputBord;
        inputField.style.borderRadius = `${this.mainUIinfo.inputRad}px`;
        inputField.style.padding = this.mainUIinfo.inputPad;
        this.setImageStyles(inputField, this.overlayImage[1], this.imgScale[1]);
      }

      const dropBtn = overlay.querySelector("button.dropbtn");
      if (dropBtn) {
        dropBtn.style.backgroundImage = "";
        dropBtn.style.fontFamily = this.fontFamily;
        dropBtn.style.color = this.dropdownButtonColor[1];
        dropBtn.style.borderRadius = `${this.mainUIinfo.dropBtnRad}px`;
        dropBtn.style.border = this.mainUIinfo.dropBtnBord;
        dropBtn.style.padding = this.mainUIinfo.dropBtnPad;
        dropBtn.style.textShadow = this.mainUIinfo.dropBtnTxtShad;
        this.tryOutline(dropBtn, this.mainUIinfo.dropBtnOutline[0], this.mainUIinfo.dropBtnOutline[1]);
        dropBtn.style[this.dropdownButtonColor[0].includes("gradient") ? "backgroundImage" : "backgroundColor"] = this.dropdownButtonColor[0];
        this.setImageStyles(dropBtn, this.overlayImage[2], this.imgScale[2]);
      }
      const buttonContainer = overlay.querySelector(".button-container");
      if (buttonContainer) {
        const buttons = buttonContainer.querySelectorAll("button");
        buttons.forEach((button, index) => {
          const buttonName = Object.keys(this.buttonJSON)[index];
          const buttonInfo = this.buttonJSON[buttonName];
          if (buttonInfo) {
            button.style.color = buttonInfo.textColor;
            button.style.fontFamily = this.fontFamily;
            button.style.borderRadius = `${buttonInfo.borderRadius}px`;
            button.style.border = buttonInfo.border;
            button.style.padding = buttonInfo.padding;
            button.style.textShadow = buttonInfo.dropShadow;
            this.tryOutline(button, buttonInfo.outline[0], buttonInfo.outline[1]);
            button.style.background = "";
            button.style[buttonInfo.color.includes("gradient") ? "backgroundImage" : "background"] = buttonInfo.color;
            this.setImageStyles(button, buttonInfo.image, buttonInfo.imgScale);
          }
        });
      }
    }
    tryOutline(element, color, thick) {
      element.style.webkitTextStrokeColor = color;
      element.style.webkitTextStrokeWidth = `${thick}px`;
      //multi-platform support cuz we cant have nice things
      element.style.textStrokeColor = color;
      element.style.textStrokeWidth = `${thick}px`;
      element.style.mozTextStrokeColor = color;
      element.style.mozTextStrokeWidth = `${thick}px`;
    }

    setImageStyles(element, url, scale) {
      if (Scratch.Cast.toString(url).length > 5) {
        Scratch.canFetch(encodeURI(url)).then((canFetch) => {
          if (canFetch) {
            element.style.background = `url(${encodeURI(url)})`;
            element.style.backgroundSize = `${scale}%`;
          } else { console.log("Cannot fetch content from the URL") }
        });
      }
    }

    showEffect(args) { return this[args.EFFECT] }

    setEffect(args) {
      this[args.EFFECT] = args.AMT;
      this.activeOverlays.forEach((overlay) => { this.updateOverlay(overlay) });
    }

    changeEffect(args) {
      const effect = args.EFFECT;
      this[effect] = this[effect] + args.AMT;
      this.activeOverlays.forEach((overlay) => { this.updateOverlay(overlay) });
    }

    resetEffect() {
      this.Blur = 0; this.Brightness = 0; this.Opacity = 100; this.Invert = 0;
      this.Saturation = 100; this.Hue = 0; this.Sepia = 0; this.Contrast = 100;
      this.Scale = 100; this.SkewX = 0; this.SkewY = 0;
      this.activeOverlays.forEach((overlay) => { this.updateOverlay(overlay) });
    }

    setColorSettings(args) {
      const colorType = args.COLOR_TYPE;
      const colorValue = args.COLOR;
      const colorTypeMap = {
        "Question Text": () => this.questionColor = colorValue,
        "Input Text": () => this.inputColor = colorValue,
        "Textbox": () => { this.textBoxColor[0] = colorValue; this.overlayImage[0] = " "; },
        "Textbox Shadow": () => { this.shadowS[3] = colorValue },
        "Input Box": () => { this.inputFieldColor = colorValue; this.overlayImage[1] = " "; },
        "Dropdown Button": () => { this.dropdownButtonColor[0] = colorValue; this.overlayImage[2] = " "; },
        "Dropdown Text": () => this.dropdownButtonColor[1] = colorValue,
      };
      const buttonInfo = this.buttonJSON[colorType] || this.buttonJSON[colorType.replace(" Text", "")];
      if (buttonInfo) {
        if (colorType.includes(" Text")) {
          buttonInfo.textColor = colorValue;
        } else {
          buttonInfo.color = colorValue;
          buttonInfo.image = " ";
        }
      }
      const applyColor = colorTypeMap[colorType];
      if (applyColor) applyColor();
      this.activeOverlays.forEach(overlay => this.updateOverlay(overlay));
    }

    findGradientType(menu) {
      const colorTypeMap = {
        Textbox: { newColorType: "textBoxColor", ind: 0 },
        "Dropdown Button": { newColorType: "dropdownButtonColor", ind: 2 }
      };
      if (colorTypeMap[menu]) {
        const { newColorType, ind } = colorTypeMap[menu];
        this.overlayImage[ind] = " ";
        return newColorType;
      } else if (this.buttonJSON[menu]) { return ["button", menu] }
      return menu;
    }

    setGradient(args) {
      if (args.COLOR_TYPE === "Input Box") throw new Error ("As of Better Input V4, this Option no Longer Works");
      const newColorType = this.findGradientType(args.COLOR_TYPE);
      const gradientColor = `linear-gradient(${args.DIR - 90}deg, ${args.COLOR2}, ${args.COLOR1})`;
      if (newColorType[0] !== "button") this[newColorType][0] = gradientColor;
      else this.buttonJSON[newColorType[1]].color = gradientColor;
      this.activeOverlays.forEach((overlay) => { this.updateOverlay(overlay) });
    }
    setCircleGradient(args) {
      const newColorType = this.findGradientType(args.COLOR_TYPE);
      const newPos = [args.X + 50, args.Y + 50];
      const gradientColor = `radial-gradient(circle at ${newPos[0]}% ${newPos[1]}%, ${args.COLOR2}, ${args.COLOR1})`;
      if (newColorType[0] !== "button") this[newColorType][0] = gradientColor;
      else this.buttonJSON[newColorType[1]].color = gradientColor;
      this.activeOverlays.forEach((overlay) => { this.updateOverlay(overlay) });
    }

    callStyling(element, value, type, elements) {
      const elementID = elements[element];
      if (elementID !== undefined) this.mainUIinfo[elementID] = value;
      else if (this.buttonJSON[element]) this.buttonJSON[element][type] = value;
      this.activeOverlays.forEach(overlay => this.updateOverlay(overlay));
    }

    setBorder(args) {
      const width = Scratch.Cast.toNumber(args.WIDTH);
      const string = `${width}px ${args.TYPE} ${args.COLOR}`;
      this.callStyling(
        args.ELEMENT, string, "border",
        { Textbox: "overlayBord", "Input Box": "inputBord", "Dropdown Button": "dropBtnBord" }
      );
    }

    setBorderRadius(args) {
      this.callStyling(
        args.ELEMENT, Math.max(args.VALUE, 0), "borderRadius",
        { Textbox: "overlayRad", "Input Box": "inputRad", "Dropdown Button": "dropBtnRad" }
      );
    }

    setPadding(args) {
      const casted = [
        Scratch.Cast.toNumber(args.N1), Scratch.Cast.toNumber(args.N2),
        Scratch.Cast.toNumber(args.N3), Scratch.Cast.toNumber(args.N4)
      ];
      let pad = `${casted[0]}px ${casted[1]}px ${casted[2]}px ${casted[3]}px`;
      this.callStyling(
        args.ELEMENT, pad, "padding",
        { Textbox: "overlayPad", "Input Box": "inputPad", "Dropdown Button": "dropBtnPad" }
      );
    }

    setDropShadow(args) {
      const casted = [
        Scratch.Cast.toNumber(args.x), Scratch.Cast.toNumber(args.y),
        Scratch.Cast.toNumber(args.z),
      ];
      let shadow = args.z === 0 ? "none" : `${casted[0]}px ${casted[1] * -1}px ${casted[2]}px ${args.COLOR}`;
      this.callStyling(
        args.ELEMENT.slice(0, -5), shadow, "dropShadow",
        { "Question": "overlayTxtShad", "Input": "inputTxtShad", "Dropdown": "dropBtnTxtShad" }
      );
    }

    setOutline(args) {
      const thick = Scratch.Cast.toNumber(args.THICK);
      this.callStyling(
        args.ELEMENT.slice(0, -5), [args.COLOR, thick], "outline",
        { "Question": "overlayOutline", "Input": "inputOutline", "Dropdown": "dropBtnOutline" }
      );
    }

    setShadow(args) {
      const shadowMap = { Size: 2, X: 0, Y: 1 };
      const propertyIndex = shadowMap[args.SHADOW];
      if (propertyIndex !== undefined) this.shadowS[propertyIndex] = args.AMT;
      this.activeOverlays.forEach(overlay => this.updateOverlay(overlay));
    }

    setImage(args) {
      const elementMap = { Textbox: 0, "Input Box": 1, "Dropdown Button": 2 };
      const elementIndex = elementMap[args.ELEMENT];
      if (elementIndex !== undefined) this.overlayImage[elementIndex] = args.IMAGE;
      else if (this.buttonJSON[args.ELEMENT]) this.buttonJSON[args.ELEMENT].image = args.IMAGE;
      this.activeOverlays.forEach(overlay => this.updateOverlay(overlay));
    }

    scaleImage(args) {
      const elementMap = { Textbox: 0, "Input Box": 1, "Dropdown Button": 2 };
      const elementIndex = elementMap[args.ELEMENT];
      if (elementIndex !== undefined) this.imgScale[elementIndex] = args.SCALE;
      else if (this.buttonJSON[args.ELEMENT]) this.buttonJSON[args.ELEMENT].imgScale = args.SCALE;
      this.activeOverlays.forEach(overlay => this.updateOverlay(overlay));
    }

    setDirection(args) {
      this.Rotation = Scratch.Cast.toNumber(args.ROTATE);
      this.activeOverlays.forEach((overlay) => { this.updateOverlay(overlay) });
    }

    changeDirection(args) {
      this.Rotation = this.Rotation + Scratch.Cast.toNumber(args.ROTATE);
      this.activeOverlays.forEach((overlay) => { this.updateOverlay(overlay) });
    }

    reportDirection() { return this.Rotation }

    setPrePosition(args) {
      this.textBoxX = Scratch.Cast.toNumber(args.X) / (screen.width / 400);
      this.textBoxY = Scratch.Cast.toNumber(args.Y) / (screen.height / -300);
    }

    setPosition(args) {
      this.textBoxX = Scratch.Cast.toNumber(args.X) / (screen.width / 400);
      this.textBoxY = Scratch.Cast.toNumber(args.Y) / (screen.height / -300);
      this.activeOverlays.forEach((overlay) => { this.updateOverlayPos(overlay) });
    }

    changePosition(args) {
      this.textBoxX = this.textBoxX + Scratch.Cast.toNumber(args.X) / (screen.width / 400);
      this.textBoxY = this.textBoxY + Scratch.Cast.toNumber(args.Y) / (screen.height / -300);
      this.activeOverlays.forEach((overlay) => { this.updateOverlayPos(overlay) });
    }

    getXpos() { return this.textBoxX * (screen.width / 400) }
    getYpos() { return this.textBoxY * (screen.height / -300) }

    setFontSize(args) { this.fontSize = args.SIZE + "px" }

    setTextAlignment(args) {
      this.textAlign = args.ALIGNMENT;
      this.activeOverlays.forEach((overlay) => { this.updateOverlay(overlay) });
    }

    setFontFamily(args) {
      this.fontFamily = args.FONT;
      this.activeOverlays.forEach((overlay) => { this.updateOverlay(overlay) });
    }

    setSlider(args) { this.sliderInfo = [args.MIN, args.MAX, args.DEFAULT] }

    setInputType(args) {
      if (args.ACTION === "Text" || args.ACTION ===  "None") {
        this.isInputEnabled = args.ACTION === "Text" ? "Enabled" : "Disabled";
      } else { this.isInputEnabled = args.ACTION }
    }

    enableShadow(args) { this.shadowEnabled = args.ACTION === "Enabled" }

    setButtonText(args) {
      const buttonMenu = args.BUTTON_MENU;
      const text = args.TEXT;
      if (buttonMenu === "Dropdown") {
        this.DropdownText = text;
      } else if (this.buttonJSON[buttonMenu]) {
        this.buttonJSON[buttonMenu].name = text;
        Scratch.vm.extensionManager.refreshBlocks();
      }
    }

    setDropdown(args) {
      try {
        this.optionList = JSON.parse(args.DROPDOWN);
      } catch { this.optionList = ["Undefined Array Error"] }
    }

    removeAskBoxes() {
      const overlaysToRemove = [];
      this.activeOverlays.forEach((overlay) => {
        if (overlay) {
          if (this.appendTarget[0] === "window" && overlay.parentNode) {
            overlay.parentNode.removeChild(overlay);
          } else if (overlay.parentNode.parentNode !== document.documentElement) {
            overlay.parentNode.parentNode.removeChild(overlay.parentNode);
          }
          overlaysToRemove.push(overlay);
        }
        if (this.askBoxPromises) {
          const index = this.activeOverlays.indexOf(overlay);
          if (index !== -1) this.askBoxPromises[index].resolve("removed");
        }
      });
      this.askBoxPromises = [];
      this.activeOverlays = this.activeOverlays.filter((overlay) => !overlaysToRemove.includes(overlay));
      this.activeUI = [];
      this.askBoxInfo[0] = 0;
      // Remove "Bugged" Boxes, bugged boxes is a intentional feature, ask for more info
      const bugged = document.querySelectorAll(`[class^="SP-ask-box"]`);
      bugged.forEach((box) => { box.parentNode.removeChild(box) });
    }

    askAndWaitForInput(args) {
      if (this.askBoxInfo[0] < this.askBoxInfo[1] ) {
        return this.askAndWait(args).then(() => { return this.getUserInput() });
      }
    }

    askAndWait(args) {
      if (this.askBoxInfo[0] < this.askBoxInfo[1]) {
        const question = args.question;
        this.isWaitingForInput = true;
        this.lastPressBtn = "";
        this.askBoxInfo[0]++;
        let selectedOptions = [];
        return new Promise((resolve) => {
          const askBoxPromise = { resolve };
          this.askBoxPromises.push(askBoxPromise);
          const overlay = document.createElement("div");
          overlay.classList.add("SP-ask-box");
          overlay.style.pointerEvents = "auto";
          overlay.style.position = "fixed";
          overlay.style.zIndex = "9999";
          overlay.style.fontSize = this.fontSize;
          overlay.style.left = this.appendTarget[0] === "window" ? `${50 + this.textBoxX}%` : "0%";
          overlay.style.top = this.appendTarget[0] === "window" ? `${50 + this.textBoxY}%` : "0%";

          const focusBG = document.createElement("div");
          focusBG.style.cssText = "pointer-events: auto; position: fixed; width: 100%; height: 100%; background-color: rgba(0, 0, 0, 0.5); z-index: 9998;";
          focusBG.className = "SP-ask-boxBG";
          focusBG.id = this.appendTarget[0];
          focusBG.style.left = this.appendTarget[0] === "window" ? "0%" : "-50%";
          focusBG.style.top = this.appendTarget[0] === "window" ? "0%" : "-50%";

          overlayImageContainer = document.createElement("div");
          overlayImageContainer.style.width = "100%";
          overlayImageContainer.style.height = "100%";
          overlayImageContainer.style.position = "absolute";
          overlayImageContainer.style.top = 0;
          overlayImageContainer.style.left = 0;
          overlayImageContainer.style.zIndex = "-1";
          if (this.forceInput !== "Disabled") {
            const overlayInput = this.forceInput === "Enter Key" ? "Enter" : this.forceInput === "Shift + Enter Key" ? "ShiftEnter" : this.forceInput;
            const handleKeydown = (event) => {
              if ((overlayInput === "ShiftEnter" && event.shiftKey && event.key === "Enter") || event.key === overlayInput) {
                this.userInput = inputField.value;
                this.closeOverlay(overlay);
                resolve();
              }
            };
            const observer = new MutationObserver((mutationsList) => {
              for (const mutation of mutationsList) {
                if (mutation.type === "childList" && !document.contains(overlay)) {
                  document.removeEventListener("keydown", handleKeydown);
                  observer.disconnect();
                }
              }
            });
            observer.observe(document.body, { childList: true });
            document.addEventListener("keydown", handleKeydown);
          }

          const questionText = document.createElement("div");
          questionText.classList.add("question");
          questionText.style.fontSize = this.fontSize;
          if (this.uiOrder[0] !== "question") questionText.style.marginTop = "10px";
          if (this.uiOrder[0] === "question") questionText.style.marginBottom = "10px";
          questionText.innerHTML = xmlEscape(question).replace(/\n/g, "<br>");

          const inputField = document.createElement("input");
          inputField.style.display = this.isInputEnabled ? "block" : "none";
          inputField.style.fontSize = this.fontSize;
          inputField.style.margin = "0 auto";
          inputField.type = this.isInputEnabled.toLowerCase();
          inputField.addEventListener("input", () => { this.userInput = inputField.value });
          const buttonContainer = document.createElement("div");
          buttonContainer.classList.add("button-container");
          for (const buttonName in this.buttonJSON) {
            const buttonInfo = this.buttonJSON[buttonName];
            if (buttonInfo.name.includes("<newline>")) {
              const lineBreak = document.createElement("br");
              buttonContainer.appendChild(lineBreak);
            } else {
              const button = document.createElement("button");
              if (this.uiOrder[0] !== "buttons") button.style.marginTop = "10px";
              if (this.uiOrder[2] !== "buttons") button.style.marginBottom = "10px";
              button.style.marginRight = "5px";
              button.style.cursor = "pointer";
              button.innerHTML = xmlEscape(buttonInfo.name).replace(/\n/g, "<br>");
              button.style.display = "inline-block";
              button.addEventListener("click", () => {
                this.lastPressBtn = buttonInfo.name;
                this.userInput = this.isInputEnabled === "Disabled" ? buttonInfo.name : inputField.value;
                this.closeOverlay(overlay);
                resolve();
              });
              buttonContainer.appendChild(button);
            }
          }

          const dropdown = document.createElement("div");
          dropdown.className = "dropdown";
          const dropdownButton = document.createElement("button");
          dropdownButton.className = "dropbtn";
          dropdownButton.innerHTML = xmlEscape(this.DropdownText).replace(/\n/g, "<br>");
          const dropdownContent = document.createElement("div");
          dropdownContent.id = "myDropdown";
          dropdownContent.className = "dropdown-content";
          dropdownContent.style.display = "none";

          const optionLabels = this.optionList;
          optionLabels.forEach((label, index) => {
            const optionLabel = document.createElement("label");
            optionLabel.style.color = this.questionColor;
            optionLabel.textContent = "";
            const optionRadio = document.createElement("input");
            optionRadio.type = this.isInputEnabled === "Dropdown" ? "radio" : "checkbox";
            optionRadio.name = "dropdownOptions";
            optionRadio.value = index;
            optionRadio.classList.add("dropdown-radio");
            optionRadio.addEventListener("click", () => {
              if (this.isInputEnabled === "Multi-Select Dropdown") {
                if (selectedOptions.includes(label)) {
                  selectedOptions = selectedOptions.filter(item => item !== label);
                } else { selectedOptions.push(label) }
                inputField.value = selectedOptions.length > 0 ? JSON.stringify(selectedOptions) : "";
              } else { inputField.value = label }
              this.userInput = inputField.value;
            });
            optionLabel.appendChild(optionRadio);
            optionLabel.appendChild(document.createTextNode(" " + label));
            optionLabel.appendChild(document.createElement("br"));
            dropdownContent.appendChild(optionLabel);
          });
          document.body.appendChild(dropdown);
          dropdownButton.addEventListener("click", () => {
            this.lastPressBtn = this.DropdownText;
            dropdownContent.style.display = this.isDropdownOpen ? "none" : "block";
            this.isDropdownOpen = !this.isDropdownOpen;
          });

          const sliderContainer = document.createElement("div");
          sliderContainer.classList.add("slider-container");
          const slider = document.createElement("input");
          if (this.isInputEnabled.includes("Vertical")) slider.style.transform = "rotate(270deg)";
          slider.type = "range";
          slider.min = this.sliderInfo[0];
          slider.max = this.sliderInfo[1];
          slider.value = this.sliderInfo[2];
          if (this.isInputEnabled.includes("Vertical")) {
            for (let i = 0; i < 3; i++) { sliderContainer.appendChild(document.createElement("br")) }
            sliderContainer.appendChild(slider);
            for (let i = 0; i < 4; i++) { sliderContainer.appendChild(document.createElement("br")) }
          } else { sliderContainer.appendChild(slider) }
          const valueDisplay = document.createElement("span");
          valueDisplay.classList.add("slider-value");
          sliderContainer.appendChild(valueDisplay);
          valueDisplay.style.color = this.questionColor;
          valueDisplay.textContent = slider.value;
          slider.addEventListener("input", () => {
            valueDisplay.textContent = slider.value;
            inputField.value = slider.value;
            this.userInput = valueDisplay.textContent;
          });
          for (const item of this.uiOrder) {
            switch (item) {
              case "question": { overlay.appendChild(questionText); break }
              case "input":
                if (this.isInputEnabled !== "Disabled") {
                  if (this.isInputEnabled === "Enabled" || this.isInputEnabled === "Color" ||
                    this.isInputEnabled === "Number" || this.isInputEnabled === "Password"
                  ) {
                    overlay.appendChild(inputField);
                  } else if (this.isInputEnabled.includes("Dropdown")) {
                    overlay.appendChild(dropdownButton);
                    overlay.appendChild(dropdownContent);
                    overlay.appendChild(document.createElement("br"));
                  } else {
                    overlay.appendChild(sliderContainer);
                    overlay.appendChild(valueDisplay);
                    overlay.appendChild(document.createElement("br"));
                  }
                }
                break;
              case "buttons": { overlay.appendChild(buttonContainer); break }
            }
          }
          overlay.appendChild(overlayImageContainer);
          if (this.appendTarget[0] === "window") {
            document.body.appendChild(overlay);
            if (this.appendTarget[1]) document.body.appendChild(focusBG);
          }
          inputField.focus();
          inputField.value = this.defaultValue;
          this.activeOverlays.push(overlay);
          this.activeUI.push({ overlay: { button: buttonContainer, dropdown: dropdownButton, input: inputField } });
          if (this.appendTarget[0] === "window") {
            const resizeHandler = () => {
              overlay.style.left = `${this.textBoxX !== null ? 50 + this.textBoxX : 50}%`;
              overlay.style.top = `${this.textBoxY !== null ? 50 + this.textBoxY : 50}%`;
            };
            document.addEventListener("fullscreenchange", resizeHandler);
            document.addEventListener("webkitfullscreenchange", resizeHandler);
            document.addEventListener("mozfullscreenchange", resizeHandler);
            document.addEventListener("MSFullscreenChange", resizeHandler);
            const observer = new MutationObserver((mutationsList) => {
              for (const mutation of mutationsList) {
                if (mutation.type === "childList" && Array.from(mutation.removedNodes).includes(overlay)) {
                  document.removeEventListener("fullscreenchange", resizeHandler);
                  document.removeEventListener("webkitfullscreenchange", resizeHandler);
                  document.removeEventListener("mozfullscreenchange", resizeHandler);
                  document.removeEventListener("MSFullscreenChange", resizeHandler);
                  observer.disconnect();
                }
              }
            });
            observer.observe(overlay.parentNode, { childList: true });
            document.body.appendChild(overlay);
          } else {
            if (this.appendTarget[1]) vm.renderer.addOverlay(focusBG, "scale-centered");
            vm.renderer.addOverlay(overlay, "scale-centered");
          }
          inputField.focus();
          this.updateOverlay(overlay);
        });
      }
    }
    closeOverlay(overlay) {
      if (this.askBoxInfo[0] < 2) this.isWaitingForInput = false;
      this.isDropdownOpen = false;
      this.askBoxInfo[0]--;
      let usedBG = document.querySelectorAll(".SP-ask-boxBG");
      usedBG = usedBG[usedBG.length - 1];
      // ^ Prioritizes Textboxes on Window
      const index = this.activeOverlays.indexOf(overlay);
      setTimeout(() => {
        if (index !== -1) {
          this.activeOverlays.splice(index, 1);
          this.askBoxPromises.splice(index, 1);
        }
        delete this.activeUI[overlay];
        if (this.appendTarget[0] === "window") document.body.removeChild(overlay);
        else vm.renderer.removeOverlay(overlay);
        if (usedBG) {
          if (usedBG.id === "window") document.body.removeChild(usedBG);
          else vm.renderer.removeOverlay(usedBG);
        }
      }, this.Timeout * 1000);
    }

    setButton(args) {
      if (args.BUTTON === "add") {
        this.buttonJSON[args.NAME] = {
          borderRadius: 5, border: "1px none #000000",
          color: "#0074D9", textColor: "#ffffff",
          name: args.NAME, padding: "5px 10px",
          image: "", imgScale: 100,
          dropShadow: "none", outline: ["", 0]
        };
      } else { delete this.buttonJSON[args.NAME] }
      Scratch.vm.extensionManager.refreshBlocks();
    }

    deleteAllButtons() {
      this.buttonJSON = {};
      Scratch.vm.extensionManager.refreshBlocks();
    }

    lastButton() { return this.lastPressBtn }

    isWaitingInput() { return this.isWaitingForInput }

    isDropdown() { return this.isDropdownOpen }

    setMaxBoxCount(args) { this.askBoxInfo[1] = args.MAX }

    setTimeout(args) {
      this.Timeout = args.TIME;
      this.Condition = args.CONDITION;
    }

    reportTimeout() { return this.Timeout }

    getUserInput() { return this.userInput === null ? "" : this.userInput }

    getBoxInfo(args) {
      if (args.INFO.includes("button")) {
        const buttons = Object.keys(this.buttonJSON);
        return args.INFO.includes("names") ? JSON.stringify(buttons) : buttons.length;
      } else { return this.askBoxInfo[args.INFO === "count" ? 0 : 1] }
    }

    setSubmitEvent(args) { this.forceInput = args.ENTER }

    setDefaultV(args) { this.defaultValue = args.defaultV }

    setAppend(args) { this.appendTarget[0] = args.TARGET }
    setFocus(args) { this.appendTarget[1] = args.TYPE === "Enabled" }

    setUI(args) {
      let array;
      try { array = JSON.parse(args.ARRAY.toLowerCase()) } catch { return }
      if (!Array.isArray(array)) return;
      const allowedUI = ["question", "input", "buttons"];
      let filteredArray = [...new Set(array.filter(element => allowedUI.includes(element)))];
      allowedUI.forEach(element => {
        if (!filteredArray.includes(element)) filteredArray.push(element);
      });
      this.uiOrder = filteredArray;
    }

    getUIOrder() { return JSON.stringify(this.uiOrder) }

    setEnable() { throw new Error("This Block has been removed since Better Input V3. Please use the New Powerful Blocks") }
    getBoxCount() { return this.askBoxInfo[0] } //Legacy
    getMaxCount() { return this.askBoxInfo[1] } //Legacy
  }

  Scratch.extensions.register(new BetterInputSP());
})(Scratch);
","https://extensions.turbowarp.org/true-fantom/math.js","data:text/plain;base64,// CL5
// ID: cl5
// Description: CloudLink 5 protocol extension. Unleash your potential.
// By: MikeDEV
// License: MIT

(() => {
  // src/index.ts
  var PeerConnection = class extends RTCPeerConnection {
    user;
    channelIdCounter;
    hasPublicKey;
    constructor(configuration) {
      super(configuration);
    }
  };
  (function (Scratch2) {
    if (!Scratch2.extensions.unsandboxed) {
      throw new Error("Sandboxed mode is not supported in this extension.");
    }
    const infoBlurb =
      "This comment is auto-generated by the CL5 extension. Do NOT manually edit this comment, as it can cause problems restoring your networked variables/lists! However, you are free resize or minimize this comment, and you can simply delete this comment to reset the extension.\n\n";
    const configEnd = "// _clconfig_";
    function uid() {
      const soup_ =
        "!#%()*+,-./:;=?@[]^_`{|}~ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
      const length = 20;
      const soupLength = soup_.length;
      const id = [];
      for (let i = 0; i < length; i++) {
        id[i] = soup_.charAt(Math.random() * soupLength);
      }
      return id.join("");
    }
    function makeValueSafeForScratch(data) {
      try {
        if (typeof data === "string") {
          return data;
        } else if (typeof data === "object" && data !== null) {
          return JSON.stringify(data);
        } else {
          return data.toString();
        }
      } catch (error) {
        console.error(`Error making data ${data} vm-safe: ${error}`);
        return data.toString();
      }
    }
    class OmegaEncryption {
      // Define types
      secrets;
      // Store derived key secrets (remotePeerId: sharedKey)
      keyPair;
      // ECDH P-256 key pair (public: spki, private: pkcs8)
      constructor() {
        this.secrets = /* @__PURE__ */ new Map();
        this.keyPair = null;
      }
      async generateKeyPair() {
        if (this.keyPair) {
          console.warn("Key pair already exists");
          return null;
        }
        this.keyPair = await window.crypto.subtle.generateKey(
          {
            name: "ECDH",
            namedCurve: "P-256",
          },
          true,
          ["deriveKey", "deriveBits"]
        );
        return this.keyPair;
      }
      async exportPublicKey() {
        if (!this.keyPair) {
          console.warn("Key pair does not exist");
          return null;
        }
        const exportedKey = await window.crypto.subtle.exportKey(
          "spki",
          this.keyPair.publicKey
        );
        return this.arrayBufferToBase64(new Uint8Array(exportedKey));
      }
      async importPublicKey(exportedKey) {
        const exportedKeyArray = this.base64ToArrayBuffer(exportedKey);
        const publicKey = await window.crypto.subtle.importKey(
          "spki",
          exportedKeyArray,
          {
            name: "ECDH",
            namedCurve: "P-256",
          },
          true,
          []
        );
        return publicKey;
      }
      async deriveSharedKey(publicKey, privateKey) {
        const sharedKey = await window.crypto.subtle.deriveKey(
          {
            name: "ECDH",
            public: publicKey,
          },
          privateKey,
          {
            name: "AES-GCM",
            length: 256,
          },
          true,
          ["encrypt", "decrypt"]
        );
        return sharedKey;
      }
      async encryptMessage(message, sharedKey) {
        const encodedMessage = new TextEncoder().encode(message);
        const iv = window.crypto.getRandomValues(new Uint8Array(12));
        const encryptedMessage = await window.crypto.subtle.encrypt(
          {
            name: "AES-GCM",
            iv,
          },
          sharedKey,
          encodedMessage
        );
        const encryptedMessageArray = new Uint8Array(encryptedMessage);
        const encryptedMessageBase64 = this.arrayBufferToBase64(
          encryptedMessageArray
        );
        const ivBase64 = this.arrayBufferToBase64(iv);
        return { encryptedMessage: encryptedMessageBase64, iv: ivBase64 };
      }
      async decryptMessage(encryptedMessageBase64, ivBase64, sharedKey) {
        const encryptedMessageArray = this.base64ToArrayBuffer(
          encryptedMessageBase64
        );
        const iv = this.base64ToArrayBuffer(ivBase64);
        const decryptedMessage = await window.crypto.subtle.decrypt(
          {
            name: "AES-GCM",
            iv,
          },
          sharedKey,
          encryptedMessageArray
        );
        const decodedMessage = new TextDecoder().decode(decryptedMessage);
        return decodedMessage;
      }
      arrayBufferToBase64(buffer) {
        let binary = "";
        const bytes = new Uint8Array(buffer);
        for (let i = 0; i < bytes.byteLength; i++) {
          binary += String.fromCharCode(bytes[i]);
        }
        return btoa(binary);
      }
      base64ToArrayBuffer(base64) {
        const binary_string = window.atob(base64);
        const len = binary_string.length;
        const bytes = new Uint8Array(len);
        for (let i = 0; i < len; i++) {
          bytes[i] = binary_string.charCodeAt(i);
        }
        return bytes.buffer;
      }
      setSharedKey(remotePeerId, sharedKey) {
        this.secrets.set(remotePeerId, sharedKey);
      }
      getSharedKey(remotePeerId) {
        return this.secrets.get(remotePeerId);
      }
      setSharedKeyFromPublicKey(remotePeerId, publicKey) {
        return new Promise((resolve, reject) => {
          this.importPublicKey(publicKey)
            .then((pKey) => {
              this.deriveSharedKey(pKey, this.keyPair.privateKey)
                .then((sharedKey) => {
                  this.setSharedKey(remotePeerId, sharedKey);
                  resolve();
                })
                .catch((error) => {
                  console.error(
                    `Error deriving shared key for ${remotePeerId}: ${error}`
                  );
                  reject();
                });
            })
            .catch((error) => {
              console.error(
                `Error importing public key for ${remotePeerId}: ${error}`
              );
              reject();
            });
        });
      }
    }
    class OmegaRTC {
      // Define types
      encryption;
      signaling;
      configuration;
      peerConnections;
      voiceConnections;
      dataChannels;
      iceCandidates;
      messageHandlers;
      constructor(encryption, signaling) {
        this.encryption = encryption;
        this.signaling = signaling;
        this.configuration = {
          // Public STUN/TURN servers.
          iceServers: [
            { urls: "stun:vpn.mikedev101.cc:3478" },
            // STUN over TCP/UDP
            {
              urls: "turn:vpn.mikedev101.cc:3478",
              username: "free",
              credential: "free",
            },
            // TURN over TCP/UDP
            { urls: "stun:stun.l.google.com:19302" },
            // STUN over TCP/UDP
            { urls: "stun:freeturn.net:3478" },
            // STUN over TCP/UDP
            { urls: "stun:freeturn.net:5349" },
            // STUN over TCP/UDP
            {
              urls: "turn:freeturn.net:3478",
              username: "free",
              credential: "free",
            },
            // TURN over TCP/UDP
            {
              urls: "turns:freeturn.net:5349",
              username: "free",
              credential: "free",
            },
            // TURN over TLS
          ],
          iceTransportPolicy: "all",
          // Set to 'relay' if you want TURN only.
        };
        this.peerConnections = /* @__PURE__ */ new Map();
        this.voiceConnections = /* @__PURE__ */ new Map();
        this.dataChannels = /* @__PURE__ */ new Map();
        this.iceCandidates = {};
        this.messageHandlers = {
          onIceCandidate: {},
          onIceGatheringDone: {},
          onChannelOpen: {},
          onChannelClose: {},
          onChannelMessage: {},
        };
      }
      getPeers() {
        const output = {};
        const peers = Array.from(this.peerConnections.keys());
        const cons = this.peerConnections;
        Array.from(peers).forEach((ulid) => {
          if (cons.get(ulid).connectionState == "connected")
            output[cons.get(ulid).user] = ulid;
        });
        return output;
      }
      getPeerChannels(remoteUserId) {
        if (!this.doesPeerExist(remoteUserId)) return [];
        return Array.from(this.dataChannels.get(remoteUserId).keys());
      }
      // Voice channel functions
      async createVoiceOffer(remoteUserId, remoteUserName) {
        const voiceConnection = this.createConnection(
          remoteUserId,
          remoteUserName,
          true
        );
        await this.handleVoiceStream(
          voiceConnection,
          remoteUserId,
          remoteUserName
        );
        try {
          const offer = await voiceConnection.createOffer();
          await voiceConnection.setLocalDescription(offer);
          return offer;
        } catch (error) {
          console.error(
            `Error creating voice offer for ${voiceConnection.user} (${remoteUserId}): ${error}`
          );
          return null;
        }
      }
      async createVoiceAnswer(remoteUserId, remoteUserName, offer) {
        const voiceConnection = this.createConnection(
          remoteUserId,
          remoteUserName,
          true
        );
        await this.handleVoiceStream(
          voiceConnection,
          remoteUserId,
          remoteUserName
        );
        try {
          await voiceConnection.setRemoteDescription(
            new RTCSessionDescription(offer)
          );
          const answer = await voiceConnection.createAnswer();
          await voiceConnection.setLocalDescription(answer);
          return answer;
        } catch (error) {
          console.error(
            `Error creating voice answer for ${voiceConnection.user} (${remoteUserId}): ${error}`
          );
          return null;
        }
      }
      async handleVoiceAnswer(remoteUserId, answer) {
        const voiceConnection = this.voiceConnections.get(remoteUserId);
        if (voiceConnection) {
          try {
            await voiceConnection.setRemoteDescription(
              new RTCSessionDescription(answer)
            );
          } catch (error) {
            console.error(
              `Error handling voice answer for ${voiceConnection.user} (${remoteUserId}): ${error}`
            );
          }
        } else {
          console.error(`Peer voice connection not found for ${remoteUserId}`);
        }
      }
      addVoiceIceCandidate(remoteUserId, iceCandidate) {
        const voiceConnection = this.voiceConnections.get(remoteUserId);
        if (voiceConnection) {
          try {
            const candidate = new RTCIceCandidate(iceCandidate);
            voiceConnection.addIceCandidate(candidate);
          } catch (error) {
            console.error(
              `Error adding voice ice candidate for ${voiceConnection.user} (${remoteUserId}): ${error}`
            );
          }
        } else {
          console.error(`Peer voice connection not found for ${remoteUserId}`);
        }
      }
      isVoiceConnectionOpen(remoteUserId) {
        if (!this.doesPeerExist(remoteUserId)) {
          return false;
        }
        const voiceConnection = this.voiceConnections.get(remoteUserId);
        return (
          voiceConnection != null && // Check if voice connection exists
          voiceConnection.getSenders().length > 0 && // Check if there are senders
          voiceConnection.getSenders()[0].track.readyState === "live"
        );
      }
      isVoiceConnectionMuted(remoteUserId) {
        if (!this.isVoiceConnectionOpen(remoteUserId)) return false;
        const voiceConnection = this.voiceConnections.get(remoteUserId);
        return (
          voiceConnection.getSenders().length > 0 && // Check if there are senders
          !voiceConnection.getSenders()[0].track.enabled
        );
      }
      changeMicState(remoteUserId, state) {
        if (!this.isVoiceConnectionOpen(remoteUserId)) return;
        const voiceConnection = this.voiceConnections.get(remoteUserId);
        const senders = voiceConnection.getSenders();
        for (const s of senders) {
          const t = s.track;
          if (t.kind !== "audio") {
            continue;
          }
          t.enabled = state;
        }
      }
      async createVoiceConnection(remoteUserId) {
        if (!this.doesPeerExist(remoteUserId)) return;
        if (this.isVoiceConnectionOpen(remoteUserId)) return;
        const sharedKey = await this.encryption.getSharedKey(remoteUserId);
        const remoteUserName = this.peerConnections.get(remoteUserId).user;
        const offer = await this.createVoiceOffer(remoteUserId, remoteUserName);
        if (sharedKey) {
          const { encryptedMessage, iv } = await this.encryption.encryptMessage(
            JSON.stringify(offer),
            sharedKey
          );
          this.signaling.sendOffer(
            remoteUserId,
            {
              type: 1,
              // voice
              contents: [encryptedMessage, iv],
            },
            null
          );
        } else {
          this.signaling.sendOffer(
            remoteUserId,
            {
              type: 1,
              // voice
              contents: offer,
            },
            null
          );
        }
      }
      closeVoiceConnection(remoteUserId) {
        if (!this.doesPeerExist(remoteUserId)) return;
        const voiceConnection = this.voiceConnections.get(remoteUserId);
        if (!voiceConnection) return;
        const senders = voiceConnection.getSenders();
        for (const s of senders) {
          const t = s.track;
          if (t.kind !== "audio") continue;
          t.stop();
        }
        voiceConnection.close();
        this.closeVoiceStream(remoteUserId);
      }
      // Data channel functions
      async createDataOffer(remoteUserId, remoteUserName) {
        const peerConnection = this.createConnection(
          remoteUserId,
          remoteUserName,
          false
        );
        this.createDefaultChannel(peerConnection, remoteUserId, remoteUserName);
        try {
          const offer = await peerConnection.createOffer();
          await peerConnection.setLocalDescription(offer);
          return offer;
        } catch (error) {
          console.error(
            `Error creating offer for ${peerConnection.user} (${remoteUserId}): ${error}`
          );
          return null;
        }
      }
      async createDataAnswer(remoteUserId, remoteUserName, offer) {
        const peerConnection = this.createConnection(
          remoteUserId,
          remoteUserName,
          false
        );
        this.createDefaultChannel(peerConnection, remoteUserId, remoteUserName);
        try {
          await peerConnection.setRemoteDescription(
            new RTCSessionDescription(offer)
          );
          const answer = await peerConnection.createAnswer();
          await peerConnection.setLocalDescription(answer);
          return answer;
        } catch (error) {
          console.error(
            `Error creating answer for ${peerConnection.user} (${remoteUserId}): ${error}`
          );
          return null;
        }
      }
      async handleDataAnswer(remoteUserId, answer) {
        const peerConnection = this.peerConnections.get(remoteUserId);
        if (peerConnection) {
          try {
            await peerConnection.setRemoteDescription(
              new RTCSessionDescription(answer)
            );
          } catch (error) {
            console.error(
              `Error handling answer for ${peerConnection.user} (${remoteUserId}): ${error}`
            );
          }
        } else {
          console.error(`Peer connection not found for ${remoteUserId}`);
        }
      }
      addDataIceCandidate(remoteUserId, iceCandidate) {
        const peerConnection = this.peerConnections.get(remoteUserId);
        if (peerConnection) {
          try {
            const candidate = new RTCIceCandidate(iceCandidate);
            peerConnection.addIceCandidate(candidate);
          } catch (error) {
            console.error(
              `Error adding ice candidate for ${peerConnection.user} (${remoteUserId}): ${error}`
            );
          }
        } else {
          console.error(
            `Peer connection not found for ${peerConnection.user} (${remoteUserId})`
          );
        }
      }
      // Common function for creating peer/voice connections
      createConnection(remoteUserId, remoteUserName, isAudioOnly) {
        const conn = new PeerConnection(this.configuration);
        conn.user = remoteUserName;
        conn.channelIdCounter = 0;
        conn.hasPublicKey = false;
        conn.onicecandidate = (event) => {
          if (event.candidate) {
            if (!this.iceCandidates[remoteUserId]) {
              this.iceCandidates[remoteUserId] = [];
            }
            this.iceCandidates[remoteUserId].push(event.candidate);
            if (this.messageHandlers.onIceCandidate[remoteUserId]) {
              this.messageHandlers.onIceCandidate[remoteUserId](
                event.candidate
              );
            }
          }
          if (event.target["iceGatheringState"] === "complete") {
            if (this.messageHandlers.onIceGatheringDone[remoteUserId]) {
              this.messageHandlers.onIceGatheringDone[remoteUserId]();
            }
          }
        };
        if (!isAudioOnly) {
          conn.ondatachannel = (event) => {
            const dataChannel = event.channel;
            this.handleDataChannel(dataChannel, remoteUserId, remoteUserName);
          };
        }
        conn.onconnectionstatechange = () => {
          switch (conn.connectionState) {
            case "new":
              console.log(`Peer ${remoteUserName} (${remoteUserId}) created.`);
              break;
            case "connecting":
              console.log(
                `Peer ${remoteUserName} (${remoteUserId}) connecting...`
              );
              break;
            case "connected":
              console.log(
                `Peer ${remoteUserName} (${remoteUserId}) connected.`
              );
              break;
            case "disconnected":
              console.log(
                `Peer ${remoteUserName} (${remoteUserId}) disconnecting...`
              );
              break;
            case "closed":
              console.log(
                `Peer ${remoteUserName} (${remoteUserId}) disconnected.`
              );
              if (isAudioOnly) this.closeVoiceStream(remoteUserId);
              else this.disconnectDataPeer(remoteUserId);
              break;
            case "failed":
              console.log(
                `Peer ${remoteUserName} (${remoteUserId}) connection failed.`
              );
              if (isAudioOnly) this.closeVoiceStream(remoteUserId);
              else this.disconnectDataPeer(remoteUserId);
              break;
            default:
              console.log(
                `Peer ${remoteUserName} (${remoteUserId}) connection state unknown.`
              );
              break;
          }
        };
        if (isAudioOnly) {
          conn.ontrack = (event) => {
            console.log(
              `Adding peer ${remoteUserId} audio stream... ${event.streams}`
            );
            for (const stream of event.streams) {
              const audioElement = document.createElement(`audio`);
              audioElement.id = `audio_${remoteUserId}`;
              audioElement.srcObject = stream;
              audioElement.autoplay = true;
              document.body.appendChild(audioElement);
            }
          };
        }
        if (isAudioOnly) this.voiceConnections.set(remoteUserId, conn);
        else this.peerConnections.set(remoteUserId, conn);
        return conn;
      }
      handleDataChannel(dataChannel, remoteUserId, remoteUserName) {
        const channel = dataChannel;
        if (!this.dataChannels.has(remoteUserId))
          this.dataChannels.set(remoteUserId, /* @__PURE__ */ new Map());
        channel.dataStorage = /* @__PURE__ */ new Map();
        channel.onmessage = (event) => {
          if (this.messageHandlers.onChannelMessage[remoteUserId]) {
            this.messageHandlers.onChannelMessage[remoteUserId](
              event.data,
              channel
            );
          }
        };
        channel.onopen = () => {
          console.log(
            `Data channel ${channel.label} with ${remoteUserName} (${remoteUserId}) opened`
          );
          if (this.messageHandlers.onChannelOpen[remoteUserId]) {
            this.messageHandlers.onChannelOpen[remoteUserId](channel.label);
          }
        };
        channel.onclose = () => {
          console.log(
            `Data channel ${channel.label} with ${remoteUserName} (${remoteUserId}) closed`
          );
          if (channel.label == "default") {
            this.disconnectDataPeer(remoteUserId);
            this.closeVoiceStream(remoteUserId);
          } else {
            this.dataChannels.get(remoteUserId).delete(channel.label);
          }
        };
        this.dataChannels.get(remoteUserId).set(channel.label, channel);
      }
      async handleVoiceStream(voiceConnection, remoteUserId, remoteUserName) {
        console.log(
          `Preparing to open voice stream channel with ${remoteUserName} (${remoteUserId})...`
        );
        await navigator.mediaDevices
          .getUserMedia({ audio: true })
          .then((stream) => {
            stream.getTracks().forEach((track) => {
              console.log(
                "Adding track:",
                track,
                `to peer ${remoteUserName} (${remoteUserId})...`
              );
              voiceConnection.addTrack(track, stream);
            });
            console.log(
              `Opened voice stream channel with ${remoteUserName} (${remoteUserId}).`
            );
          })
          .catch((err) => {
            console.error(
              `Error adding audio stream for peer ${remoteUserName} (${remoteUserId}):`,
              err
            );
          });
      }
      closeVoiceStream(remoteUserId) {
        const audioElement = document.getElementById(`audio_${remoteUserId}`);
        if (audioElement) {
          console.log(`Removing peer ${remoteUserId} audio stream...`);
          document.body.removeChild(audioElement);
        }
        this.voiceConnections.delete(remoteUserId);
        delete this.iceCandidates[remoteUserId];
      }
      createChannel(remoteUserId, label, ordered) {
        const peerConnection = this.peerConnections.get(remoteUserId);
        const dataChannel = peerConnection.createDataChannel(label, {
          negotiated: false,
          ordered,
          protocol: "clomega",
        });
        this.handleDataChannel(dataChannel, remoteUserId, peerConnection.user);
        return dataChannel;
      }
      doesPeerExist(remoteUserId) {
        if (!this.peerConnections.get(remoteUserId)) return false;
        return (
          this.peerConnections.get(remoteUserId).connectionState == "connected"
        );
      }
      doesPeerChannelExist(remoteUserId, channel) {
        if (!this.doesPeerExist(remoteUserId)) return false;
        return this.dataChannels.get(remoteUserId).has(channel);
      }
      createDefaultChannel(peerConnection, remoteUserId, remoteUserName) {
        const dataChannel = peerConnection.createDataChannel("default", {
          negotiated: true,
          id: 0,
          ordered: true,
          protocol: "clomega",
        });
        this.handleDataChannel(dataChannel, remoteUserId, remoteUserName);
        return dataChannel;
      }
      disconnectDataPeer(remoteUserId) {
        const peerConnection = this.peerConnections.get(remoteUserId);
        if (peerConnection) {
          const remoteUserName = peerConnection.user;
          peerConnection.close();
          this.peerConnections.delete(remoteUserId);
          delete this.iceCandidates[remoteUserId];
          if (this.dataChannels.has(remoteUserId)) {
            const channels = this.dataChannels.get(remoteUserId);
            for (const channel of channels.values()) {
              channel.close();
            }
            this.dataChannels.delete(remoteUserId);
          }
          console.log(`Disconnected peer ${remoteUserName} (${remoteUserId}).`);
        }
      }
      onIceCandidate(remoteUserId, callback) {
        this.messageHandlers.onIceCandidate[remoteUserId] = callback;
      }
      onIceGatheringDone(remoteUserId, callback) {
        this.messageHandlers.onIceGatheringDone[remoteUserId] = callback;
      }
      onChannelOpen(remoteUserId, callback) {
        this.messageHandlers.onChannelOpen[remoteUserId] = callback;
      }
      onChannelClose(callback) {
        this.messageHandlers.onChannelClose = callback;
      }
      onChannelMessage(remoteUserId, callback) {
        this.messageHandlers.onChannelMessage[remoteUserId] = callback;
      }
      broadcastData(channelLabel, opcode, payload, wait) {
        if (wait) {
          const promises = [];
          for (const remotePeerId of Object.values(this.getPeers())) {
            promises.push(
              OmegaRTCInstance.sendData(
                remotePeerId,
                channelLabel,
                opcode,
                payload,
                true
              )
            );
          }
          return Promise.all(promises);
        } else {
          for (const remotePeerId of Object.values(this.getPeers())) {
            OmegaRTCInstance.sendData(
              remotePeerId,
              channelLabel,
              opcode,
              payload,
              false
            );
          }
        }
      }
      sendData(remoteUserId, channelLabel, opcode, payload, wait) {
        const peer = this.dataChannels.get(remoteUserId);
        if (!peer) {
          return;
        }
        const channel = peer.get(channelLabel);
        if (!channel) {
          return;
        }
        if (wait) channel.bufferedAmountLowThreshold = 0;
        channel.send(
          JSON.stringify({
            opcode,
            payload,
          })
        );
        if (wait)
          return new Promise((resolve) => {
            channel.onbufferedamountlow = () => {
              resolve();
            };
          });
      }
      getChannelData(remoteUserId, channelLabel, channelDataType) {
        const peer = this.dataChannels.get(remoteUserId);
        if (!peer) return;
        const channel = peer.get(channelLabel);
        if (!channel) return;
        return channel.dataStorage.get(channelDataType);
      }
      removeIceCandidate(remoteUserId, candidate) {
        if (this.iceCandidates[remoteUserId].includes(candidate)) {
          this.iceCandidates[remoteUserId].splice(
            this.iceCandidates[remoteUserId].indexOf(candidate),
            1
          );
        }
      }
    }
    class OmegaSignaling {
      // Define types
      enableKeepalive;
      keepalive;
      messageHandlers;
      lobbyList;
      lobbyInfo;
      state;
      socket;
      runtime;
      constructor(runtime) {
        this.enableKeepalive = true;
        this.keepalive = null;
        this.runtime = runtime;
        this.messageHandlers = {
          onInitSuccess: null,
          onConnect: null,
          onClose: {},
          offer: null,
          answer: null,
          keepalive: null,
          onHostModeConfig: null,
          onPeerModeConfig: null,
          onModeConfigFailure: null,
          onNewHost: null,
          onAnticipate: null,
          onNewPeer: null,
          onPeerGone: {},
          onHostGone: {},
          onIceCandidateReceived: {},
          onOffer: null,
          onAnswer: null,
          listeners: {},
          onDiscover: null,
          onLobbyList: null,
          onLobbyInfo: null,
        };
        this.lobbyList = [];
        this.lobbyInfo = {};
        this.state = {
          user: "",
          // username
          id: "",
          // ULID
          game: "",
          // game name
          developer: "",
          // developer name
          mode: 0,
          // 0 - configuring, 1 - host, 2 - peer
          authenticated: false,
        };
      }
      Connect(url) {
        this.socket = new WebSocket(url);
        this.socket.onopen = () => {
          if (this.enableKeepalive) {
            this.sendMessage({ opcode: "KEEPALIVE" });
          }
          if (this.messageHandlers.onConnect) this.messageHandlers.onConnect();
        };
        this.socket.onclose = (event) => {
          this.state.id = "";
          this.state.user = "";
          this.state.developer = "";
          this.state.game = "";
          this.state.mode = 0;
          this.state.authenticated = false;
          this.socket = null;
          this.lobbyList = [];
          this.lobbyInfo = {};
          clearTimeout(this.keepalive);
          Object.keys(this.messageHandlers.onClose).forEach((tag) => {
            this.messageHandlers.onClose[tag](event);
          });
        };
        this.socket.onerror = (error) => {
          console.error("Signaling connection error:", error);
        };
        this.socket.onmessage = (event) => {
          try {
            const message = JSON.parse(event.data);
            this.handleMessage(message);
          } catch (error) {
            console.error("Error handling message:", error);
          }
        };
      }
      handleMessage(message) {
        const { opcode, payload, listener } = message;
        switch (opcode) {
          case "INIT_OK":
            console.log("Signaling login successful.");
            this.state.user = payload.user;
            this.state.id = payload.id;
            this.state.game = payload.game;
            this.state.developer = payload.developer;
            this.state.authenticated = true;
            if (this.messageHandlers.onInitSuccess)
              this.messageHandlers.onInitSuccess();
            break;
          case "ACK_HOST":
            console.log("Acknowledgement received: Operating in host mode.");
            if (this.messageHandlers.onHostModeConfig)
              this.messageHandlers.onHostModeConfig();
            this.state.mode = 1;
            break;
          case "ACK_PEER":
            console.log("Acknowledgement received: Operating in peer mode.");
            if (this.messageHandlers.onPeerModeConfig)
              this.messageHandlers.onPeerModeConfig();
            this.state.mode = 2;
            break;
          case "VIOLATION":
            console.error("Protocol violation: " + payload);
            break;
          case "WARNING":
            console.warn("Protocol warning: " + payload);
            break;
          case "CONFIG_REQUIRED":
            console.warn("Configuration required: " + payload);
            break;
          case "RELAY_OK":
            break;
          case "KEEPALIVE":
            this.keepalive = setTimeout(() => {
              this.sendMessage({ opcode: "KEEPALIVE" });
            }, 5e3);
            break;
          case "LOBBY_LIST":
            this.lobbyList = payload;
            if (this.messageHandlers.onLobbyList)
              this.messageHandlers.onLobbyList();
            break;
          case "LOBBY_INFO":
            this.lobbyInfo = payload;
            if (this.messageHandlers.onLobbyInfo)
              this.messageHandlers.onLobbyInfo();
            break;
          case "LOBBY_FULL":
            console.warn("Lobby is full.");
            if (this.messageHandlers.onModeConfigFailure)
              this.messageHandlers.onModeConfigFailure(opcode);
            break;
          case "LOBBY_EXISTS":
            console.warn("Lobby already exists.");
            if (this.messageHandlers.onModeConfigFailure)
              this.messageHandlers.onModeConfigFailure(opcode);
            break;
          case "LOBBY_NOTFOUND":
            console.warn("Lobby does not exist.");
            if (this.messageHandlers.onModeConfigFailure)
              this.messageHandlers.onModeConfigFailure(opcode);
            if (this.messageHandlers.onLobbyInfo)
              this.messageHandlers.onLobbyInfo();
            break;
          case "LOBBY_LOCKED":
            console.warn("Lobby is not accepting connections at this time.");
            if (this.messageHandlers.onModeConfigFailure)
              this.messageHandlers.onModeConfigFailure(opcode);
            break;
          case "PASSWORD_FAIL":
            console.warn(
              "Lobby is password protected and incorrect password was provided."
            );
            if (this.messageHandlers.onModeConfigFailure)
              this.messageHandlers.onModeConfigFailure(opcode);
            break;
          case "LOBBY_CLOSE":
            console.log(`Lobby ${payload} closed.`);
            if (this.state.mode == 1 || this.state.mode == 2) {
              console.log("Disconnecting from lobby..");
              this.Disconnect();
            }
            break;
          case "HOST_GONE":
            console.log("The host has left.");
            if (this.messageHandlers.onHostGone[payload])
              this.messageHandlers.onHostGone[payload]();
            break;
          case "PEER_GONE":
            console.log(`Peer ${payload} has left.`);
            if (this.messageHandlers.onPeerGone[payload])
              this.messageHandlers.onPeerGone[payload]();
            break;
          case "SESSION_EXISTS":
            console.warn("Protocol warning: Session already exists.");
            break;
          case "TOKEN_INVALID":
            console.warn("Protocol warning: Invalid token.");
            break;
          case "TOKEN_EXPIRED":
            console.warn("Protocol warning: Token expired.");
            break;
          case "TOKEN_ORIGIN_MISMATCH":
            console.warn(
              "Protocol warning: Attempted to use a token generated on a different domain."
            );
            break;
          case "DISCOVER":
            if (this.messageHandlers.onDiscover)
              this.messageHandlers.onDiscover(message);
            break;
          case "ANTICIPATE":
            if (this.messageHandlers.onAnticipate)
              this.messageHandlers.onAnticipate(message);
            break;
          case "NEW_PEER":
            if (this.messageHandlers.onNewPeer)
              this.messageHandlers.onNewPeer(message);
            break;
          case "NEW_HOST":
            if (this.messageHandlers.onNewHost)
              this.messageHandlers.onNewHost(message);
            break;
          case "MAKE_OFFER":
            if (this.messageHandlers.onOffer)
              this.messageHandlers.onOffer(message);
            break;
          case "MAKE_ANSWER":
            if (this.messageHandlers.onAnswer)
              this.messageHandlers.onAnswer(message);
            break;
          case "ICE":
            if (this.messageHandlers.onIceCandidateReceived)
              this.messageHandlers.onIceCandidateReceived(message);
            break;
        }
        if (this.messageHandlers[listener])
          this.messageHandlers[listener](message);
      }
      hostMode(
        lobby_id,
        allow_host_reclaim,
        allow_peers_to_claim_host,
        max_peers,
        password,
        pubkey,
        listener
      ) {
        this.sendMessage({
          opcode: "CONFIG_HOST",
          payload: {
            lobby_id,
            allow_host_reclaim,
            allow_peers_to_claim_host,
            max_peers,
            password,
            pubkey,
          },
          listener,
        });
      }
      peerMode(lobby_id, password, pubkey, listener) {
        this.sendMessage({
          opcode: "CONFIG_PEER",
          payload: {
            lobby_id,
            password,
            pubkey,
          },
          listener,
        });
      }
      authenticateWithToken(token, listener) {
        this.sendMessage({ opcode: "INIT", payload: token, listener });
      }
      sendOffer(recipient, offer, listener) {
        this.sendMessage({
          opcode: "MAKE_OFFER",
          payload: offer,
          recipient,
          listener,
        });
      }
      sendAnswer(recipient, answer, listener) {
        this.sendMessage({
          opcode: "MAKE_ANSWER",
          payload: answer,
          recipient,
          listener,
        });
      }
      sendIceCandidate(recipient, answer, listener) {
        this.sendMessage({
          opcode: "ICE",
          payload: answer,
          recipient,
          listener,
        });
      }
      sendGetLobbyList(listener) {
        this.sendMessage({ opcode: "LOBBY_LIST", listener });
      }
      sendGetLobbyInfo(payload, listener) {
        this.sendMessage({ opcode: "LOBBY_INFO", payload, listener });
      }
      Disconnect() {
        this.socket.close();
      }
      sendMessage(message) {
        if (this.socket.readyState === WebSocket.OPEN) {
          this.socket.send(JSON.stringify(message));
        } else {
          console.error(
            "WebSocket connection not open. Cannot send message:",
            message
          );
        }
      }
      onAnswer(callback) {
        this.messageHandlers.onAnswer = callback;
      }
      onPeerGone(remoteUserId, callback) {
        this.messageHandlers.onPeerGone[remoteUserId] = callback;
      }
      onHostGone(remoteUserId, callback) {
        this.messageHandlers.onHostGone[remoteUserId] = callback;
      }
      onDiscover(callback) {
        this.messageHandlers.onDiscover = callback;
      }
      onAnticipate(callback) {
        this.messageHandlers.onAnticipate = callback;
      }
      onNewHost(callback) {
        this.messageHandlers.onNewHost = callback;
      }
      onNewPeer(callback) {
        this.messageHandlers.onNewPeer = callback;
      }
      onHostModeConfig(callback) {
        this.messageHandlers.onHostModeConfig = callback;
      }
      onPeerModeConfig(callback) {
        this.messageHandlers.onPeerModeConfig = callback;
      }
      onModeConfigFailure(callback) {
        this.messageHandlers.onModeConfigFailure = callback;
      }
      onIceCandidateReceived(callback) {
        this.messageHandlers.onIceCandidateReceived = callback;
      }
      onListener(name, callback) {
        this.messageHandlers.listeners[name] = callback;
      }
      onConnect(callback) {
        this.messageHandlers.onConnect = callback;
      }
      onInitSuccess(callback) {
        this.messageHandlers.onInitSuccess = callback;
      }
      onOffer(callback) {
        this.messageHandlers.onOffer = callback;
      }
      onClose(tag, callback) {
        this.messageHandlers.onClose[tag] = callback;
      }
      onLobbyInfo(callback) {
        this.messageHandlers.onLobbyInfo = callback;
      }
      onLobbyList(callback) {
        this.messageHandlers.onLobbyList = callback;
      }
    }
    class NetworkedScratchData {
      WebRTC;
      blessVarTracker;
      blessListTracker;
      networkUpdateTracker;
      constructor(rtc) {
        this.WebRTC = rtc;
        this.blessVarTracker = [];
        this.blessListTracker = [];
        this.networkUpdateTracker = {};
      }
      // Create a function to convert a variable into a proxy
      createVariableProxy(myVar) {
        const eventHandlers = [];
        const runEvents = () => {
          eventHandlers.forEach((handler) => handler());
        };
        const proxy = new Proxy(myVar, {
          set(target, property, value) {
            if (property === "value") runEvents();
            target[property] = value;
            return true;
          },
        });
        proxy.on = (handler) => {
          eventHandlers.push(handler);
        };
        proxy.off = (handler) => {
          const index = eventHandlers.indexOf(handler);
          if (index !== -1) {
            eventHandlers.splice(index, 1);
          }
        };
        return proxy;
      }
      // Create a function to convert an array into a proxy
      createArrayProxy(myList) {
        const array = myList.value;
        const eventHandlers = [];
        const runEvents = (type, data) => {
          eventHandlers.forEach((handler) => handler(type, data));
        };
        const proxy = new Proxy(array, {
          set(target, property, value) {
            if (property === "length") {
              runEvents("length", value);
            } else if (!isNaN(Number(property))) {
              if (Number(property) < target.length) {
                runEvents("replace", { property, value });
              } else {
                runEvents("set", { property, value });
              }
            }
            target[property] = value;
            return true;
          },
        });
        proxy.on = (handler) => {
          eventHandlers.push(handler);
        };
        proxy.off = (handler) => {
          const index = eventHandlers.indexOf(handler);
          if (index !== -1) {
            eventHandlers.splice(index, 1);
          }
        };
        return proxy;
      }
      update(runtime) {
        this.blessListTracker.forEach((myListId) => {
          if (!this.networkUpdateTracker.hasOwnProperty(myListId)) {
            this.networkUpdateTracker[myListId] = {};
            this.networkUpdateTracker[myListId].current = false;
            this.networkUpdateTracker[myListId].last = true;
          }
          let exists = false;
          const validTargets = [];
          runtime.targets.forEach((target) => {
            if (target.lookupVariableById(myListId) != void 0 && !exists) {
              validTargets.push(target);
              exists = true;
            }
          });
          if (!exists) {
            delete this.networkUpdateTracker[myListId];
            this.blessListTracker.splice(
              this.blessListTracker.indexOf(myListId),
              1
            );
            backupSettings(runtime);
          }
          validTargets.forEach((target) => {
            if (!target.variables[myListId].value.hasOwnProperty("bless")) {
              const myList = target.variables[myListId];
              this.makeNetworkedList(myList);
              this.onListChange(myList, "reset", myList.value);
            }
          });
        });
        this.blessVarTracker.forEach((myVarId) => {
          if (!this.networkUpdateTracker.hasOwnProperty(myVarId)) {
            this.networkUpdateTracker[myVarId] = {};
            this.networkUpdateTracker[myVarId].current = false;
            this.networkUpdateTracker[myVarId].last = true;
          }
          let exists = false;
          const validTargets = [];
          runtime.targets.forEach((target) => {
            if (target.lookupVariableById(myVarId) != void 0 && !exists) {
              validTargets.push(target);
              exists = true;
            }
          });
          if (!exists) {
            delete this.networkUpdateTracker[myVarId];
            this.blessVarTracker.splice(
              this.blessVarTracker.indexOf(myVarId),
              1
            );
            backupSettings(runtime);
          }
          validTargets.forEach((target) => {
            if (!target.variables[myVarId].hasOwnProperty("bless")) {
              const myVar = target.variables[myVarId];
              this.makeNetworkedVariable(myVar);
              this.onVariableChange(myVar);
            }
          });
        });
      }
      onListChange(myList, eventType, eventData) {
        myList._monitorUpToDate = false;
        if (this.networkUpdateTracker[myList.id].current) {
          this.networkUpdateTracker[myList.id].current = false;
          this.networkUpdateTracker[myList.id].last = true;
        } else {
          switch (eventType) {
            case "reset":
              if (this.networkUpdateTracker[myList.id].last) {
                this.networkUpdateTracker[myList.id].last = false;
                return;
              }
              this.WebRTC.broadcastData(
                "default",
                "G_LIST",
                {
                  id: myList.id,
                  method: "reset",
                  value: eventData,
                },
                false
              );
              break;
            case "set":
              if (this.networkUpdateTracker[myList.id].last) {
                this.networkUpdateTracker[myList.id].last = false;
                return;
              }
              this.WebRTC.broadcastData(
                "default",
                "G_LIST",
                {
                  id: myList.id,
                  method: "set",
                  index: eventData.property,
                  value: eventData.value,
                },
                false
              );
              break;
            case "replace":
              if (this.networkUpdateTracker[myList.id].last) {
                this.networkUpdateTracker[myList.id].last = false;
                return;
              }
              this.WebRTC.broadcastData(
                "default",
                "G_LIST",
                {
                  id: myList.id,
                  method: "replace",
                  index: eventData.property,
                  value: eventData.value,
                },
                false
              );
              break;
            case "length":
              if (this.networkUpdateTracker[myList.id].last) {
                this.networkUpdateTracker[myList.id].last = false;
                return;
              }
              for (const remotePeerId of Object.values(
                this.WebRTC.getPeers()
              )) {
                this.WebRTC.sendData(
                  remotePeerId,
                  "default",
                  "G_LIST",
                  {
                    id: myList.id,
                    method: "length",
                    value: eventData,
                  },
                  false
                );
              }
              break;
          }
        }
      }
      onVariableChange(myVar) {
        if (this.networkUpdateTracker[myVar.id].current) {
          this.networkUpdateTracker[myVar.id].current = false;
          this.networkUpdateTracker[myVar.id].last = true;
        } else {
          if (this.networkUpdateTracker[myVar.id].last) {
            this.networkUpdateTracker[myVar.id].last = false;
            return;
          }
          for (const remotePeerId of Object.values(this.WebRTC.getPeers())) {
            this.WebRTC.sendData(
              remotePeerId,
              "default",
              "G_VAR",
              {
                id: myVar.id,
                value: myVar.value,
              },
              false
            );
          }
        }
      }
      makeNetworkedVariable(myVar) {
        const varProxy = this.createVariableProxy(myVar);
        myVar = varProxy;
        Object.defineProperty(myVar, "bless", {
          enumerable: false,
          configurable: true,
          writable: true,
          value: true,
        });
        if (!this.networkUpdateTracker.hasOwnProperty(myVar.id)) {
          this.networkUpdateTracker[myVar.id] = {};
          this.networkUpdateTracker[myVar.id].current = false;
          this.networkUpdateTracker[myVar.id].last = false;
        }
        myVar.on(() => {
          this.onVariableChange(myVar);
        });
        if (!this.blessVarTracker.includes(myVar.id)) {
          this.blessVarTracker.push(myVar.id);
        }
      }
      makeNetworkedList(myList) {
        const newProxy = this.createArrayProxy(myList);
        myList.value = newProxy;
        Object.defineProperty(myList.value, "bless", {
          enumerable: false,
          configurable: true,
          writable: true,
          value: true,
        });
        if (!this.networkUpdateTracker.hasOwnProperty(myList.id)) {
          this.networkUpdateTracker[myList.id] = {};
          this.networkUpdateTracker[myList.id].current = false;
          this.networkUpdateTracker[myList.id].last = false;
        }
        myList.value.on((eventType, eventData) => {
          this.onListChange(myList, eventType, eventData);
        });
        if (!this.blessListTracker.includes(myList.id)) {
          this.blessListTracker.push(myList.id);
        }
      }
    }
    const OmegaSignalingInstance = new OmegaSignaling(Scratch.runtime);
    const OmegaEncryptionInstance = new OmegaEncryption();
    const OmegaRTCInstance = new OmegaRTC(
      OmegaEncryptionInstance,
      OmegaSignalingInstance
    );
    const NetworkedScratchDataInstance = new NetworkedScratchData(
      OmegaRTCInstance
    );
    OmegaEncryptionInstance.generateKeyPair();
    function backupSettings(runtime) {
      if (!runtime) {
        console.error("No runtime found!");
        return;
      }
      const stage = runtime.targets[0];
      let configId = null;
      let configFound = false;
      for (const id of Object.keys(stage.comments)) {
        if (stage.comments[id].text.includes(configEnd)) {
          configId = id;
          configFound = true;
          break;
        }
      }
      const newConfig = `${infoBlurb}${JSON.stringify({
        lists: NetworkedScratchDataInstance.blessListTracker,
        // Array
        variables: NetworkedScratchDataInstance.blessVarTracker,
        // Array
        keepalive: OmegaSignalingInstance.enableKeepalive ? 1 : 0,
        // Boolean (as integer)
      })} ${configEnd}`;
      if (!configFound) {
        stage.createComment(
          uid(),
          // Comment ID
          null,
          // Block ID that the comment is attached to (set to null by default)
          newConfig,
          // Comment text
          0,
          // X position of the comment
          0,
          // Y position of the comment
          620,
          // Width of the comment
          125,
          // Height of the comment
          false
          // Is the comment minimized?
        );
      } else {
        stage.comments[configId].text = newConfig;
      }
    }
    function restoreSettings(runtime) {
      if (!runtime) {
        console.error("No runtime found!");
        return;
      }
      const stage = runtime.targets[0];
      let configId = null;
      for (const id of Object.keys(stage.comments)) {
        if (stage.comments[id].text.includes(configEnd)) {
          configId = id;
          break;
        }
      }
      if (!configId) return;
      const config = JSON.parse(
        stage.comments[configId].text
          .split(infoBlurb)[1]
          .split(configEnd)[0]
          .trim()
      );
      OmegaSignalingInstance.enableKeepalive = config.keepalive ? true : false;
      NetworkedScratchDataInstance.blessVarTracker = config.variables;
      NetworkedScratchDataInstance.blessListTracker = config.lists;
    }
    class CloudLink5 {
      // Declare types
      vm;
      runtime;
      hasMicPerms;
      globalDataStorage;
      globalVariableStorage;
      globalListStorage;
      newestPeerConnected;
      blockIconURI;
      menuIconURI;
      constructor(vm) {
        this.vm = vm;
        this.runtime = vm.runtime;
        this.hasMicPerms = false;
        this.globalDataStorage = /* @__PURE__ */ new Map();
        this.globalVariableStorage = /* @__PURE__ */ new Map();
        this.globalListStorage = /* @__PURE__ */ new Map();
        this.newestPeerConnected = "";
        this.blockIconURI =
          "data:image/svg+xml;base64,PHN2ZyB3aWR0aD0iMTc3IiBoZWlnaHQ9IjEyMyIgdmlld0JveD0iMCAwIDE3NyAxMjMiIGZpbGw9Im5vbmUiIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyI+CjxnIGNsaXAtcGF0aD0idXJsKCNjbGlwMF8xXzE5KSI+CjxwYXRoIGZpbGwtcnVsZT0iZXZlbm9kZCIgY2xpcC1ydWxlPSJldmVub2RkIiBkPSJNMTM0LjMyIDM4LjUxMjlDMTU3LjU2MSAzOC41MTI5IDE3Ni4zOTkgNTcuMzUyMyAxNzYuMzk5IDgwLjU5MThDMTc2LjM5OSAxMDMuODMxIDE1Ny41NjEgMTIyLjY3MSAxMzQuMzIgMTIyLjY3MUg0Mi4wNzg5QzE4LjgzOCAxMjIuNjcxIDAgMTAzLjgzMSAwIDgwLjU5MThDMCA1Ny4zNTIzIDE4LjgzOCAzOC41MTI5IDQyLjA3ODkgMzguNTEyOUg0Ni4yNjc4QzQ4LjA3OTMgMTYuOTQyMyA2Ni4xNjEzIDAgODguMTk5MyAwQzExMC4yMzcgMCAxMjguMzE5IDE2Ljk0MjMgMTMwLjEzMSAzOC41MTI5SDEzNC4zMloiIGZpbGw9IndoaXRlIi8+CjxwYXRoIGQ9Ik04Ny40MTk4IDEwNS4zMzNDODIuOTM3OCAxMDUuMzMzIDc4Ljc4NzggMTA0LjQ3NSA3NC45Njk4IDEwMi43NkM3MS4xNTE4IDEwMC45ODkgNjcuOTQyNSA5OC42NjUgNjUuMzQxOCA5NS43ODc3TDcxLjg5ODggODcuNTcwNkM3NC4yNzgyIDg5LjgzOTMgNzYuNzQwNSA5MS41ODIzIDc5LjI4NTggOTIuNzk5NkM4MS44ODY1IDk0LjAxNyA4NC40ODcyIDk0LjYyNTYgODcuMDg3OCA5NC42MjU2Qzg5LjUyMjUgOTQuNjI1NiA5MS42ODA1IDk0LjIzODMgOTMuNTYxOCA5My40NjM2Qzk1LjQ0MzIgOTIuNjMzNiA5Ni44ODE4IDkxLjQ5OTMgOTcuODc3OCA5MC4wNjA2Qzk4LjkyOTIgODguNTY2NiA5OS40NTQ4IDg2LjgyMzYgOTkuNDU0OCA4NC44MzE2Qzk5LjQ1NDggODIuOTUwMyA5OC45MjkyIDgxLjI5MDMgOTcuODc3OCA3OS44NTE2Qzk2LjgyNjUgNzguNDEzIDk1LjM4NzggNzcuMjc4NiA5My41NjE4IDc2LjQ0ODZDOTEuNzM1OCA3NS42MTg2IDg5LjY4ODUgNzUuMjAzNiA4Ny40MTk4IDc1LjIwMzZDODUuMzE3MiA3NS4yMDM2IDgzLjQzNTggNzUuMzk3MyA4MS43NzU4IDc1Ljc4NDZDODAuMTE1OCA3Ni4xNzIgNzguNjIxOCA3Ni42NDIzIDc3LjI5MzggNzcuMTk1NkM3NS45NjU4IDc3LjY5MzYgNzQuNzc2MiA3OC4yNDcgNzMuNzI0OCA3OC44NTU2TDY4LjA4MDggNzEuNjM0Nkw3MS42NDk4IDQ2LjMxOTZIMTA2LjUxVjU3LjAyNjZINzcuOTU3OEw4MC45NDU4IDUzLjM3NDZMNzguMjA2OCA3MS44MDA2TDc0LjMwNTggNjkuODkxNkM3NS4yNDY1IDY5LjExNyA3Ni41NDY4IDY4LjM5NzYgNzguMjA2OCA2Ny43MzM2Qzc5Ljg2NjggNjcuMDY5NiA4MS43MjA1IDY2LjUxNjMgODMuNzY3OCA2Ni4wNzM2Qzg1LjgxNTIgNjUuNjMxIDg3LjgzNDggNjUuNDA5NiA4OS44MjY4IDY1LjQwOTZDOTMuNzAwMiA2NS40MDk2IDk3LjI0MTUgNjYuMjM5NiAxMDAuNDUxIDY3Ljg5OTZDMTAzLjY2IDY5LjUwNDMgMTA2LjIzMyA3MS43NzMgMTA4LjE3IDc0LjcwNTZDMTEwLjEwNiA3Ny42MzgzIDExMS4wNzUgODEuMDY5IDExMS4wNzUgODQuOTk3NkMxMTEuMDc1IDg4LjgxNTYgMTEwLjAyMyA5Mi4yNzQgMTA3LjkyMSA5NS4zNzI3QzEwNS44MTggOTguNDE2IDEwMi45NjggMTAwLjg1MSA5OS4zNzE4IDEwMi42NzdDOTUuODMwNSAxMDQuNDQ3IDkxLjg0NjUgMTA1LjMzMyA4Ny40MTk4IDEwNS4zMzNaIiBmaWxsPSIjMEZCRDhDIi8+CjwvZz4KPGRlZnM+CjxjbGlwUGF0aCBpZD0iY2xpcDBfMV8xOSI+CjxyZWN0IHdpZHRoPSIxNzYuMzk5IiBoZWlnaHQ9IjEyMi42NzEiIGZpbGw9IndoaXRlIi8+CjwvY2xpcFBhdGg+CjwvZGVmcz4KPC9zdmc+Cg==";
        this.menuIconURI =
          "data:image/svg+xml;base64,PHN2ZyB3aWR0aD0iMjI2IiBoZWlnaHQ9IjIyNiIgdmlld0JveD0iMCAwIDIyNiAyMjYiIGZpbGw9Im5vbmUiIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyI+CjxnIGNsaXAtcGF0aD0idXJsKCNjbGlwMF8xXzEzKSI+CjxwYXRoIGQ9Ik0wIDExMi42NzdDMCA1MC40NDc0IDUwLjQ0NzQgMCAxMTIuNjc3IDBDMTc0LjkwNyAwIDIyNS4zNTUgNTAuNDQ3NCAyMjUuMzU1IDExMi42NzdDMjI1LjM1NSAxNzQuOTA3IDE3NC45MDcgMjI1LjM1NSAxMTIuNjc3IDIyNS4zNTVDNTAuNDQ3NCAyMjUuMzU1IDAgMTc0LjkwNyAwIDExMi42NzdaIiBmaWxsPSIjMEZCRDhDIi8+CjxwYXRoIGZpbGwtcnVsZT0iZXZlbm9kZCIgY2xpcC1ydWxlPSJldmVub2RkIiBkPSJNMTU4LjUzNSA4My43NjEyQzE4MS43NzYgODMuNzYxMiAyMDAuNjE0IDEwMi42MDEgMjAwLjYxNCAxMjUuODRDMjAwLjYxNCAxNDkuMDggMTgxLjc3NiAxNjcuOTE5IDE1OC41MzUgMTY3LjkxOUg2Ni4yOTQxQzQzLjA1MzIgMTY3LjkxOSAyNC4yMTUyIDE0OS4wOCAyNC4yMTUyIDEyNS44NEMyNC4yMTUyIDEwMi42MDEgNDMuMDUzMiA4My43NjEyIDY2LjI5NDEgODMuNzYxMkg3MC40ODNDNzIuMjk0NSA2Mi4xOTA3IDkwLjM3NjUgNDUuMjQ4NCAxMTIuNDE0IDQ1LjI0ODRDMTM0LjQ1MiA0NS4yNDg0IDE1Mi41MzQgNjIuMTkwNyAxNTQuMzQ2IDgzLjc2MTJIMTU4LjUzNVoiIGZpbGw9IndoaXRlIi8+CjxwYXRoIGQ9Ik0xMTEuNjM1IDE1MC41ODFDMTA3LjE1MyAxNTAuNTgxIDEwMy4wMDMgMTQ5LjcyMyA5OS4xODUgMTQ4LjAwOEM5NS4zNjcgMTQ2LjIzNyA5Mi4xNTc3IDE0My45MTMgODkuNTU3IDE0MS4wMzZMOTYuMTE0IDEzMi44MTlDOTguNDkzMyAxMzUuMDg4IDEwMC45NTYgMTM2LjgzMSAxMDMuNTAxIDEzOC4wNDhDMTA2LjEwMiAxMzkuMjY1IDEwOC43MDIgMTM5Ljg3NCAxMTEuMzAzIDEzOS44NzRDMTEzLjczOCAxMzkuODc0IDExNS44OTYgMTM5LjQ4NyAxMTcuNzc3IDEzOC43MTJDMTE5LjY1OCAxMzcuODgyIDEyMS4wOTcgMTM2Ljc0OCAxMjIuMDkzIDEzNS4zMDlDMTIzLjE0NCAxMzMuODE1IDEyMy42NyAxMzIuMDcyIDEyMy42NyAxMzAuMDhDMTIzLjY3IDEyOC4xOTkgMTIzLjE0NCAxMjYuNTM5IDEyMi4wOTMgMTI1LjFDMTIxLjA0MiAxMjMuNjYxIDExOS42MDMgMTIyLjUyNyAxMTcuNzc3IDEyMS42OTdDMTE1Ljk1MSAxMjAuODY3IDExMy45MDQgMTIwLjQ1MiAxMTEuNjM1IDEyMC40NTJDMTA5LjUzMiAxMjAuNDUyIDEwNy42NTEgMTIwLjY0NiAxMDUuOTkxIDEyMS4wMzNDMTA0LjMzMSAxMjEuNDIgMTAyLjgzNyAxMjEuODkxIDEwMS41MDkgMTIyLjQ0NEMxMDAuMTgxIDEyMi45NDIgOTguOTkxMyAxMjMuNDk1IDk3Ljk0IDEyNC4xMDRMOTIuMjk2IDExNi44ODNMOTUuODY1IDkxLjU2OEgxMzAuNzI1VjEwMi4yNzVIMTAyLjE3M0wxMDUuMTYxIDk4LjYyM0wxMDIuNDIyIDExNy4wNDlMOTguNTIxIDExNS4xNEM5OS40NjE3IDExNC4zNjUgMTAwLjc2MiAxMTMuNjQ2IDEwMi40MjIgMTEyLjk4MkMxMDQuMDgyIDExMi4zMTggMTA1LjkzNiAxMTEuNzY1IDEwNy45ODMgMTExLjMyMkMxMTAuMDMgMTEwLjg3OSAxMTIuMDUgMTEwLjY1OCAxMTQuMDQyIDExMC42NThDMTE3LjkxNSAxMTAuNjU4IDEyMS40NTcgMTExLjQ4OCAxMjQuNjY2IDExMy4xNDhDMTI3Ljg3NSAxMTQuNzUzIDEzMC40NDggMTE3LjAyMSAxMzIuMzg1IDExOS45NTRDMTM0LjMyMiAxMjIuODg3IDEzNS4yOSAxMjYuMzE3IDEzNS4yOSAxMzAuMjQ2QzEzNS4yOSAxMzQuMDY0IDEzNC4yMzkgMTM3LjUyMiAxMzIuMTM2IDE0MC42MjFDMTMwLjAzMyAxNDMuNjY0IDEyNy4xODQgMTQ2LjA5OSAxMjMuNTg3IDE0Ny45MjVDMTIwLjA0NiAxNDkuNjk2IDExNi4wNjIgMTUwLjU4MSAxMTEuNjM1IDE1MC41ODFaIiBmaWxsPSIjMEZCRDhDIi8+CjwvZz4KPGRlZnM+CjxjbGlwUGF0aCBpZD0iY2xpcDBfMV8xMyI+CjxyZWN0IHdpZHRoPSIyMjUuMzU1IiBoZWlnaHQ9IjIyNS4zNTUiIGZpbGw9IndoaXRlIi8+CjwvY2xpcFBhdGg+CjwvZGVmcz4KPC9zdmc+Cg==";
      }
      // Define blocks used in the extension
      // @ts-expect-error Scratch.BlockType.EVENT has a weird catch-22 issue with isEdgeActivated.
      getInfo() {
        return {
          id: "cl5",
          name: "CL5",
          docsURI: "https://github.com/cloudlink-omega/cl5/wiki/Extension",
          blockIconURI: this.blockIconURI,
          menuIconURI: this.menuIconURI,
          color1: "#0FBD8C",
          color2: "#80C6B2",
          color3: "#0A7255",
          blocks: [
            {
              opcode: "on_signalling_connect",
              blockType: Scratch2.BlockType.HAT,
              text: "When I am connected to signaling server",
            },
            {
              opcode: "on_signalling_disconnect",
              blockType: Scratch2.BlockType.HAT,
              text: "When I am disconnected from signaling server",
            },
            {
              opcode: "initialize",
              blockType: Scratch2.BlockType.COMMAND,
              text: "Connect to signaling server [SERVER]",
              arguments: {
                SERVER: {
                  type: Scratch2.ArgumentType.STRING,
                  defaultValue: "",
                },
              },
            },
            {
              opcode: "leave",
              blockType: Scratch2.BlockType.COMMAND,
              text: "Disconnect from signaling server",
            },
            {
              opcode: "is_signalling_connected",
              blockType: Scratch2.BlockType.BOOLEAN,
              text: "Connected to signaling server?",
            },
            {
              opcode: "authenticate",
              blockType: Scratch2.BlockType.COMMAND,
              text: "Authenticate with token [TOKEN]",
              arguments: {
                TOKEN: {
                  type: Scratch2.ArgumentType.STRING,
                  defaultValue: "",
                },
              },
            },
            {
              opcode: "is_signaling_auth_success",
              blockType: Scratch2.BlockType.BOOLEAN,
              text: "Authenticated successfully?",
            },
            {
              opcode: "my_ID",
              blockType: Scratch2.BlockType.REPORTER,
              text: "My Peer ID",
            },
            {
              opcode: "my_Username",
              blockType: Scratch2.BlockType.REPORTER,
              text: "My Username",
            },
            {
              opcode: "get_peers",
              blockType: Scratch2.BlockType.REPORTER,
              text: "Connected peers",
            },
            {
              opcode: "get_peer_channels",
              blockType: Scratch2.BlockType.REPORTER,
              text: "Peer [PEER] channels",
              arguments: {
                PEER: {
                  type: Scratch2.ArgumentType.STRING,
                  defaultValue: "ID",
                },
              },
            },
            {
              opcode: "is_peer_connected",
              blockType: Scratch2.BlockType.BOOLEAN,
              text: "Connected to peer [PEER]?",
              arguments: {
                PEER: {
                  type: Scratch2.ArgumentType.STRING,
                  defaultValue: "ID",
                },
              },
            },
            {
              opcode: "disconnect_peer",
              blockType: Scratch2.BlockType.COMMAND,
              text: "Close connection with peer [PEER]",
              arguments: {
                PEER: {
                  type: Scratch2.ArgumentType.STRING,
                  defaultValue: "ID",
                },
              },
            },
            {
              opcode: "new_dchan",
              blockType: Scratch2.BlockType.COMMAND,
              text: "Open a new data channel named [CHANNEL] with peer [PEER] and prefer [ORDERED]",
              arguments: {
                CHANNEL: {
                  type: Scratch2.ArgumentType.STRING,
                  defaultValue: "foobar",
                },
                PEER: {
                  type: Scratch2.ArgumentType.STRING,
                  defaultValue: "ID",
                },
                ORDERED: {
                  type: Scratch2.ArgumentType.NUMBER,
                  menu: "channelConfig",
                  defaultValue: 1,
                },
              },
            },
            {
              opcode: "close_dchan",
              blockType: Scratch2.BlockType.COMMAND,
              text: "Close data channel named [CHANNEL] with peer [PEER]",
              arguments: {
                CHANNEL: {
                  type: Scratch2.ArgumentType.STRING,
                  defaultValue: "foobar",
                },
                PEER: {
                  type: Scratch2.ArgumentType.STRING,
                  defaultValue: "ID",
                },
              },
            },
            {
              opcode: "lobby_list",
              blockType: Scratch2.BlockType.REPORTER,
              text: "All public lobbies",
            },
            {
              opcode: "query_lobbies",
              blockType: Scratch2.BlockType.COMMAND,
              text: "Refresh public lobbies list",
            },
            {
              opcode: "lobby_info",
              blockType: Scratch2.BlockType.REPORTER,
              text: "Lobby info",
            },
            {
              opcode: "query_lobby",
              blockType: Scratch2.BlockType.COMMAND,
              text: "Get info about public lobby [LOBBY]",
              arguments: {
                LOBBY: {
                  type: Scratch2.ArgumentType.STRING,
                  defaultValue: "DemoLobby",
                },
              },
            },
            {
              opcode: "init_host_mode",
              blockType: Scratch2.BlockType.COMMAND,
              text: "Host a lobby named [LOBBY], set the peer limit to [PEERS], set password to [PASSWORD], and [CLAIMCONFIG]",
              arguments: {
                LOBBY: {
                  type: Scratch2.ArgumentType.STRING,
                  defaultValue: "DemoLobby",
                },
                PEERS: {
                  type: Scratch2.ArgumentType.NUMBER,
                  defaultValue: 0,
                },
                PASSWORD: {
                  type: Scratch2.ArgumentType.STRING,
                  defaultValue: "",
                },
                CLAIMCONFIG: {
                  type: Scratch2.ArgumentType.NUMBER,
                  menu: "lobbyConfigMenu",
                  defaultValue: 1,
                },
              },
            },
            {
              opcode: "init_peer_mode",
              blockType: Scratch2.BlockType.COMMAND,
              text: "Join lobby [LOBBY] with password [PASSWORD]",
              arguments: {
                LOBBY: {
                  type: Scratch2.ArgumentType.STRING,
                  defaultValue: "DemoLobby",
                },
                PASSWORD: {
                  type: Scratch2.ArgumentType.STRING,
                  defaultValue: "",
                },
              },
            },
            {
              opcode: "get_client_mode",
              blockType: Scratch2.BlockType.REPORTER,
              text: "Am I a host or a peer?",
            },
            {
              opcode: "on_new_peer",
              blockType: Scratch2.BlockType.EVENT,
              text: "When I get connected to a new peer",
            },
            {
              opcode: "get_new_peer",
              blockType: Scratch2.BlockType.REPORTER,
              text: "Newest peer connected",
            },
            {
              opcode: "on_broadcast_message",
              blockType: Scratch2.BlockType.HAT,
              isEdgeActivated: false,
              text: "When I get a broadcast message in channel [CHANNEL]",
              arguments: {
                CHANNEL: {
                  type: Scratch2.ArgumentType.STRING,
                  defaultValue: "default",
                },
              },
            },
            {
              opcode: "get_global_channel_data",
              blockType: Scratch2.BlockType.REPORTER,
              text: "Global channel [CHANNEL] data",
              arguments: {
                CHANNEL: {
                  type: Scratch2.ArgumentType.STRING,
                  defaultValue: "default",
                },
              },
            },
            {
              opcode: "broadcast",
              blockType: Scratch2.BlockType.COMMAND,
              text: "Broadcast global data [DATA] to all peers using channel [CHANNEL] and wait for broadcast to finish sending? [WAIT]",
              arguments: {
                DATA: {
                  type: Scratch2.ArgumentType.STRING,
                  defaultValue: "Hello",
                },
                CHANNEL: {
                  type: Scratch2.ArgumentType.STRING,
                  defaultValue: "default",
                },
                WAIT: {
                  type: Scratch2.ArgumentType.BOOLEAN,
                  defaultValue: false,
                },
              },
            },
            {
              opcode: "on_private_message",
              blockType: Scratch2.BlockType.HAT,
              isEdgeActivated: false,
              text: "When I get a private message from peer [PEER] in channel [CHANNEL]",
              arguments: {
                CHANNEL: {
                  type: Scratch2.ArgumentType.STRING,
                  defaultValue: "default",
                },
                PEER: {
                  type: Scratch2.ArgumentType.STRING,
                  defaultValue: "ID",
                },
              },
            },
            {
              opcode: "get_private_channel_data",
              blockType: Scratch2.BlockType.REPORTER,
              text: "Private channel [CHANNEL] data from peer [PEER]",
              arguments: {
                CHANNEL: {
                  type: Scratch2.ArgumentType.STRING,
                  defaultValue: "default",
                },
                PEER: {
                  type: Scratch2.ArgumentType.STRING,
                  defaultValue: "ID",
                },
              },
            },
            {
              opcode: "send",
              blockType: Scratch2.BlockType.COMMAND,
              text: "Send private data [DATA] to peer [PEER] using channel [CHANNEL] and wait for message to finish sending? [WAIT]",
              arguments: {
                DATA: {
                  type: Scratch2.ArgumentType.STRING,
                  defaultValue: "Hello",
                },
                PEER: {
                  type: Scratch2.ArgumentType.STRING,
                  defaultValue: "ID",
                },
                CHANNEL: {
                  type: Scratch2.ArgumentType.STRING,
                  defaultValue: "default",
                },
                WAIT: {
                  type: Scratch2.ArgumentType.BOOLEAN,
                  defaultValue: false,
                },
              },
            },
            {
              opcode: "store_private_channel_in_variable",
              blockType: Scratch2.BlockType.COMMAND,
              text: "Store received private messages from peer [PEER]'s channel [CHANNEL] into variable [VAR]",
              arguments: {
                CHANNEL: {
                  type: Scratch2.ArgumentType.STRING,
                  defaultValue: "default",
                },
                PEER: {
                  type: Scratch2.ArgumentType.STRING,
                  defaultValue: "ID",
                },
                VAR: {
                  type: Scratch2.ArgumentType.STRING,
                  defaultValue: "my variable",
                },
              },
            },
            {
              opcode: "make_global_networked_list",
              blockType: Scratch2.BlockType.COMMAND,
              text: "Make list [LIST] a global networked list",
              arguments: {
                LIST: {
                  type: Scratch2.ArgumentType.STRING,
                  defaultValue: "my list",
                },
              },
            },
            {
              opcode: "make_private_networked_list",
              blockType: Scratch2.BlockType.COMMAND,
              text: "Make list [LIST] a private networked list with peer [PEER]",
              arguments: {
                LIST: {
                  type: Scratch2.ArgumentType.STRING,
                  defaultValue: "my list",
                },
                PEER: {
                  type: Scratch2.ArgumentType.STRING,
                  defaultValue: "ID",
                },
              },
            },
            {
              opcode: "request_mic_perms",
              blockType: Scratch2.BlockType.COMMAND,
              text: "Request microphone access",
            },
            {
              opcode: "get_mic_perms",
              blockType: Scratch2.BlockType.BOOLEAN,
              text: "Do I have microphone access?",
            },
            {
              opcode: "is_peer_vchan_open",
              blockType: Scratch2.BlockType.BOOLEAN,
              text: "Connected to voice chat with peer [PEER]?",
              arguments: {
                PEER: {
                  type: Scratch2.ArgumentType.STRING,
                  defaultValue: "ID",
                },
              },
            },
            {
              opcode: "get_mic_mute_state",
              blockType: Scratch2.BlockType.BOOLEAN,
              text: "Is my microphone with peer [PEER] muted?",
              arguments: {
                PEER: {
                  type: Scratch2.ArgumentType.STRING,
                  defaultValue: "ID",
                },
              },
            },
            {
              opcode: "change_mic_state",
              blockType: Scratch2.BlockType.COMMAND,
              text: "[MICSTATE] my microphone with peer [PEER]",
              arguments: {
                PEER: {
                  type: Scratch2.ArgumentType.STRING,
                  defaultValue: "ID",
                },
                MICSTATE: {
                  type: Scratch2.ArgumentType.NUMBER,
                  menu: "micStateMenu",
                  defaultValue: "0",
                },
              },
            },
            {
              opcode: "new_vchan",
              blockType: Scratch2.BlockType.COMMAND,
              text: "Open a voice chat with peer [PEER]",
              arguments: {
                PEER: {
                  type: Scratch2.ArgumentType.STRING,
                  defaultValue: "ID",
                },
              },
            },
            {
              opcode: "close_vchan",
              blockType: Scratch2.BlockType.COMMAND,
              text: "Close voice chat with peer [PEER]",
              arguments: {
                PEER: {
                  type: Scratch2.ArgumentType.STRING,
                  defaultValue: "ID",
                },
              },
            },
            {
              opcode: "changeKeepalive",
              blockType: Scratch2.BlockType.COMMAND,
              text: "Keep signaling connection alive? [KEEPALIVE]",
              arguments: {
                KEEPALIVE: {
                  type: Scratch2.ArgumentType.BOOLEAN,
                  defaultValue: false,
                },
              },
            },
          ],
          menus: {
            lobbyConfigMenu: {
              items: [
                {
                  text: "don't allow this lobby to be reclaimed",
                  value: "1",
                },
                {
                  text: "allow the server to reclaim the lobby",
                  value: "2",
                },
                {
                  text: "allow peers to reclaim the lobby",
                  value: "3",
                },
              ],
            },
            micStateMenu: {
              items: [
                {
                  text: "Mute",
                  value: "0",
                },
                {
                  text: "Unmute",
                  value: "1",
                },
              ],
            },
            channelConfig: {
              items: [
                {
                  text: "reliability/order over speed",
                  value: "1",
                },
                {
                  text: "speed over reliability/order",
                  value: "2",
                },
              ],
            },
          },
        };
      }
      changeKeepalive({ KEEPALIVE }) {
        OmegaSignalingInstance.enableKeepalive = KEEPALIVE;
        backupSettings(this.runtime);
      }
      async clOmegaProtocolMessageHandler(remotePeerId, channel, message) {
        let packet;
        try {
          packet = JSON.parse(message);
          const opcode = packet.opcode;
          const payload = packet.payload;
          console.log(`[${remotePeerId}]`, packet);
          switch (opcode) {
            case "G_MSG":
              if (!this.globalDataStorage.has(channel.label)) {
                this.globalDataStorage.set(
                  channel.label,
                  /* @__PURE__ */ new Map()
                );
              }
              this.globalDataStorage.set(channel.label, payload);
              break;
            case "G_VAR":
              break;
            case "G_LIST":
              for (const target of this.runtime.targets) {
                const myList = target.lookupVariableById(payload.id);
                if (myList == null) continue;
                NetworkedScratchDataInstance.networkUpdateTracker[
                  myList.id
                ].current = true;
                switch (payload.method) {
                  case "set":
                    if (payload.value == "") {
                      delete myList.value[payload.index];
                    } else {
                      myList.value[payload.index] = payload.value;
                    }
                    break;
                  case "reset":
                    myList.value = payload.value;
                    break;
                  case "replace":
                    if (payload.value == "") {
                      delete myList.value[payload.index];
                    } else {
                      myList.value[payload.index] = payload.value;
                    }
                    break;
                  case "length":
                    myList.value.length = payload.value;
                    break;
                }
              }
              break;
            case "P_MSG":
              channel.dataStorage.set("pmsg", payload);
              break;
            case "P_VAR":
              break;
            case "P_LIST":
              break;
            case "RING":
              break;
            case "PICKUP":
              break;
            case "HANGUP":
              break;
          }
        } catch (error) {
          console.error(
            `Error handling peer ${remotePeerId}'s channel ${channel.label} message ${message}: ${error}`
          );
          return;
        }
      }
      initialize({ SERVER }, util) {
        if (!OmegaSignalingInstance.socket) {
          return new Promise((resolve, reject) => {
            OmegaSignalingInstance.Connect(SERVER);
            OmegaSignalingInstance.onConnect(() => {
              console.log("Connected to signaling server.");
              console.log(this);
              this.vm.runtime.startHats("cl5_on_signalling_connect");
              resolve();
            });
            OmegaSignalingInstance.onClose("auto", () => {
              console.log("Disconnected from signaling server.");
              Array.from(OmegaRTCInstance.peerConnections.keys()).forEach(
                (peer) => {
                  OmegaRTCInstance.closeVoiceConnection(peer);
                  OmegaRTCInstance.disconnectDataPeer(peer);
                }
              );
              util.startHats("cl5_on_signalling_disconnect");
              reject();
            });
            OmegaSignalingInstance.onAnticipate(async (message) => {
              const remoteUserId = message.payload.id;
              const pubKey = message.payload.pubkey;
              OmegaSignalingInstance.onPeerGone(remoteUserId, () => {
                OmegaRTCInstance.disconnectDataPeer(remoteUserId);
              });
              if (pubKey) {
                await OmegaEncryptionInstance.setSharedKeyFromPublicKey(
                  remoteUserId,
                  pubKey
                );
              }
              OmegaRTCInstance.onChannelOpen(remoteUserId, async (channel) => {
                if (channel == "default") {
                  this.newestPeerConnected = remoteUserId;
                  util.startHats("cl5_on_new_peer");
                }
              });
            });
            OmegaSignalingInstance.onDiscover(async (message) => {
              const remoteUserName = message.payload.user;
              const remoteUserId = message.payload.id;
              const pubKey = message.payload.pubkey;
              let sharedKey;
              OmegaSignalingInstance.onPeerGone(remoteUserId, () => {
                OmegaRTCInstance.disconnectDataPeer(remoteUserId);
              });
              if (pubKey) {
                await OmegaEncryptionInstance.setSharedKeyFromPublicKey(
                  remoteUserId,
                  pubKey
                );
                sharedKey = OmegaEncryptionInstance.getSharedKey(remoteUserId);
              }
              const offer = await OmegaRTCInstance.createDataOffer(
                remoteUserId,
                remoteUserName
              );
              if (sharedKey) {
                const { encryptedMessage, iv } =
                  await OmegaEncryptionInstance.encryptMessage(
                    JSON.stringify(offer),
                    sharedKey
                  );
                OmegaSignalingInstance.sendOffer(
                  remoteUserId,
                  {
                    type: 0,
                    // data
                    contents: [encryptedMessage, iv],
                  },
                  null
                );
              } else {
                OmegaSignalingInstance.sendOffer(
                  remoteUserId,
                  {
                    type: 0,
                    // data
                    contents: offer,
                  },
                  null
                );
              }
            });
            OmegaSignalingInstance.onNewPeer(async (message) => {
              const remoteUserName = message.payload.user;
              const remoteUserId = message.payload.id;
              const pubKey = message.payload.pubkey;
              let sharedKey;
              OmegaSignalingInstance.onPeerGone(remoteUserId, () => {
                OmegaRTCInstance.disconnectDataPeer(remoteUserId);
              });
              if (pubKey) {
                await OmegaEncryptionInstance.setSharedKeyFromPublicKey(
                  remoteUserId,
                  pubKey
                );
                sharedKey =
                  await OmegaEncryptionInstance.getSharedKey(remoteUserId);
              }
              const offer = await OmegaRTCInstance.createDataOffer(
                remoteUserId,
                remoteUserName
              );
              if (sharedKey) {
                const { encryptedMessage, iv } =
                  await OmegaEncryptionInstance.encryptMessage(
                    JSON.stringify(offer),
                    sharedKey
                  );
                OmegaSignalingInstance.sendOffer(
                  remoteUserId,
                  {
                    type: 0,
                    // data
                    contents: [encryptedMessage, iv],
                  },
                  null
                );
              } else {
                OmegaSignalingInstance.sendOffer(
                  remoteUserId,
                  {
                    type: 0,
                    // data
                    contents: offer,
                  },
                  null
                );
              }
              OmegaRTCInstance.onChannelOpen(remoteUserId, async (channel) => {
                if (channel == "default") {
                  this.newestPeerConnected = remoteUserId;
                  util.startHats("cl5_on_new_peer");
                }
              });
            });
            OmegaSignalingInstance.onNewHost(async (message) => {
              const remoteUserName = message.payload.user;
              const remoteUserId = message.payload.id;
              const lobby = message.payload.lobby_id;
              const pubKey = message.payload.pubkey;
              console.log(
                `New lobby ${lobby} created by host ${remoteUserName} (${remoteUserId})`
              );
              OmegaSignalingInstance.onHostGone(remoteUserId, () => {
                OmegaRTCInstance.disconnectDataPeer(remoteUserId);
              });
              if (pubKey) {
                await OmegaEncryptionInstance.setSharedKeyFromPublicKey(
                  remoteUserId,
                  pubKey
                );
              }
              OmegaRTCInstance.onChannelOpen(remoteUserId, async (channel) => {
                if (channel == "default") {
                  this.newestPeerConnected = remoteUserId;
                  util.startHats("cl5_on_new_peer");
                }
              });
            });
            OmegaSignalingInstance.onIceCandidateReceived(async (message) => {
              const remoteUserId = message.origin.id;
              const sharedKey =
                await OmegaEncryptionInstance.getSharedKey(remoteUserId);
              const type = message.payload.type;
              let candidate = message.payload.contents;
              if (sharedKey) {
                const encryptedMessage = candidate[0];
                const iv = candidate[1];
                candidate = JSON.parse(
                  await OmegaEncryptionInstance.decryptMessage(
                    encryptedMessage,
                    iv,
                    sharedKey
                  )
                );
              }
              switch (type) {
                case 0:
                  OmegaRTCInstance.addDataIceCandidate(remoteUserId, candidate);
                  break;
                case 1:
                  OmegaRTCInstance.addVoiceIceCandidate(
                    remoteUserId,
                    candidate
                  );
                  break;
              }
            });
            OmegaSignalingInstance.onOffer(async (message) => {
              const remoteUserName = message.origin.user;
              const remoteUserId = message.origin.id;
              const sharedKey =
                await OmegaEncryptionInstance.getSharedKey(remoteUserId);
              let answer;
              let offer = message.payload.contents;
              const type = message.payload.type;
              if (sharedKey) {
                const encryptedMessage = offer[0];
                const iv = offer[1];
                offer = JSON.parse(
                  await OmegaEncryptionInstance.decryptMessage(
                    encryptedMessage,
                    iv,
                    sharedKey
                  )
                );
              }
              switch (type) {
                case 0:
                  answer = await OmegaRTCInstance.createDataAnswer(
                    remoteUserId,
                    remoteUserName,
                    offer
                  );
                  break;
                case 1:
                  answer = await OmegaRTCInstance.createVoiceAnswer(
                    remoteUserId,
                    remoteUserName,
                    offer
                  );
                  break;
              }
              if (sharedKey) {
                const { encryptedMessage, iv } =
                  await OmegaEncryptionInstance.encryptMessage(
                    JSON.stringify(answer),
                    sharedKey
                  );
                OmegaSignalingInstance.sendAnswer(
                  remoteUserId,
                  {
                    type,
                    contents: [encryptedMessage, iv],
                  },
                  null
                );
              } else {
                OmegaSignalingInstance.sendAnswer(
                  remoteUserId,
                  {
                    type,
                    contents: answer,
                  },
                  null
                );
              }
              OmegaRTCInstance.onChannelMessage(
                remoteUserId,
                async (message2, channel) => {
                  await this.clOmegaProtocolMessageHandler(
                    remoteUserId,
                    channel,
                    message2
                  );
                }
              );
              OmegaRTCInstance.onIceCandidate(
                remoteUserId,
                async (candidate) => {
                  if (sharedKey) {
                    const { encryptedMessage, iv } =
                      await OmegaEncryptionInstance.encryptMessage(
                        JSON.stringify(candidate),
                        sharedKey
                      );
                    OmegaSignalingInstance.sendIceCandidate(
                      remoteUserId,
                      {
                        type,
                        contents: [encryptedMessage, iv],
                      },
                      null
                    );
                  } else {
                    OmegaSignalingInstance.sendIceCandidate(
                      remoteUserId,
                      {
                        type,
                        contents: candidate,
                      },
                      null
                    );
                  }
                  OmegaRTCInstance.removeIceCandidate(remoteUserId, candidate);
                }
              );
              OmegaRTCInstance.onIceGatheringDone(remoteUserId, () => {
                OmegaRTCInstance.iceCandidates[remoteUserId].forEach(
                  async (candidate) => {
                    if (sharedKey) {
                      const { encryptedMessage, iv } =
                        await OmegaEncryptionInstance.encryptMessage(
                          JSON.stringify(candidate),
                          sharedKey
                        );
                      OmegaSignalingInstance.sendIceCandidate(
                        remoteUserId,
                        {
                          type,
                          contents: [encryptedMessage, iv],
                        },
                        null
                      );
                    } else {
                      OmegaSignalingInstance.sendIceCandidate(
                        remoteUserId,
                        {
                          type,
                          contents: candidate,
                        },
                        null
                      );
                    }
                    OmegaRTCInstance.removeIceCandidate(
                      remoteUserId,
                      candidate
                    );
                  }
                );
              });
            });
            OmegaSignalingInstance.onAnswer(async (message) => {
              const remoteUserId = message.origin.id;
              const sharedKey =
                OmegaEncryptionInstance.getSharedKey(remoteUserId);
              const type = message.payload.type;
              let answer = message.payload.contents;
              if (sharedKey) {
                const encryptedMessage = answer[0];
                const iv = answer[1];
                answer = JSON.parse(
                  await OmegaEncryptionInstance.decryptMessage(
                    encryptedMessage,
                    iv,
                    sharedKey
                  )
                );
              }
              switch (type) {
                case 0:
                  await OmegaRTCInstance.handleDataAnswer(remoteUserId, answer);
                  break;
                case 1:
                  await OmegaRTCInstance.handleVoiceAnswer(
                    remoteUserId,
                    answer
                  );
                  break;
              }
              OmegaRTCInstance.onChannelMessage(
                remoteUserId,
                async (message2, channel) => {
                  await this.clOmegaProtocolMessageHandler(
                    remoteUserId,
                    channel,
                    message2
                  );
                }
              );
              OmegaRTCInstance.onIceCandidate(
                remoteUserId,
                async (candidate) => {
                  if (sharedKey) {
                    const { encryptedMessage, iv } =
                      await OmegaEncryptionInstance.encryptMessage(
                        JSON.stringify(candidate),
                        sharedKey
                      );
                    OmegaSignalingInstance.sendIceCandidate(
                      remoteUserId,
                      {
                        type,
                        contents: [encryptedMessage, iv],
                      },
                      null
                    );
                  } else {
                    OmegaSignalingInstance.sendIceCandidate(
                      remoteUserId,
                      {
                        type,
                        contents: candidate,
                      },
                      null
                    );
                  }
                  OmegaRTCInstance.removeIceCandidate(remoteUserId, candidate);
                }
              );
              OmegaRTCInstance.onIceGatheringDone(remoteUserId, () => {
                OmegaRTCInstance.iceCandidates[remoteUserId].forEach(
                  async (candidate) => {
                    if (sharedKey) {
                      const { encryptedMessage, iv } =
                        await OmegaEncryptionInstance.encryptMessage(
                          JSON.stringify(candidate),
                          sharedKey
                        );
                      OmegaSignalingInstance.sendIceCandidate(
                        remoteUserId,
                        {
                          type,
                          contents: [encryptedMessage, iv],
                        },
                        null
                      );
                    } else {
                      OmegaSignalingInstance.sendIceCandidate(
                        remoteUserId,
                        {
                          type,
                          contents: candidate,
                        },
                        null
                      );
                    }
                    OmegaRTCInstance.removeIceCandidate(
                      remoteUserId,
                      candidate
                    );
                  }
                );
              });
            });
          });
        }
      }
      query_lobbies() {
        return new Promise((resolve, reject) => {
          if (!OmegaSignalingInstance.socket) {
            console.warn("Signaling server not connected");
            reject();
            return;
          }
          OmegaSignalingInstance.sendGetLobbyList(null);
          OmegaSignalingInstance.onLobbyList(() => resolve());
        });
      }
      lobby_list() {
        return makeValueSafeForScratch(OmegaSignalingInstance.lobbyList);
      }
      query_lobby({ LOBBY }) {
        return new Promise((resolve, reject) => {
          if (!OmegaSignalingInstance.socket) {
            console.warn("Signaling server not connected");
            reject();
            return;
          }
          OmegaSignalingInstance.sendGetLobbyInfo(LOBBY, null);
          OmegaSignalingInstance.onLobbyInfo(() => resolve());
        });
      }
      lobby_info() {
        return makeValueSafeForScratch(OmegaSignalingInstance.lobbyInfo);
      }
      init_host_mode({ LOBBY, PEERS, PASSWORD, CLAIMCONFIG }) {
        return new Promise(async (resolve, reject) => {
          if (!OmegaSignalingInstance.socket) {
            console.warn("Signaling server not connected");
            reject();
            return;
          }
          const max_peers = parseInt(PEERS);
          if (isNaN(max_peers)) {
            console.warn("Desired peers value is not a number.");
            reject();
            return;
          }
          let allow_host_reclaim = false;
          let allow_peers_to_claim_host = false;
          switch (CLAIMCONFIG) {
            case 1:
              allow_host_reclaim = false;
              allow_peers_to_claim_host = false;
              break;
            case 2:
              allow_host_reclaim = true;
              allow_peers_to_claim_host = false;
              break;
            case 3:
              allow_host_reclaim = true;
              allow_peers_to_claim_host = true;
              break;
          }
          OmegaSignalingInstance.hostMode(
            LOBBY,
            allow_host_reclaim,
            allow_peers_to_claim_host,
            max_peers,
            PASSWORD,
            await OmegaEncryptionInstance.exportPublicKey(),
            null
          );
          OmegaSignalingInstance.onHostModeConfig(() => resolve());
          OmegaSignalingInstance.onModeConfigFailure(() => reject());
        });
      }
      async init_peer_mode({ LOBBY, PASSWORD }) {
        return new Promise(async (resolve, reject) => {
          if (!OmegaSignalingInstance.socket) {
            console.warn("Signaling server not connected");
            reject();
            return;
          }
          OmegaSignalingInstance.peerMode(
            LOBBY,
            PASSWORD,
            await OmegaEncryptionInstance.exportPublicKey(),
            null
          );
          OmegaSignalingInstance.onPeerModeConfig(() => resolve());
          OmegaSignalingInstance.onModeConfigFailure(() => reject());
        });
      }
      send({ DATA, PEER, CHANNEL, WAIT }) {
        return OmegaRTCInstance.sendData(PEER, CHANNEL, "P_MSG", DATA, WAIT);
      }
      broadcast({ DATA, CHANNEL, WAIT }) {
        return OmegaRTCInstance.broadcastData(CHANNEL, "G_MSG", DATA, WAIT);
      }
      disconnect_peer({ PEER }) {
        OmegaRTCInstance.disconnectDataPeer(PEER);
      }
      leave() {
        if (!OmegaSignalingInstance.socket) return;
        return new Promise((resolve) => {
          OmegaSignalingInstance.Disconnect();
          OmegaSignalingInstance.onClose("manual", () => resolve());
        });
      }
      is_signalling_connected() {
        if (!OmegaSignalingInstance.socket) return false;
        return OmegaSignalingInstance.socket.readyState === 1;
      }
      is_signaling_auth_success() {
        return OmegaSignalingInstance.state.authenticated;
      }
      my_ID() {
        return OmegaSignalingInstance.state.id;
      }
      my_Username() {
        return OmegaSignalingInstance.state.user;
      }
      get_peers() {
        return makeValueSafeForScratch(OmegaRTCInstance.getPeers());
      }
      authenticate({ TOKEN }) {
        if (!OmegaSignalingInstance.socket) {
          console.warn("Signaling server not connected");
          return;
        }
        OmegaSignalingInstance.authenticateWithToken(TOKEN, null);
      }
      // Request microphone permission
      async request_mic_perms() {
        this.hasMicPerms = false;
        try {
          await navigator.mediaDevices.getUserMedia({ audio: true });
          this.hasMicPerms = true;
        } catch (e) {
          console.warn(`Failed to get microphone permission. ${e}`);
          return;
        }
      }
      get_mic_perms() {
        return this.hasMicPerms;
      }
      new_dchan({ CHANNEL, PEER, ORDERED }) {
        if (!OmegaSignalingInstance.socket) return;
        if (!OmegaRTCInstance.doesPeerExist(PEER)) {
          console.warn(`Peer ${PEER} not found.`);
          return;
        }
        if (OmegaRTCInstance.getPeerChannels(PEER).includes(CHANNEL)) {
          console.warn(`Channel ${CHANNEL} with peer ${PEER} already open.`);
          return;
        }
        OmegaRTCInstance.createChannel(
          PEER,
          CHANNEL,
          ORDERED == 1
          // channelIdCounter
        );
      }
      async new_vchan({ PEER }) {
        await OmegaRTCInstance.createVoiceConnection(PEER);
      }
      change_mic_state({ MICSTATE, PEER }) {
        OmegaRTCInstance.changeMicState(PEER, MICSTATE == 1);
      }
      is_peer_vchan_open({ PEER }) {
        return OmegaRTCInstance.isVoiceConnectionOpen(PEER);
      }
      get_mic_mute_state({ PEER }) {
        return OmegaRTCInstance.isVoiceConnectionMuted(PEER);
      }
      close_vchan({ PEER }) {
        OmegaRTCInstance.closeVoiceConnection(PEER);
      }
      close_dchan({ CHANNEL, PEER }) {
        if (CHANNEL == "default") {
          console.warn("You may not close the default data channel.");
          return;
        }
        if (!OmegaRTCInstance.doesPeerExist(PEER)) {
          console.warn(`Peer ${PEER} not found.`);
          return;
        }
        if (!OmegaRTCInstance.dataChannels.get(PEER).get(CHANNEL)) {
          console.warn(`Channel ${CHANNEL} does not exist for peer ${PEER}`);
          return;
        }
        OmegaRTCInstance.dataChannels.get(PEER).get(CHANNEL).close();
      }
      get_peer_channels({ PEER }) {
        return makeValueSafeForScratch(OmegaRTCInstance.getPeerChannels(PEER));
      }
      is_peer_connected({ PEER }) {
        return OmegaRTCInstance.doesPeerExist(PEER);
      }
      get_global_channel_data({ CHANNEL }) {
        if (!this.globalDataStorage.has(CHANNEL)) return "";
        return makeValueSafeForScratch(this.globalDataStorage.get(CHANNEL));
      }
      get_private_channel_data({ CHANNEL, PEER }) {
        if (!OmegaRTCInstance.doesPeerExist(PEER)) return "";
        if (!OmegaRTCInstance.doesPeerChannelExist(PEER, CHANNEL)) return "";
        return makeValueSafeForScratch(
          OmegaRTCInstance.dataChannels
            .get(PEER)
            .get(CHANNEL)
            .dataStorage.get("pmsg")
        );
      }
      /*
      store_private_channel_in_variable(
        { CHANNEL, PEER, VAR },
        util: VM.BlockUtility
      ): void {
        // TODO
      } */
      get_client_mode() {
        if (OmegaSignalingInstance.state.mode == 1) {
          return "host";
        } else if (OmegaSignalingInstance.state.mode == 2) {
          return "peer";
        } else return "";
      }
      // @ts-expect-error Function is temporarily disabled
      make_private_networked_list({ LIST, PEER }, util) {
        return;
      }
      make_global_networked_list({ LIST }, util) {
        const target = util.target;
        const list = target.lookupVariableByNameAndType(LIST, "list");
        if (!list) {
          console.warn(`List ${LIST} not found.`);
          return;
        }
        NetworkedScratchDataInstance.makeNetworkedList(list);
        backupSettings(this.runtime);
      }
      // @ts-expect-error Function is not yet implemented
      on_private_message({ PEER, CHANNEL }) {}
      // @ts-expect-error Function is not yet implemented
      on_broadcast_message({ CHANNEL }) {}
      get_new_peer() {
        return this.newestPeerConnected;
      }
    }
    Scratch2.vm.runtime.on("BEFORE_EXECUTE", () => {
      NetworkedScratchDataInstance.update(Scratch2.vm.runtime);
    });
    Scratch2.vm.runtime.on("PROJECT_LOADED", () =>
      restoreSettings(Scratch2.vm.runtime)
    );
    Scratch2.vm.runtime.on("PROJECT_STOP_ALL", () => {
      if (!OmegaSignalingInstance.socket) return;
      return new Promise((resolve) => {
        Array.from(OmegaRTCInstance.peerConnections.keys()).forEach((peer) => {
          OmegaRTCInstance.closeVoiceConnection(peer);
          OmegaRTCInstance.disconnectDataPeer(peer);
        });
        OmegaSignalingInstance.Disconnect();
        OmegaSignalingInstance.onClose("manual", () => resolve());
      });
    });
    if (Scratch2.vm?.runtime) {
      Scratch2.extensions.register(new CloudLink5(Scratch2.vm));
    } else {
      throw new Error(
        "This extension is not supported in this Scratch Mod because it does not expose a `vm` property."
      );
    }
  })(Scratch);
})();","https://extensions.turbowarp.org/Lily/Skins.js","https://extensions.turbowarp.org/Lily/MoreTimers.js","https://extensions.turbowarp.org/JeremyGamer13/tween.js","https://extensions.turbowarp.org/Xeltalliv/clippingblending.js","https://extensions.turbowarp.org/obviousAlexC/SensingPlus.js","https://extensions.turbowarp.org/NexusKitten/moremotion.js","data:application/x-javascript;base64,// Name: Display Text
// ID: SPdisText
// Description: Display Text in Your Projects!
// By: SharkPool

// Version V.1.3.4

(function (Scratch) {
  "use strict";
  if (!Scratch.extensions.unsandboxed) throw new Error("Display Text Extension must run unsandboxed!");

  const menuIconURI =
"data:image/svg+xml;base64,PHN2ZyB2ZXJzaW9uPSIxLjEiIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIgeG1sbnM6eGxpbms9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsiIHdpZHRoPSI2NS4yMzM5NiIgaGVpZ2h0PSI2NS4yMzM5NiIgdmlld0JveD0iMCwwLDY1LjIzMzk2LDY1LjIzMzk2Ij48ZyB0cmFuc2Zvcm09InRyYW5zbGF0ZSgtMjA3LjM4MzAyLC0xNDcuMzgzMDIpIj48ZyBkYXRhLXBhcGVyLWRhdGE9InsmcXVvdDtpc1BhaW50aW5nTGF5ZXImcXVvdDs6dHJ1ZX0iIGZpbGwtcnVsZT0ibm9uemVybyIgc3Ryb2tlLWxpbmVjYXA9ImJ1dHQiIHN0cm9rZS1saW5lam9pbj0ibWl0ZXIiIHN0cm9rZS1taXRlcmxpbWl0PSIxMCIgc3Ryb2tlLWRhc2hhcnJheT0iIiBzdHJva2UtZGFzaG9mZnNldD0iMCIgc3R5bGU9Im1peC1ibGVuZC1tb2RlOiBub3JtYWwiPjxwYXRoIGQ9Ik0yMDcuMzgzMDIsMTgwYzAsLTE4LjAxMzg2IDE0LjYwMzEyLC0zMi42MTY5OCAzMi42MTY5OCwtMzIuNjE2OThjMTguMDEzODYsMCAzMi42MTY5OCwxNC42MDMxMiAzMi42MTY5OCwzMi42MTY5OGMwLDE4LjAxMzg2IC0xNC42MDMxMiwzMi42MTY5OCAtMzIuNjE2OTgsMzIuNjE2OThjLTE4LjAxMzg2LDAgLTMyLjYxNjk4LC0xNC42MDMxMiAtMzIuNjE2OTgsLTMyLjYxNjk4eiIgZmlsbD0iIzNjNGU1YyIgc3Ryb2tlPSJub25lIiBzdHJva2Utd2lkdGg9IjAiLz48cGF0aCBkPSJNMjEwLjc3MzYyLDE4MGMwLC0xNi4xNDEyOSAxMy4wODUxLC0yOS4yMjYzOCAyOS4yMjYzOCwtMjkuMjI2MzhjMTYuMTQxMjksMCAyOS4yMjYzOCwxMy4wODUxIDI5LjIyNjM4LDI5LjIyNjM4YzAsMTYuMTQxMjkgLTEzLjA4NTEsMjkuMjI2MzggLTI5LjIyNjM4LDI5LjIyNjM4Yy0xNi4xNDEyOSwwIC0yOS4yMjYzOCwtMTMuMDg1MSAtMjkuMjI2MzgsLTI5LjIyNjM4eiIgZmlsbD0iIzc3ODg5OSIgc3Ryb2tlPSIjMDAwMDAwIiBzdHJva2Utd2lkdGg9IjAiLz48cGF0aCBkPSJNMjI2LjQ1ODg1LDE5Ni44NjIzNmMtMS44MzQyNSwwIC0zLjMyMTIxLC0xLjQ4Njk2IC0zLjMyMTIxLC0zLjMyMTIydi00Ljk0ODIyaDIuNjA3NTR2Mi44NTQyNmMwLDEuNTUwNjEgMS4yNTcwMiwyLjgwNzY0IDIuODA3NjMsMi44MDc2NGgyLjg1NDI2djIuNjA3NTR6TTI1MS40NDcxOSwxOTQuMjU0ODJjMS41NTA2MSwwIDIuODA3NjMsLTEuMjU3MDIgMi44MDc2MywtMi44MDc2NHYtMi44NTQyNmgyLjYwNzU0djQuOTQ4MjJjMCwxLjgzNDI2IC0xLjQ4Njk2LDMuMzIxMjIgLTMuMzIxMjIsMy4zMjEyMmgtNC45NDgyMnYtMi42MDc1NHpNMjIzLjEzNzY0LDE2Ni40NTg4NWMwLC0xLjgzNDI2IDEuNDg2OTUsLTMuMzIxMjEgMy4zMjEyMSwtMy4zMjEyMWg0Ljk0ODIydjIuNjA3NTRoLTIuODU0MjZjLTEuNTUwNjEsMCAtMi44MDc2MywxLjI1NzAyIC0yLjgwNzYzLDIuODA3NjN2Mi44NTQyNmgtMi42MDc1NHpNMjUzLjU0MTE1LDE2My4xMzc2NGMxLjgzNDI2LDAgMy4zMjEyMiwxLjQ4Njk1IDMuMzIxMjIsMy4zMjEyMXY0Ljk0ODIyaC0yLjYwNzU0di0yLjg1NDI2YzAsLTEuNTUwNjEgLTEuMjU3MDIsLTIuODA3NjMgLTIuODA3NjMsLTIuODA3NjNoLTIuODU0MjZ2LTIuNjA3NTR6IiBmaWxsPSIjZmZmZmZmIiBzdHJva2U9IiNmZmZmZmYiIHN0cm9rZS13aWR0aD0iMi41Ii8+PHBhdGggZD0iTTIzMy4xOTQsMTc0LjkwMzUyYy0wLjUxMjcyLDAgLTAuOTI4MzYsLTAuNDE1NjQgLTAuOTI4MzYsLTAuOTI4MzZ2LTEuNjI2M2MwLC0wLjUxMjcyIDAuNDE1NjQsLTAuOTI4MzYgMC45MjgzNiwtMC45MjgzNmgxMy42MTE5OWMwLjUxMjcyLDAgMC45MjgzNiwwLjQxNTY0IDAuOTI4MzYsMC45MjgzNnYxLjYyNjNjMCwwLjUxMjcyIC0wLjQxNTY0LDAuOTI4MzYgLTAuOTI4MzYsMC45MjgzNnoiIGZpbGw9IiNmZmZmZmYiIHN0cm9rZT0iI2ZmZmZmZiIgc3Ryb2tlLXdpZHRoPSIxLjUiLz48cGF0aCBkPSJNMjM4LjI1ODQ5LDE3NC4wMzkxNWMwLC0wLjUxMjcyIDAuNDE1NjQsLTAuOTI4MzYgMC45MjgzNiwtMC45MjgzNmwxLjYyNjMxLDBjMC41MTI3MiwwIDAuOTI4MzYsMC40MTU2NCAwLjkyODM2LDAuOTI4MzZsMCwxMy42MTE5OWMwLDAuNTEyNzIgLTAuNDE1NjQsMC45MjgzNiAtMC45MjgzNiwwLjkyODM2aC0xLjYyNjMxYy0wLjUxMjcyLDAgLTAuOTI4MzYsLTAuNDE1NjQgLTAuOTI4MzYsLTAuOTI4MzZ6IiBmaWxsPSIjZmZmZmZmIiBzdHJva2U9IiNmZmZmZmYiIHN0cm9rZS13aWR0aD0iMS41Ii8+PC9nPjwvZz48L3N2Zz4=";

  const blockIconURI =
"data:image/svg+xml;base64,PHN2ZyB2ZXJzaW9uPSIxLjEiIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIgeG1sbnM6eGxpbms9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsiIHdpZHRoPSI0OS42MjQ0MSIgaGVpZ2h0PSI0OS42MjQ0MSIgdmlld0JveD0iMCwwLDQ5LjYyNDQxLDQ5LjYyNDQxIj48ZyB0cmFuc2Zvcm09InRyYW5zbGF0ZSgtMjE1LjE4NzgsLTE1NS4xODc4KSI+PGcgZGF0YS1wYXBlci1kYXRhPSJ7JnF1b3Q7aXNQYWludGluZ0xheWVyJnF1b3Q7OnRydWV9IiBmaWxsLXJ1bGU9Im5vbnplcm8iIHN0cm9rZS1saW5lY2FwPSJidXR0IiBzdHJva2UtbGluZWpvaW49Im1pdGVyIiBzdHJva2UtbWl0ZXJsaW1pdD0iMTAiIHN0cm9rZS1kYXNoYXJyYXk9IiIgc3Ryb2tlLWRhc2hvZmZzZXQ9IjAiIHN0eWxlPSJtaXgtYmxlbmQtbW9kZTogbm9ybWFsIj48cGF0aCBkPSJNMjE1LjE4NzgsMjA0LjgxMjJ2LTQ5LjYyNDQxaDQ5LjYyNDQxdjQ5LjYyNDQxeiIgZmlsbD0iIzc3ODg5OSIgc3Ryb2tlPSJub25lIiBzdHJva2Utd2lkdGg9IjAiLz48cGF0aCBkPSJNMjI2LjQ1ODg1LDE5Ni44NjIzNmMtMS44MzQyNSwwIC0zLjMyMTIxLC0xLjQ4Njk2IC0zLjMyMTIxLC0zLjMyMTIydi00Ljk0ODIyaDIuNjA3NTR2Mi44NTQyNmMwLDEuNTUwNjEgMS4yNTcwMiwyLjgwNzY0IDIuODA3NjMsMi44MDc2NGgyLjg1NDI2djIuNjA3NTR6TTI1MS40NDcxOSwxOTQuMjU0ODJjMS41NTA2MSwwIDIuODA3NjMsLTEuMjU3MDIgMi44MDc2MywtMi44MDc2NHYtMi44NTQyNmgyLjYwNzU0djQuOTQ4MjJjMCwxLjgzNDI2IC0xLjQ4Njk2LDMuMzIxMjIgLTMuMzIxMjIsMy4zMjEyMmgtNC45NDgyMnYtMi42MDc1NHpNMjIzLjEzNzY0LDE2Ni40NTg4NWMwLC0xLjgzNDI2IDEuNDg2OTUsLTMuMzIxMjEgMy4zMjEyMSwtMy4zMjEyMWg0Ljk0ODIydjIuNjA3NTRoLTIuODU0MjZjLTEuNTUwNjEsMCAtMi44MDc2MywxLjI1NzAyIC0yLjgwNzYzLDIuODA3NjN2Mi44NTQyNmgtMi42MDc1NHpNMjUzLjU0MTE1LDE2My4xMzc2NGMxLjgzNDI2LDAgMy4zMjEyMiwxLjQ4Njk1IDMuMzIxMjIsMy4zMjEyMXY0Ljk0ODIyaC0yLjYwNzU0di0yLjg1NDI2YzAsLTEuNTUwNjEgLTEuMjU3MDIsLTIuODA3NjMgLTIuODA3NjMsLTIuODA3NjNoLTIuODU0MjZ2LTIuNjA3NTR6IiBmaWxsPSIjZmZmZmZmIiBzdHJva2U9IiNmZmZmZmYiIHN0cm9rZS13aWR0aD0iMi41Ii8+PHBhdGggZD0iTTIzMy4xOTQsMTc0LjkwMzUyYy0wLjUxMjcyLDAgLTAuOTI4MzYsLTAuNDE1NjQgLTAuOTI4MzYsLTAuOTI4MzZ2LTEuNjI2M2MwLC0wLjUxMjcyIDAuNDE1NjQsLTAuOTI4MzYgMC45MjgzNiwtMC45MjgzNmgxMy42MTE5OWMwLjUxMjcyLDAgMC45MjgzNiwwLjQxNTY0IDAuOTI4MzYsMC45MjgzNnYxLjYyNjNjMCwwLjUxMjcyIC0wLjQxNTY0LDAuOTI4MzYgLTAuOTI4MzYsMC45MjgzNnoiIGZpbGw9IiNmZmZmZmYiIHN0cm9rZT0iI2ZmZmZmZiIgc3Ryb2tlLXdpZHRoPSIxLjUiLz48cGF0aCBkPSJNMjM4LjI1ODQ5LDE3NC4wMzkxNWMwLC0wLjUxMjcyIDAuNDE1NjQsLTAuOTI4MzYgMC45MjgzNiwtMC45MjgzNmgxLjYyNjMxYzAuNTEyNzIsMCAwLjkyODM2LDAuNDE1NjQgMC45MjgzNiwwLjkyODM2djEzLjYxMTk5YzAsMC41MTI3MiAtMC40MTU2NCwwLjkyODM2IC0wLjkyODM2LDAuOTI4MzZoLTEuNjI2MzFjLTAuNTEyNzIsMCAtMC45MjgzNiwtMC40MTU2NCAtMC45MjgzNiwtMC45MjgzNnoiIGZpbGw9IiNmZmZmZmYiIHN0cm9rZT0iI2ZmZmZmZiIgc3Ryb2tlLXdpZHRoPSIxLjUiLz48L2c+PC9nPjwvc3ZnPg==";

  const render = Scratch.vm.renderer;
  let allText = [];
  let lastRecdVals = {};
  const fontMenu = [
    "Sans Serif", "Serif", "Handwriting",
    "Marker", "Curly", "Pixel"
  ];

  const xmlEscape = function (unsafe) {
    unsafe = String(unsafe);
    return unsafe.replace(/[<>&'"]/g, c => {
      switch (c) {
        case "<": return "&lt;";
        case ">": return "&gt;";
        case "&": return "&amp;";
        case "'": return "&apos;";
        case "\"": return "&quot;";
      }
    });
  };

  class SPdisText {
    constructor() {
      Scratch.vm.runtime.on("PROJECT_START", () => { this.removeAllTxt() });
      Scratch.vm.runtime.on("PROJECT_STOP_ALL", () => { this.removeAllTxt() });
    }
    getInfo() {
      return {
        id: "SPdisText",
        name: "Display Text",
        color1: "#778899",
        color2: "#5E707F",
        color3: "#3C4E5C",
        menuIconURI,
        blockIconURI,
        blocks: [
          {
            opcode: "printTxt",
            blockType: Scratch.BlockType.COMMAND,
            text: "print text [TXT] with ID [ID]",
            arguments: {
              ID: { type: Scratch.ArgumentType.STRING, defaultValue: "my-text" },
              TXT: {
                type: Scratch.ArgumentType.STRING,
                defaultValue: "hello world"
              }
            },
          },
          {
            opcode: "replaceTxt",
            blockType: Scratch.BlockType.COMMAND,
            text: "replace text of ID [ID] with [TXT]",
            arguments: {
              ID: { type: Scratch.ArgumentType.STRING, defaultValue: "my-text" },
              TXT: {
                type: Scratch.ArgumentType.STRING,
                defaultValue: "lorem ipsum"
              }
            },
          },
          {
            opcode: "removeTxt",
            blockType: Scratch.BlockType.COMMAND,
            text: "remove text with ID [ID]",
            arguments: {
              ID: { type: Scratch.ArgumentType.STRING, defaultValue: "my-text" }
            },
          },
          {
            opcode: "removeAllTxt",
            blockType: Scratch.BlockType.COMMAND,
            text: "remove all text"
          },
          "---",
          {
            opcode: "displayedTexts",
            blockType: Scratch.BlockType.REPORTER,
            text: "printed texts from ID [ID]",
            arguments: {
              ID: { type: Scratch.ArgumentType.STRING, defaultValue: "my-text" }
            },
          },
          {
            opcode: "existingID",
            blockType: Scratch.BlockType.BOOLEAN,
            text: "text with ID [ID] exist?",
            arguments: {
              ID: { type: Scratch.ArgumentType.STRING, defaultValue: "my-text" }
            },
          },
          {
            opcode: "allIDs",
            blockType: Scratch.BlockType.REPORTER,
            text: "all text IDs"
          },
          "---",
          {
            opcode: "debug",
            blockType: Scratch.BlockType.COMMAND,
            text: "toggle debug mode [TOGGLE]",
            arguments: {
              TOGGLE: { type: Scratch.ArgumentType.STRING, menu: "TOGGLE" }
            },
          },
          { blockType: Scratch.BlockType.LABEL, text: "Formatting" },
          {
            opcode: "setTextFont",
            blockType: Scratch.BlockType.COMMAND,
            text: "set font of ID [ID] to [FONT]",
            arguments: {
              ID: { type: Scratch.ArgumentType.STRING, defaultValue: "my-text" },
              FONT: { type: Scratch.ArgumentType.STRING, menu: "FONTS" }
            },
          },
          {
            opcode: "setFontSize",
            blockType: Scratch.BlockType.COMMAND,
            text: "set font size of ID [ID] to [SIZE]px",
            arguments: {
              ID: { type: Scratch.ArgumentType.STRING, defaultValue: "my-text" },
              SIZE: { type: Scratch.ArgumentType.NUMBER, defaultValue: 30 }
            },
          },
          {
            opcode: "setThick",
            blockType: Scratch.BlockType.COMMAND,
            text: "set boldness of ID [ID] to [NUM]",
            arguments: {
              NUM : { type: Scratch.ArgumentType.NUMBER, defaultValue: 100 },
              ID: { type: Scratch.ArgumentType.STRING, defaultValue: "my-text" }
            }
          },
          {
            opcode: "setTextAlignment",
            blockType: Scratch.BlockType.COMMAND,
            text: "set text alignment of ID [ID] to [ALIGNMENT]",
            arguments: {
              ID: { type: Scratch.ArgumentType.STRING, defaultValue: "my-text" },
              ALIGNMENT: { type: Scratch.ArgumentType.STRING, menu: "ALIGNMENTS" }
            },
          },
          {
            opcode: "setMargins",
            blockType: Scratch.BlockType.COMMAND,
            text: "set margins of ID [ID] to width [WIDTH] height [HEIGHT]",
            arguments: {
              ID: { type: Scratch.ArgumentType.STRING, defaultValue: "my-text" },
              WIDTH: { type: Scratch.ArgumentType.NUMBER, defaultValue: 100 },
              HEIGHT: { type: Scratch.ArgumentType.NUMBER, defaultValue: 30 }
            },
          },
          {
            opcode: "setTextSpacing",
            blockType: Scratch.BlockType.COMMAND,
            text: "set [ATT] spacing of ID [ID] to [SPACING] px",
            arguments: {
              ID: { type: Scratch.ArgumentType.STRING, defaultValue: "my-text" },
              SPACING: { type: Scratch.ArgumentType.NUMBER, defaultValue: 5 },
              ATT: { type: Scratch.ArgumentType.STRING, menu: "TEXT_ATT" }
            },
          },
          {
            opcode: "setOverflow",
            blockType: Scratch.BlockType.COMMAND,
            text: "set text overflow of ID [ID] to [TYPE]",
            arguments: {
              ID: { type: Scratch.ArgumentType.STRING, defaultValue: "my-text" },
              TYPE: { type: Scratch.ArgumentType.STRING, menu: "OVERFLOW" }
            },
          },
          "---",
          {
            opcode: "attOfText",
            blockType: Scratch.BlockType.REPORTER,
            text: "[ATT] of text with ID [ID]",
            arguments: {
              ID: { type: Scratch.ArgumentType.STRING, defaultValue: "my-text" },
              ATT: { type: Scratch.ArgumentType.STRING, menu: "FORMATS" }
            },
          },
          {
            opcode: "lineCnt",
            blockType: Scratch.BlockType.REPORTER,
            text: "# of lines in text ID [ID]",
            arguments: {
              ID: { type: Scratch.ArgumentType.STRING, defaultValue: "my-text" }
            },
          },
          { blockType: Scratch.BlockType.LABEL, text: "Text Visuals" },
          {
            opcode: "setTextColor",
            blockType: Scratch.BlockType.COMMAND,
            text: "set text color of ID [ID] to [COLOR]",
            arguments: {
              ID: { type: Scratch.ArgumentType.STRING, defaultValue: "my-text" },
              COLOR: { type: Scratch.ArgumentType.COLOR, defaultValue: "#000000" }
            },
          },
          {
            opcode: "setTextDropShadow",
            blockType: Scratch.BlockType.COMMAND,
            text: "set text shadow of ID [ID] to x [x] y [y] z [z] color [COLOR]",
            arguments: {
              ID: { type: Scratch.ArgumentType.STRING, defaultValue: "my-text" },
              x: { type: Scratch.ArgumentType.NUMBER, defaultValue: 0 },
              y: { type: Scratch.ArgumentType.NUMBER, defaultValue: 0 },
              z: { type: Scratch.ArgumentType.NUMBER, defaultValue: 2 },
              COLOR: { type: Scratch.ArgumentType.COLOR, defaultValue: "#ff0000" }
            },
          },
          {
            opcode: "setTextOutline",
            blockType: Scratch.BlockType.COMMAND,
            text: "set outline of ID [ID] to [COLOR] with thickness [THICKNESS]",
            arguments: {
              ID: { type: Scratch.ArgumentType.STRING, defaultValue: "my-text" },
              COLOR: { type: Scratch.ArgumentType.COLOR, defaultValue: "#ff0000" },
              THICKNESS: { type: Scratch.ArgumentType.NUMBER, defaultValue: 3 }
            },
          },
          {
            opcode: "setLine",
            blockType: Scratch.BlockType.COMMAND,
            text: "set text line of ID [ID] to [TYPE1] [TYPE2] colored [COLOR] thickness [THICK]",
            arguments: {
              ID: { type: Scratch.ArgumentType.STRING, defaultValue: "my-text" },
              TYPE1: { type: Scratch.ArgumentType.STRING, menu: "STYLE" },
              TYPE2: { type: Scratch.ArgumentType.STRING, menu: "LINE_TYPE" },
              COLOR: { type: Scratch.ArgumentType.COLOR, defaultValue: "#ff0000" },
              THICK: { type: Scratch.ArgumentType.NUMBER, defaultValue: 2 }
            },
          },
          "---",
          {
            opcode: "makeGradient",
            blockType: Scratch.BlockType.REPORTER,
            text: "make a [TYPE] gradient with [COLOR1] and [COLOR2] at angle [ANGLE]",
            arguments: {
              COLOR1: { type: Scratch.ArgumentType.COLOR, defaultValue: "#ff0000" },
              COLOR2: { type: Scratch.ArgumentType.COLOR, defaultValue: "#00ff00" },
              ANGLE: { type: Scratch.ArgumentType.ANGLE, defaultValue: 90 },
              TYPE: { type: Scratch.ArgumentType.STRING, menu: "GRADIENTS" }
            },
          },
          { blockType: Scratch.BlockType.LABEL, text: "↓ Will Lose Some Formatting ↓" },
          {
            opcode: "setTextCurve",
            blockType: Scratch.BlockType.COMMAND,
            text: "set text curve of ID [ID] to [ARC]",
            arguments: {
              ID: { type: Scratch.ArgumentType.STRING, defaultValue: "my-text" },
              ARC: { type: Scratch.ArgumentType.STRING, defaultValue: "<svg>" }
            },
          },
          {
            opcode: "presetCurve",
            blockType: Scratch.BlockType.REPORTER,
            text: "preset curve [ARC]",
            disableMonitor: true,
            arguments: {
              ARC: { type: Scratch.ArgumentType.STRING, menu: "ARCS" }
            },
          },
          { blockType: Scratch.BlockType.LABEL, text: "Positioning" },
          {
            opcode: "presetTextPosition",
            blockType: Scratch.BlockType.COMMAND,
            text: "preset position of ID [ID] to x: [X] y: [Y]",
            arguments: {
              ID: { type: Scratch.ArgumentType.STRING, defaultValue: "my-text" },
              X: { type: Scratch.ArgumentType.NUMBER, defaultValue: 0 },
              Y: { type: Scratch.ArgumentType.NUMBER, defaultValue: 0 }
            },
          },
          {
            opcode: "setTextPosition",
            blockType: Scratch.BlockType.COMMAND,
            text: "set position of ID [ID] to x: [X] y: [Y]",
            arguments: {
              ID: { type: Scratch.ArgumentType.STRING, defaultValue: "my-text" },
              X: { type: Scratch.ArgumentType.NUMBER, defaultValue: 0 },
              Y: { type: Scratch.ArgumentType.NUMBER, defaultValue: 0 }
            },
          },
          {
            opcode: "setTextZIndex",
            blockType: Scratch.BlockType.COMMAND,
            text: "set layer of ID [ID] to [Z_INDEX]",
            arguments: {
              ID: { type: Scratch.ArgumentType.STRING, defaultValue: "my-text" },
              Z_INDEX: { type: Scratch.ArgumentType.NUMBER, defaultValue: 1 }
            },
          },
          {
            opcode: "textPosition",
            blockType: Scratch.BlockType.REPORTER,
            text: "[ATT] of ID [ID]",
            arguments: {
              ID: { type: Scratch.ArgumentType.STRING, defaultValue: "my-text" },
              ATT: { type: Scratch.ArgumentType.STRING, menu: "POS" }
            },
          },
          { blockType: Scratch.BlockType.LABEL, text: "Effects" },
          {
            opcode: "setEffect",
            blockType: Scratch.BlockType.COMMAND,
            text: "set [EFFECT] of ID [ID] to [VALUE]",
            arguments: {
              ID: { type: Scratch.ArgumentType.STRING, defaultValue: "my-text" },
              VALUE: { type: Scratch.ArgumentType.NUMBER, defaultValue: 5 },
              EFFECT: { type: Scratch.ArgumentType.STRING, menu: "EFFECTS" }
            },
          },
          {
            opcode: "amtOfEffect",
            blockType: Scratch.BlockType.REPORTER,
            text: "current [EFFECT] of ID [ID]",
            arguments: {
              EFFECT: { type: Scratch.ArgumentType.STRING, menu: "EFFECTS" },
              ID: { type: Scratch.ArgumentType.STRING, defaultValue: "my-text" }
            },
          },
          {
            opcode: "resetEffect",
            blockType: Scratch.BlockType.COMMAND,
            text: "reset effects of ID [ID]",
            arguments: {
              ID: { type: Scratch.ArgumentType.STRING, defaultValue: "my-text" }
            },
          },
        ],
        menus: {
          TOGGLE: ["on", "off"],
          FONTS: {
            acceptReporters: true,
            items: "allFonts"
          },
          STYLE: {
            acceptReporters: true,
            items: ["solid", "wavy", "dashed", "double"]
          },
          LINE_TYPE: {
            acceptReporters: true,
            items: ["underline", "strikethrough"]
          },
          ALIGNMENTS: {
            acceptReporters: true,
            items: ["left", "right", "center"]
          },
          TEXT_ATT: ["letter", "line"],
          GRADIENTS: {
            acceptReporters: true,
            items: ["linear", "radial"]
          },
          POS: ["x position", "y position", "z layer"],
          OVERFLOW: ["visible", "hidden"],
          ARCS: ["circle", "hill", "dip", "wave"],
          THICK: [
            { text : "thick", value : "900" },
            { text : "medium", value : "600" },
            { text : "none", value : "1" },
          ],
          FORMATS: {
            acceptReporters: true,
            items: [
              { text: "font", value: "fontFamily" },
              { text: "font size", value: "fontSize" },
              { text: "boldness", value: "fontWeight" },
              { text: "alignment", value: "textAlign" },
              { text: "margin width", value: "width" },
              { text: "margin height", value: "height" },
              { text: "display width", value: "box2w" },
              { text: "display height", value: "box2h" },
              { text: "letter spacing", value: "letterSpacing" },
              { text: "line spacing", value: "lineHeight" },
              { text: "overflow type", value: "overflow" }
            ]
          },
          EFFECTS: {
            acceptReporters: true,
            items: [
              { text: "blur", value: "blur" },
              { text: "saturation", value: "saturate" },
              { text: "contrast", value: "contrast" },
              { text: "brightness", value: "brightness" },
              { text: "hue", value: "hue-rotate" },
              { text: "opacity", value: "opacity" },
              { text: "sepia", value: "sepia" },
              { text: "invert", value: "invert" },
              { text: "direction", value: "rotate" },
              { text: "scale x", value: "scaleX" },
              { text: "scale y", value: "scaleY" },
              { text: "skew x", value: "skewX" },
              { text: "skew y", value: "skewY" },
            ]
          }
        }
      };
    }

    allFonts() {
      const customFonts = Scratch.vm.runtime.fontManager ? Scratch.vm.runtime.fontManager.getFonts().map((i) => ({ text: i.name, value: i.family })) : [];
      return [...fontMenu, ...customFonts];
    }

    fixID(ID) {
      return xmlEscape(Scratch.Cast.toString(ID).replaceAll(" ", "_")
        .replaceAll(/[#%(),.{}[/\]$@^*&'";:]/g, "-"));
    }

    debug(args) {
      const toggle = args.TOGGLE === "on" ? "solid" : "none";
      const elements = document.querySelectorAll(`[id^="SP_Text-Ext-"]`);
      elements.forEach((element) => {
        element.style.border = toggle;
        element.style.borderWidth = "1px";
        const color = element.style.textAlign === "center" ? "#00ff00" : element.style.textAlign === "right" ? "#0000ff" : "#ff0000";
        element.style.borderColor = color;
      });
      const cross = document.getElementById(`SP_Text-Debug-Cross`);
      if (toggle === "none" && cross) {
        cross.parentNode.removeChild(cross);
      } else if (toggle === "solid" && !cross) {
        const imageUrl =
          "data:image/png;base64,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";
        const crossElement = document.createElement("img");
        crossElement.src = imageUrl;
        crossElement.id = "SP_Text-Debug-Cross";
        crossElement.style.position = "absolute";
        crossElement.style.width = "480px";
        crossElement.style.height = "360px";
        crossElement.style.transform = "translate(-50%, -50%)";
        crossElement.style.zIndex = "0";
        render.addOverlay(crossElement, "scale-centered");
        allText.push(`#SP_Text-Debug-Cross`);
      }
    }

    printTxt(args) {
      args.ID = this.fixID(args.ID);
      const newTextElement = document.createElement("div");
      newTextElement.innerHTML = xmlEscape(args.TXT).replace(/\n/g, "<br>");
      newTextElement.id = `SP_Text-Ext-${args.ID}`;
      newTextElement.classList.add(args.ID);
      render.addOverlay(newTextElement, "scale-centered");
      allText.push(`#SP_Text-Ext-${args.ID}`);
      const box = newTextElement.getBoundingClientRect();
      if (lastRecdVals.textMAR === undefined) this.setMargins({ ID : args.ID, WIDTH : box.width / 2, HEIGHT : box.height });

      // add formatting (if any)
      const propertiesAndMethods = [
        ["textMAR", "setMargins"], ["preTxt1", "presetTextPosition"],
        ["textCLR", "setTextColor"], ["textLIN", "setLine"],
        ["textOUT", "setTextOutline"], ["textSHA", "setTextDropShadow"],
        ["txtFont", "setTextFont"], ["txtFontSZ", "setFontSize"],
        ["txtALI", "setTextAlignment"], ["lineDIS", "setTextSpacing"],
        ["letDIS", "setTextSpacing"], ["textOVR", "setOverflow"],
        ["txtFontTK", "setThick"]
      ];
      for (const [property, method] of propertiesAndMethods) {
        if (lastRecdVals[property] && lastRecdVals[property].inputs.ID === args.ID) {
          this[method](lastRecdVals[property].inputs);
        }
      }
    }

    replaceTxt(args) {
      const elements = document.querySelectorAll(`#SP_Text-Ext-${this.fixID(args.ID)}`);
      if (elements.length > 0) {
        elements.forEach((element) => { element.innerHTML = xmlEscape(args.TXT).replace(/\n/g, "<br>") });
      } else {
        this.printTxt(args);
      }
    }

    removeTxt(args) {
      args.ID = this.fixID(args.ID);
      const elementsToRemove = document.querySelectorAll(`#SP_Text-Ext-${args.ID}`);
      elementsToRemove.forEach((element) => {
        render.removeOverlay(element);
        const index = allText.indexOf(`#SP_Text-Ext-${args.ID}`);
        if (index !== -1) allText.splice(index, 1);
      });
    }

    removeAllTxt() {
      for (let i = 0; i < allText.length; i++) {
        const elementsToRemove = document.querySelectorAll(allText[i]);
        elementsToRemove.forEach((element) => { render.removeOverlay(element) });
      }
      allText = [];
    }

    displayedTexts(args) {
      let texts = [];
      const elements = document.querySelectorAll(`#SP_Text-Ext-${this.fixID(args.ID)}`);
      elements.forEach((element) => { texts.push(element.textContent) });
      return JSON.stringify(texts);
    }

    allIDs() {
      const cleanedIDs = allText.map((item) => item.replace(/^#SP_Text-Ext-/, ""));
      for (let i = cleanedIDs.length - 1; i >= 0; i--) {
        if (cleanedIDs[i] === "#SP_Text-Debug-Cross") cleanedIDs.splice(i, 1);
      }
      return JSON.stringify(cleanedIDs);
    }

    existingID(args) {
      const index = allText.indexOf(`#SP_Text-Ext-${this.fixID(args.ID)}`);
      return Scratch.Cast.toBoolean(allText[index]);
    }

    makeGradient(args) { return `${args.TYPE}-gradient(${args.ANGLE}deg, ${args.COLOR1}, ${args.COLOR2})` }

    setTextColor(args) {
      const elements = document.querySelectorAll(`#SP_Text-Ext-${this.fixID(args.ID)}`);
      elements.forEach((element) => {
        element.style.color = args.COLOR;
        if (args.COLOR.includes("gradient")) {
          element.style.background = args.COLOR;
          element.style.color = "transparent";
          element.style.webkitTextFillColor = "transparent";
          element.style.webkitBackgroundClip = "text";
        } else {
          element.style.color = args.COLOR;
          element.style.background = "none";
          element.style.webkitTextFillColor = "initial";
          element.style.webkitBackgroundClip = "initial";
        }
      });
      lastRecdVals["textCLR"] = {inputs: args};
    }

    setTextDropShadow(args) {
      const elements = document.querySelectorAll(`#SP_Text-Ext-${this.fixID(args.ID)}`);
      elements.forEach((element) => {
        element.style.textShadow = args.z === 0 ? "none" : `${args.x}px ${args.y * -1}px ${args.z}px ${args.COLOR}`;
      });
      lastRecdVals["textSHA"] = {inputs: args};
    }

    setOverflow(args) {
      const elements = document.querySelectorAll(`#SP_Text-Ext-${this.fixID(args.ID)}`);
      elements.forEach((element) => { element.style.overflow = args.TYPE });
      lastRecdVals["textOVR"] = {inputs: args};
    }

    setTextOutline(args) {
      const elements = document.querySelectorAll(`#SP_Text-Ext-${this.fixID(args.ID)}`);
      elements.forEach((element) => {
        element.style.webkitTextStrokeColor = args.COLOR;
        element.style.webkitTextStrokeWidth = `${args.THICKNESS}px`;
        //multi-platform support cuz we cant have nice things
        element.style.textStrokeColor = args.COLOR;
        element.style.textStrokeWidth = `${args.THICKNESS}px`;
        element.style.mozTextStrokeColor = args.COLOR;
        element.style.mozTextStrokeWidth = `${args.THICKNESS}px`;
      });
      lastRecdVals["textOUT"] = {inputs: args};
    }

    setLine(args) {
      const lineType = args.TYPE2.replace("strike", "line-");
      const elements = document.querySelectorAll(`#SP_Text-Ext-${this.fixID(args.ID)}`);
      elements.forEach((element) => {
        element.style.textDecorationLine = lineType;
        element.style.textDecorationStyle = args.TYPE1;
        element.style.textDecorationThickness = `${args.THICK}px`;
        element.style.textDecorationColor = args.COLOR;
      });
      lastRecdVals["textLIN"] = {inputs: args};
    }

    setMargins(args) {
      const elements = document.querySelectorAll(`#SP_Text-Ext-${this.fixID(args.ID)}`);
      elements.forEach((element) => {
        element.style.width = `${args.WIDTH}px`;
        element.style.height = `${args.HEIGHT}px`;
      });
      lastRecdVals["textMAR"] = {inputs: args};
    }

    setTextAlignment(args) {
      const elements = document.querySelectorAll(`#SP_Text-Ext-${this.fixID(args.ID)}`);
      elements.forEach((element) => { element.style.textAlign = args.ALIGNMENT });
      lastRecdVals["txtALI"] = {inputs: args};
    }

    setTextFont(args) {
      const elements = document.querySelectorAll(`#SP_Text-Ext-${this.fixID(args.ID)}`);
      elements.forEach((element) => { element.style.fontFamily = args.FONT });
      lastRecdVals["txtFont"] = {inputs: args};
    }

    setFontSize(args) {
      const elements = document.querySelectorAll(`#SP_Text-Ext-${this.fixID(args.ID)}`);
      elements.forEach((element) => { element.style.fontSize = `${args.SIZE}px` });
      lastRecdVals["txtFontSZ"] = {inputs: args};
    }

    setThick(args) {
      const elements = document.querySelectorAll(`#SP_Text-Ext-${this.fixID(args.ID)}`);
      elements.forEach((element) => { element.style.fontWeight = args.NUM * 9 });
      lastRecdVals["txtFontTK"] = {inputs: args};
    }

    setTextSpacing(args) {
      const elements = document.querySelectorAll(`#SP_Text-Ext-${this.fixID(args.ID)}`);
      elements.forEach((element) => {
        element.style[args.ATT === "letter" ? "letterSpacing" : "lineHeight"] = `${args.SPACING}px`;
      });
      lastRecdVals["letDIS"] = {inputs: {ID : args.ID, SPACING : args.SPACING, ATT : "letter"}};
      lastRecdVals["lineDIS"] = {inputs: {ID : args.ID, SPACING : args.SPACING, ATT : "line"}};
    }

    presetTextPosition(args) {
      if (args.isPrint === undefined) {
        lastRecdVals["preTxt1"] = {inputs: {...args, isPrint: true}};
      } else {
        setTimeout(function() {
          const elements = document.querySelectorAll(`#SP_Text-Ext-${this.fixID(args.ID)}`);
          const element = elements[elements.length - 1];
          const centerW = parseFloat(element.style.width) / 2;
          const computedStyle = window.getComputedStyle(element);
          const lineHeight = computedStyle.getPropertyValue("line-height");
          const fontSize = computedStyle.getPropertyValue("font-size");
          const centerH = (lineHeight === "normal" ? parseFloat(fontSize) * 1.2 : parseFloat(lineHeight)) / 2;
          element.style.position = "absolute";
          element.style.left = `${args.X - centerW}px`;
          element.style.top = `${(args.Y * -1) - centerH}px`;
        }.bind(this), 0);
      }
    }

    setTextPosition(args) {
      const elements = document.querySelectorAll(`#SP_Text-Ext-${this.fixID(args.ID)}`);
      elements.forEach((element) => {
        let centerW = parseFloat(element.style.width) / 2;
        if (isNaN(centerW)) centerW = (element.getBoundingClientRect().width ?? 0 ) / 2;
        const computedStyle = window.getComputedStyle(element);
        const lineHeight = computedStyle.getPropertyValue("line-height");
        const fontSize = computedStyle.getPropertyValue("font-size");
        const centerH = (lineHeight === "normal" ? parseFloat(fontSize) * 1.2 : parseFloat(lineHeight)) / 2;
        element.style.position = "absolute";
        element.style.left = `${args.X - centerW}px`;
        element.style.top = `${(args.Y * -1) - centerH}px`;
      });
    }

    textPosition(args) {
      const elements = document.querySelectorAll(`#SP_Text-Ext-${this.fixID(args.ID)}`);
      let value;
      elements.forEach((element) => {
        const centerW = parseFloat(element.style.width) / 2;
        const computedStyle = window.getComputedStyle(element);
        const lineHeight = computedStyle.getPropertyValue("line-height");
        const fontSize = computedStyle.getPropertyValue("font-size");
        const centerH = (lineHeight === "normal" ? parseFloat(fontSize) * 1.2 : parseFloat(lineHeight)) / 2;
        if (args.ATT === "z layer") {
          value = element.parentNode.style.zIndex;
        } else {
          value = parseFloat(element.style[args.ATT.includes("x") ? "left" : "top"]);
          value = ((args.ATT.includes("x") ? centerW : centerH) + value) * (args.ATT.includes("x") ? 1 : -1);
        }
      });
      return Math.round(value * 100) / 100 || 0;
    }

    attOfText(args) {
      const elements = document.querySelectorAll(`#SP_Text-Ext-${this.fixID(args.ID)}`);
      let value;
      if (args.ATT.includes("box2")) {
        const calcs = [];
        elements.forEach((element) => {
          const tempSpan = document.createElement("span");
          tempSpan.innerHTML = element.textContent;
          tempSpan.style.fontSize = element.style.fontSize;
          tempSpan.style.fontFamily = getComputedStyle(element).fontFamily;
          tempSpan.style.display = "inline";
          document.body.appendChild(tempSpan);
          calcs.push(tempSpan[`offset${args.ATT.includes("w") ? "Width" : "Height"}`]);
          document.body.removeChild(tempSpan);
        });
        return JSON.stringify(calcs);
      } else {
        elements.forEach((element) => { value = element.style[args.ATT] });
        value = args.ATT === "fontFamily" || args.ATT === "textAlign" || args.ATT === "overflow" ? value : parseFloat(value);
        value = args.ATT === "fontWeight" ? value / 9 : value;
        return value || "";
      }
    }
  
    lineCnt(args) {
      const elements = document.querySelectorAll(`#SP_Text-Ext-${this.fixID(args.ID)}`);
      let value = [];
      elements.forEach((element) => {
        value.push(element.querySelectorAll("br").length + 1 || 1); 
      });
      value = value.length > 1 ? JSON.stringify(value) : (value[0] || 0);
      return value;
    }

    setTextZIndex(args) {
      const elements = document.querySelectorAll(`#SP_Text-Ext-${this.fixID(args.ID)}`);
      elements.forEach((element) => { element.parentNode.style.zIndex = Math.round(args.Z_INDEX) });
    }

    setEffect(args) {
      const elements = document.querySelectorAll(`#SP_Text-Ext-${this.fixID(args.ID)}`);
      elements.forEach((element) => {
        const curStyles = [
          element.style.filter || "",
          element.parentNode.style.transform || "",
          element.style.opacity || ""
        ];
        const regex = new RegExp(`${args.EFFECT}\\([^)]+\\)`, "g");
        curStyles.forEach((curStyle, index) => {
          curStyles[index] = curStyle.replace(regex, "");
        });
        switch (args.EFFECT) {
          case "saturate":
            element.style.filter = `${curStyles[0]} saturate(${args.VALUE}%)`;
            break;
          case "contrast":
            element.style.filter = `${curStyles[0]} contrast(${args.VALUE + 100}%)`;
            break;
          case "brightness":
            element.style.filter = `${curStyles[0]} brightness(${args.VALUE + 100}%)`;
            break;
          case "hue-rotate":
            element.style.filter = `${curStyles[0]} hue-rotate(${args.VALUE}deg)`;
            break;
          case "opacity":
            element.style.opacity = (100 - args.VALUE) / 100;
            break;
          case "sepia":
            element.style.filter = `${curStyles[0]} sepia(${args.VALUE}%)`;
            break;
          case "invert":
            element.style.filter = `${curStyles[0]} invert(${args.VALUE}%)`;
            break;
          case "rotate":
            element.parentNode.style.transform = `${curStyles[1]} rotate(${args.VALUE - 90}deg)`;
            break;
          case "scaleX":
            element.parentNode.style.transform = `${curStyles[1]} scaleX(${args.VALUE / 100})`;
            break;
          case "scaleY":
            element.parentNode.style.transform = `${curStyles[1]} scaleY(${args.VALUE / 100})`;
            break;
          case "skewX":
            element.parentNode.style.transform = `${curStyles[1]} skewX(${args.VALUE}deg)`;
            break;
          case "skewY":
            element.parentNode.style.transform = `${curStyles[1]} skewY(${args.VALUE}deg)`;
            break;
          default:
            element.style.filter = `${curStyles[0]} blur(${args.VALUE}px)`;
            break;
        }
      });
    }

    resetEffect(args) {
      const elements = document.querySelectorAll(`#SP_Text-Ext-${this.fixID(args.ID)}`);
      elements.forEach((element) => {
        const currentTransform = element.parentNode.style.transform || "";
        const updatedTransform = currentTransform
          .replace(/rotate\([^)]*\)/, "rotate(0deg)")
          .replace(/scaleX\([^)]*\)/, "scaleX(1)")
          .replace(/scaleY\([^)]*\)/, "scaleY(1)")
          .replace(/skewX\([^)]*\)/, "skewX(0deg)")
          .replace(/skewY\([^)]*\)/, "skewY(0deg)");
        element.parentNode.style.transform = updatedTransform;
        element.style.filter = "";
        element.style.opacity = 1;
      });
    }

    amtOfEffect(args) {
      const elements = document.querySelectorAll(`#SP_Text-Ext-${this.fixID(args.ID)}`);
      let effectValue = args.EFFECT === "rotate" ? 90 : args.EFFECT.includes("scale") ? 100 : 0;
      elements.forEach((element) => {
        if (args.EFFECT === "rotate" || args.EFFECT.includes("scale") || args.EFFECT.includes("skew")) {
          const transformV = element.parentNode.style.transform.split(" ");
          const effectIndex = transformV.findIndex(value => value.includes(args.EFFECT));
          if (effectIndex !== -1) {
            effectValue = transformV[effectIndex].replace(/[^\d.-]/g, "");
            effectValue = args.EFFECT === "rotate" ? parseFloat(effectValue) + 90 :
              parseFloat(effectValue) * (args.EFFECT.includes("scale") ? 100 : 1);
          }
        } else if (args.EFFECT === "opacity") {
          effectValue = 100 - (parseFloat(element.style.opacity || 0) * 100);
        } else {
          const filterV = element.style.filter.split(" ");
          const effectIndex = filterV.findIndex((value) => value.includes(args.EFFECT));
          if (effectIndex !== -1) {
            effectValue =
              args.EFFECT === "contrast" || args.EFFECT === "brightness"
                ? parseFloat(filterV[effectIndex].replace(/[^\d.-]/g, "")) - 100
                : parseFloat(filterV[effectIndex].replace(/[^\d.-]/g, ""));
          }
        }
      });
      return effectValue;
    }

    setTextCurve(args) {
      args.ID = this.fixID(args.ID)
      const regex = args.ARC.includes("<svg") ? /<path[^>]*d="([^"]*)"/ : /<path[^>]*d="([^"]*)"/;
      const match = args.ARC.match(regex);
      const outline = lastRecdVals["textOUT"] !== undefined ? lastRecdVals["textOUT"] : "";
      if (match && match[1]) {
        const elements = document.querySelectorAll(`#SP_Text-Ext-${args.ID}`);
        elements.forEach((element) => {
          const existingSvg = element.querySelector("svg");
          if (existingSvg) {
            const path = existingSvg.querySelector("path");
            path.setAttribute("d", match[1]);
            const textFill = existingSvg.querySelector("text");
            textFill.setAttribute("fill", element.style.color === "transparent" ? "#000000" : element.style.color);
            const textPathFill = existingSvg.querySelector("textPath");
            textPathFill.setAttribute("href", `#MyPath-${args.ID}`);
            textPathFill.textContent = element.textContent;

            const textStroke = existingSvg.querySelector("text");
            textStroke.setAttribute("fill", outline ? outline.inputs.COLOR ?? "#00000000" : "#00000000");
            textStroke.setAttribute("stroke", outline ? outline.inputs.COLOR ?? "#00000000" : "#00000000");
            textStroke.setAttribute("stroke-width", outline ? outline.inputs.THICKNESS ?? 1 : 1);
            const textPathStroke = existingSvg.querySelector("textPath");
            textPathStroke.setAttribute("href", `#MyPath-${args.ID}`);
            textPathStroke.textContent = element.textContent;
          } else {
            const svg = document.createElementNS("http://www.w3.org/2000/svg", "svg");
            const defs = document.createElementNS("http://www.w3.org/2000/svg", "defs");
            const path = document.createElementNS("http://www.w3.org/2000/svg", "path");
            path.setAttribute("id", `MyPath-${args.ID}`);
            path.setAttribute("d", match[1]);
            defs.appendChild(path);

            const textStroke = document.createElementNS("http://www.w3.org/2000/svg", "text");
            textStroke.setAttribute("fill", outline ? outline.inputs.COLOR : "#00000000");
            textStroke.setAttribute("stroke", outline ? outline.inputs.COLOR : "#00000000");
            textStroke.setAttribute("stroke-width", outline ? outline.inputs.THICKNESS : 1);
            const textPathStroke = document.createElementNS("http://www.w3.org/2000/svg", "textPath");
            textPathStroke.setAttribute("href", `#MyPath-${args.ID}`);
            textPathStroke.textContent = element.textContent;
            textStroke.appendChild(textPathStroke);

            svg.appendChild(defs);
            svg.appendChild(textStroke);
            const textFill = document.createElementNS("http://www.w3.org/2000/svg", "text");
            textFill.setAttribute("fill", element.style.color === "transparent" ? "#000000" : element.style.color);
            const textPathFill = document.createElementNS("http://www.w3.org/2000/svg", "textPath");
            textPathFill.setAttribute("href", `#MyPath-${args.ID}`);
            textPathFill.textContent = element.textContent;
            textFill.appendChild(textPathFill);
            svg.appendChild(textFill);
            element.innerHTML = "";
            element.appendChild(svg);
          }
        });
      }
    }

    presetCurve(args) {
      const presets = {
        circle : `<svg><path d="M41.9375,89.5c0,-37.83151 30.66849,-68.5 68.5,-68.5c37.83151,0 68.5,30.66849 68.5,68.5c0,37.83151 -30.66849,68.5 -68.5,68.5c-37.83151,0 -68.5,-30.66849 -68.5,-68.5z"/></svg`,
        hill : `<svg><path d="M37.4375,89.5c0,0 43.00879,-31 74.5,-31c31.49121,0 71.5,31 71.5,31"/></svg`,
        dip : `<svg><path d="M37.4375,89.5c0,0 42.00879,25 73.5,25c31.49121,0 72.5,-25 72.5,-25"/></svg>`,
        wave : `<svg><path d="M24.4375,98.67214c0,0 38.3049,-22.48612 65.97496,-23c27.67006,-0.51388 44.8836,19.04663 76.52154,23.35359c37.46107,5.09968 76.066,-17.35359 76.066,-17.35359"/></svg>`
      };
      return presets[args.ARC];
    }
  }

  Scratch.extensions.register(new SPdisText());
})(Scratch);
","https://extensions.turbowarp.org/obviousAlexC/penPlus.js","data:application/x-javascript;base64,// Name: More Operators
// ID: SPmoreOPs
// Description: More Powerful Operator Blocks
// By: SharkPool

// Version V.1.0.0

(function (Scratch) {
  "use strict";
  if (!Scratch.extensions.unsandboxed) throw new Error("More Operators must run unsandboxed");

  const menuIconURI =
"data:image/svg+xml;base64,PHN2ZyB2ZXJzaW9uPSIxLjEiIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIgeG1sbnM6eGxpbms9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsiIHdpZHRoPSI3Ny4yMjIwMiIgaGVpZ2h0PSI3Ny4yMjIwMiIgdmlld0JveD0iMCwwLDc3LjIyMjAyLDc3LjIyMjAyIj48ZyB0cmFuc2Zvcm09InRyYW5zbGF0ZSgtMjAxLjM4ODk5LC0xNDEuMzg4OTkpIj48ZyBkYXRhLXBhcGVyLWRhdGE9InsmcXVvdDtpc1BhaW50aW5nTGF5ZXImcXVvdDs6dHJ1ZX0iIGZpbGwtcnVsZT0ibm9uemVybyIgc3Ryb2tlLWxpbmVjYXA9ImJ1dHQiIHN0cm9rZS1saW5lam9pbj0ibWl0ZXIiIHN0cm9rZS1taXRlcmxpbWl0PSIxMCIgc3Ryb2tlLWRhc2hhcnJheT0iIiBzdHJva2UtZGFzaG9mZnNldD0iMCIgc3R5bGU9Im1peC1ibGVuZC1tb2RlOiBub3JtYWwiPjxwYXRoIGQ9Ik0yMDMuMzg4OTksMTgwYzAsLTIwLjIxOTcgMTYuMzkxMzEsLTM2LjYxMTAxIDM2LjYxMTAxLC0zNi42MTEwMWMyMC4yMTk3LDAgMzYuNjExMDEsMTYuMzkxMzEgMzYuNjExMDEsMzYuNjExMDFjMCwyMC4yMTk3IC0xNi4zOTEzMSwzNi42MTEwMSAtMzYuNjExMDEsMzYuNjExMDFjLTIwLjIxOTcsMCAtMzYuNjExMDEsLTE2LjM5MTMxIC0zNi42MTEwMSwtMzYuNjExMDF6IiBmaWxsPSIjNTljMDU5IiBzdHJva2U9IiM0NzlhNDciIHN0cm9rZS13aWR0aD0iNCIvPjxwYXRoIGQ9Ik0yMDIuMzg4OTksMTQyLjM4ODk5aDc0LjIyMjAxdjc0LjIyMjAxaC03NC4yMjIwMXoiIGZpbGwtb3BhY2l0eT0iMCIgZmlsbD0iIzAwMDAwMCIgc3Ryb2tlPSJub25lIiBzdHJva2Utd2lkdGg9IjEiLz48cGF0aCBkPSJNMjQ1Ljc0NSwxNTYuODM0MmMtMy4yOTE0NiwtMC4yOTkyMyAtNi4xOTM5MywyLjEyNDQ4IC02LjQ5MzE1LDUuNDQ1ODdsLTAuNzQ4MDYsOC42NDc1Nmg4LjQzODExdjUuOTg0NDdoLTguOTc2NzFsLTEuMzE2NTksMTUuMTcwNjRjLTAuMjcwNTMsMy4xNjE0MiAtMS43ODk1OSw2LjA4NDcyIC00LjIyMTE1LDguMTIzMTljLTIuNDMxNTYsMi4wMzg0NiAtNS41NzUxMiwzLjAyNDAyIC04LjczNTIzLDIuNzM4NjNjLTMuNzYyOTcsLTAuMzE5MDkgLTcuMTU1NywtMi4zOTI0MyAtOS4xNTYyNSwtNS41OTU0OGw0LjQ4ODM2LC00LjQ4ODM2YzAuNzE4MTQsMi4yMTQyNSAyLjY5MzAyLDMuOTE5ODIgNS4xNzY1Nyw0LjEyOTI5YzMuMjkxNDYsMC4yOTkyMyA2LjE5MzkzLC0yLjEyNDQ4IDYuNDkzMTUsLTUuNDQ1ODdsMS4yODY2NiwtMTQuNjMyMDNoLTguOTc2NzF2LTUuOTg0NDdoOS40ODUzOWwwLjgwNzkxLC05LjE4NjE2YzAuNTY4NTIsLTYuNTgyOTEgNi4zNzM0NiwtMTEuNDYwMjcgMTIuOTU2MzgsLTEwLjg2MTgyYzMuOTE5ODIsMC4zMjkxNCA3LjIxMTI5LDIuNTEzNDggOS4xNTYyNSw1LjU5NTQ4bC00LjQ4ODM2LDQuNDg4MzZjLTAuNzE4MTQsLTIuMjE0MjUgLTIuNjkzMDIsLTMuOTE5ODIgLTUuMTc2NTcsLTQuMTI5Mjl6IiBmaWxsPSIjZmZmZmZmIiBzdHJva2U9Im5vbmUiIHN0cm9rZS13aWR0aD0iMSIvPjxwYXRoIGQ9Ik0yNTMuODMzNzYsMjAyLjY5NDY4Yy0xLjQ1NzU2LDAgLTIuNjM5MTUsLTEuMTgxNTkgLTIuNjM5MTUsLTIuNjM5MTV2LTUuMzYyNGgtNS4zNjI0Yy0xLjQ1NzU2LDAgLTIuNjM5MTUsLTEuMTgxNTkgLTIuNjM5MTUsLTIuNjM5MTV2LTIuNDI2OWMwLC0xLjQ1NzU2IDEuMTgxNTksLTIuNjM5MTUgMi42MzkxNSwtMi42MzkxNWg1LjM2MjR2LTUuMzYyNGMwLC0xLjQ1NzU2IDEuMTgxNTksLTIuNjM5MTUgMi42MzkxNSwtMi42MzkxNWgyLjQyNjljMS40NTc1NiwwIDIuNjM5MTUsMS4xODE1OSAyLjYzOTE1LDIuNjM5MTV2NS4zNjI0aDUuMzYyNGMxLjQ1NzU2LDAgMi42MzkxNSwxLjE4MTU5IDIuNjM5MTUsMi42MzkxNXYyLjQyNjljMCwxLjQ1NzU2IC0xLjE4MTU5LDIuNjM5MTUgLTIuNjM5MTUsMi42MzkxNWgtNS4zNjI0djUuMzYyNGMwLDEuNDU3NTYgLTEuMTgxNTksMi42MzkxNSAtMi42MzkxNSwyLjYzOTE1eiIgZmlsbD0iI2ZmZmZmZiIgc3Ryb2tlPSJub25lIiBzdHJva2Utd2lkdGg9IjAiLz48L2c+PC9nPjwvc3ZnPg==";

  const vm = Scratch.vm;
  const regeneratedReporters = ["SPmoreOPs_getLetter"];

  // Inspired by LilyMakesThings <3
  vm.on("EXTENSION_ADDED", tryUseScratchBlocks);
  vm.on("BLOCKSINFO_UPDATE", tryUseScratchBlocks);

  tryUseScratchBlocks();
  function tryUseScratchBlocks() {
    if (!window.ScratchBlocks) return;
    vm.removeListener("EXTENSION_ADDED", tryUseScratchBlocks);
    vm.removeListener("BLOCKSINFO_UPDATE", tryUseScratchBlocks);
    const originalCheck = ScratchBlocks.scratchBlocksUtils.isShadowArgumentReporter;
    ScratchBlocks.scratchBlocksUtils.isShadowArgumentReporter = function (block) {
      const result = originalCheck(block);
      if (result) return true;
      return block.isShadow() && regeneratedReporters.includes(block.type);
    };
  }

  // Block requires a Library, Library is fetched once and saved to the project
  let isSolverAdded = false;
  let loadedLibrary = [];

  class SPmoreOPs {
    getInfo() {
      return {
        id: "SPmoreOPs",
        name: "More Operators",
        color1: "#59C059",
        color2: "#50ad50",
        color3: "#479a47",
        menuIconURI,
        blocks: [
          {
            opcode: "bitLogic",
            extensions: ["colours_operators"],
            blockType: Scratch.BlockType.BOOLEAN,
            text: "[CON1] [TYPE] [CON2]",
            arguments: {
              CON1: { type: Scratch.ArgumentType.BOOLEAN },
              TYPE: { type: Scratch.ArgumentType.STRING, menu: "LOGIC" },
              CON2: { type: Scratch.ArgumentType.BOOLEAN }
            }
          },
          {
            opcode: "with",
            extensions: ["colours_operators"],
            blockType: Scratch.BlockType.BOOLEAN,
            text: "[STRING1] [TYPE] with [STRING2]",
            arguments: {
              STRING1: { type: Scratch.ArgumentType.STRING, defaultValue: "apple banana" },
              TYPE: { type: Scratch.ArgumentType.STRING, menu: "WITHS" },
              STRING2: { type: Scratch.ArgumentType.STRING, defaultValue: "apple" }
            }
          },
          {
            opcode: "noContain",
            extensions: ["colours_operators"],
            blockType: Scratch.BlockType.BOOLEAN,
            text: "[STRING1] not contains [STRING2]?",
            arguments: {
              STRING1: { type: Scratch.ArgumentType.STRING, defaultValue: "apple" },
              STRING2: { type: Scratch.ArgumentType.STRING, defaultValue: "banana" }
            }
          },
          {
            opcode: "evenOdd",
            extensions: ["colours_operators"],
            blockType: Scratch.BlockType.BOOLEAN,
            text: "is [NUM] [TYPE]?",
            arguments: {
              NUM: { type: Scratch.ArgumentType.NUMBER, defaultValue: 2 },
              TYPE: { type: Scratch.ArgumentType.STRING, menu: "EVEN_ODD" }
            }
          },
          {
            opcode: "isPrime",
            extensions: ["colours_operators"],
            blockType: Scratch.BlockType.BOOLEAN,
            text: "is [NUM] prime?",
            arguments: {
              NUM: { type: Scratch.ArgumentType.NUMBER, defaultValue: 2 }
            }
          },
          "---",
          {
            opcode: "typeString",
            extensions: ["colours_operators"],
            blockType: Scratch.BlockType.REPORTER,
            text: "[STRING1] [TYPE] [STRING2]",
            arguments: {
              STRING1: { type: Scratch.ArgumentType.STRING, defaultValue: "" },
              TYPE: { type: Scratch.ArgumentType.STRING, menu: "STRING" },
              STRING2: { type: Scratch.ArgumentType.STRING, defaultValue: "value" }
            }
          },
          { blockType: Scratch.BlockType.LABEL, text: "Math" },
          {
            func: "tryAddSolve",
            blockType: Scratch.BlockType.BUTTON,
            hideFromPalette: isSolverAdded,
            text: "Import 'eval' & 'solve for x'"
          },
          {
            opcode: "evalNum",
            extensions: ["colours_operators"],
            blockType: Scratch.BlockType.REPORTER,
            hideFromPalette: !isSolverAdded,
            text: "eval [STRING]",
            arguments: {
              STRING: { type: Scratch.ArgumentType.STRING, defaultValue : "1 + 1" }
            }
          },
          {
            opcode: "solveFor",
            extensions: ["colours_operators"],
            blockType: Scratch.BlockType.REPORTER,
            hideFromPalette: !isSolverAdded,
            text: "solve for [VAR] in [STRING]",
            arguments: {
              VAR: {
                type: Scratch.ArgumentType.STRING,
                menu: "VARIABLES",
                defaultValue: "x"
              },
              STRING: { type: Scratch.ArgumentType.STRING, defaultValue : "x + 1 = 2" }
            }
          },
          "---",
          {
            opcode: "root",
            extensions: ["colours_operators"],
            blockType: Scratch.BlockType.REPORTER,
            text: "[N] √ [NUM]",
            arguments: {
              N: { type: Scratch.ArgumentType.NUMBER, defaultValue : 2 },
              NUM: { type: Scratch.ArgumentType.NUMBER, defaultValue : 25 }
            }
          },
          {
            opcode: "exponent",
            extensions: ["colours_operators"],
            blockType: Scratch.BlockType.REPORTER,
            text: "[NUM] ^ [N]",
            arguments: {
              N: { type: Scratch.ArgumentType.NUMBER, defaultValue : 2 },
              NUM: { type: Scratch.ArgumentType.NUMBER, defaultValue : 5 }
            }
          },
          "---",
          {
            opcode: "lcm",
            extensions: ["colours_operators"],
            blockType: Scratch.BlockType.REPORTER,
            text: "lcm of [NUM1] and [NUM2]",
            arguments: {
              NUM1: { type: Scratch.ArgumentType.NUMBER, defaultValue: 5 },
              NUM2: { type: Scratch.ArgumentType.NUMBER, defaultValue: 15 }
            }
          },
          {
            opcode: "gcd",
            extensions: ["colours_operators"],
            blockType: Scratch.BlockType.REPORTER,
            text: "gcd of [NUM1] and [NUM2]",
            arguments: {
              NUM1: { type: Scratch.ArgumentType.NUMBER, defaultValue: 5 },
              NUM2: { type: Scratch.ArgumentType.NUMBER, defaultValue: 15 }
            }
          },
          {
            opcode: "negaAbs",
            extensions: ["colours_operators"],
            blockType: Scratch.BlockType.REPORTER,
            text: "nega-abs of [NUMBER]",
            arguments: {
              NUMBER: { type: Scratch.ArgumentType.NUMBER, defaultValue: 5 }
            }
          },,
          {
            opcode: "simplifyFrac",
            extensions: ["colours_operators"],
            blockType: Scratch.BlockType.REPORTER,
            text: "simplify fraction [NUM] / [DENOM]",
            arguments: {
              NUM: { type: Scratch.ArgumentType.NUMBER, defaultValue: 4 },
              DENOM: { type: Scratch.ArgumentType.NUMBER, defaultValue: 8 }
            }
          },
          {
            opcode: "roundNear",
            extensions: ["colours_operators"],
            blockType: Scratch.BlockType.REPORTER,
            text: "round [NUMBER] to nearest [ROUND_TYPE]",
            arguments: {
              NUMBER: { type: Scratch.ArgumentType.NUMBER, defaultValue: 3.1415 },
              ROUND_TYPE: { type: Scratch.ArgumentType.NUMBER, defaultValue: 3 }
            }
          },
          "---",
          {
            opcode: "tripleOperator",
            extensions: ["colours_operators"],
            blockType: Scratch.BlockType.REPORTER,
            text: "[NUM1] [OPERATOR1] [NUM2] [OPERATOR2] [NUM3]",
            arguments: {
              NUM1: { type: Scratch.ArgumentType.NUMBER, defaultValue: 0 },
              OPERATOR1: { type: Scratch.ArgumentType.STRING, menu: "OPERATOR_MENU" },
              NUM2: { type: Scratch.ArgumentType.NUMBER, defaultValue: 0 },
              OPERATOR2: { type: Scratch.ArgumentType.STRING, menu: "OPERATOR_MENU" },
              NUM3: { type: Scratch.ArgumentType.NUMBER, defaultValue: 0 },
            }
          },
          {
            opcode: "quadrupleOperator",
            extensions: ["colours_operators"],
            blockType: Scratch.BlockType.REPORTER,
            text: "[NUM1] [OPERATOR1] [NUM2] [OPERATOR2] [NUM3] [OPERATOR3] [NUM4]",
            arguments: {
              NUM1: { type: Scratch.ArgumentType.NUMBER, defaultValue: 0 },
              OPERATOR1: { type: Scratch.ArgumentType.STRING, menu: "OPERATOR_MENU" },
              NUM2: { type: Scratch.ArgumentType.NUMBER, defaultValue: 0 },
              OPERATOR2: { type: Scratch.ArgumentType.STRING, menu: "OPERATOR_MENU" },
              NUM3: { type: Scratch.ArgumentType.NUMBER, defaultValue: 0 },
              OPERATOR3: { type: Scratch.ArgumentType.STRING, menu: "OPERATOR_MENU" },
              NUM4: { type: Scratch.ArgumentType.NUMBER, defaultValue: 0 }
            }
          },
          { blockType: Scratch.BlockType.LABEL, text: "Strings" },
          {
            opcode: "trim",
            extensions: ["colours_operators"],
            blockType: Scratch.BlockType.REPORTER,
            text: "trim [STRING]",
            arguments: {
              STRING: { type: Scratch.ArgumentType.STRING, defaultValue: "apple    " }
            }
          },
          {
            opcode: "insertString",
            extensions: ["colours_operators"],
            blockType: Scratch.BlockType.REPORTER,
            text: "insert [STRING2] after letter [NUM] in [STRING1]",
            arguments: {
              STRING1: { type: Scratch.ArgumentType.STRING, defaultValue: "bana" },
              NUM: { type: Scratch.ArgumentType.NUMBER, defaultValue: 3 },
              STRING2: { type: Scratch.ArgumentType.STRING, defaultValue: "an" }
            }
          },
          {
            opcode: "padding",
            extensions: ["colours_operators"],
            blockType: Scratch.BlockType.REPORTER,
            text: "pad [STRING1] at [TYPE] with [STRING2] at length [NUM]",
            arguments: {
              STRING1: { type: Scratch.ArgumentType.STRING, defaultValue: "anana" },
              TYPE: { type: Scratch.ArgumentType.STRING, menu: "PADS" },
              STRING2: { type: Scratch.ArgumentType.STRING, defaultValue: "b" },
              NUM: { type: Scratch.ArgumentType.NUMBER, defaultValue: 10 }
            }
          },
          "---",
          {
            opcode: "randomLetter",
            extensions: ["colours_operators"],
            blockType: Scratch.BlockType.REPORTER,
            text: "random [LETTER_TYPE] letter",
            arguments: {
              LETTER_TYPE: { type: Scratch.ArgumentType.STRING, menu: "LETTER_TYPE_MENU" }
            }
          },
          {
            opcode: "randomCharRange",
            extensions: ["colours_operators"],
            blockType: Scratch.BlockType.REPORTER,
            text: "random character [ONE] to [TWO]",
            arguments: {
              ONE: { type: Scratch.ArgumentType.STRING, defaultValue: "a" },
              TWO: { type: Scratch.ArgumentType.STRING, defaultValue: "c" }
            }
          },
          {
            opcode: "rndString",
            extensions: ["colours_operators"],
            blockType: Scratch.BlockType.REPORTER,
            allowDropAnywhere: true,
            text: "random [STRING1] or [STRING2] with [CHANCE]% chance",
            arguments: {
              STRING1: { type: Scratch.ArgumentType.STRING, defaultValue: "foo" },
              STRING2: { type: Scratch.ArgumentType.STRING, defaultValue: "bar" },
              CHANCE: { type: Scratch.ArgumentType.NUMBER, defaultValue: 50 }
            }
          },
          "---",
          {
            opcode: "replaceKey",
            extensions: ["colours_operators"],
            blockType: Scratch.BlockType.REPORTER,
            text: "replace [KEY] #[ORDER] of [STRING] with [REPLACE]",
            arguments: {
              STRING: { type: Scratch.ArgumentType.STRING, defaultValue: "apple banana banana" },
              KEY: { type: Scratch.ArgumentType.STRING, defaultValue: "banana" },
              ORDER: { type: Scratch.ArgumentType.NUMBER, defaultValue: 2 },
              REPLACE: { type: Scratch.ArgumentType.STRING, defaultValue: "orange" }
            }
          },
          {
            opcode: "replaceKeys",
            extensions: ["colours_operators"],
            blockType: Scratch.BlockType.REPORTER,
            text: "replace [KEY] #[ORDER] to #[ORDER2] of [STRING] with [REPLACE]",
            arguments: {
              STRING: { type: Scratch.ArgumentType.STRING, defaultValue: "banana banana orange" },
              KEY: { type: Scratch.ArgumentType.STRING, defaultValue: "banana" },
              ORDER: { type: Scratch.ArgumentType.NUMBER, defaultValue: 1 },
              ORDER2: { type: Scratch.ArgumentType.NUMBER, defaultValue: 2 },
              REPLACE: { type: Scratch.ArgumentType.STRING, defaultValue: "orange" }
            }
          },
          "---",
          {
            opcode: "tripleJoin",
            extensions: ["colours_operators"],
            blockType: Scratch.BlockType.REPORTER,
            text: "join [STRING1] [STRING2] [STRING3]",
            arguments: {
              STRING1: { type: Scratch.ArgumentType.STRING },
              STRING2: { type: Scratch.ArgumentType.STRING },
              STRING3: { type: Scratch.ArgumentType.STRING }
            }
          },
          {
            opcode: "quadrupleJoin",
            extensions: ["colours_operators"],
            blockType: Scratch.BlockType.REPORTER,
            text: "join [STRING1] [STRING2] [STRING3] [STRING4]",
            arguments: {
              STRING1: { type: Scratch.ArgumentType.STRING },
              STRING2: { type: Scratch.ArgumentType.STRING },
              STRING3: { type: Scratch.ArgumentType.STRING },
              STRING4: { type: Scratch.ArgumentType.STRING }
            }
          },
          {
            opcode: "fiveJoin",
            extensions: ["colours_operators"],
            blockType: Scratch.BlockType.REPORTER,
            text: "join [STRING1] [STRING2] [STRING3] [STRING4] [STRING5]",
            arguments: {
              STRING1: { type: Scratch.ArgumentType.STRING },
              STRING2: { type: Scratch.ArgumentType.STRING },
              STRING3: { type: Scratch.ArgumentType.STRING },
              STRING4: { type: Scratch.ArgumentType.STRING },
              STRING5: { type: Scratch.ArgumentType.STRING }
            }
          },
          "---",
          {
            blockType: Scratch.BlockType.XML,
            xml: `
            <block type="SPmoreOPs_forLetter">
              <value name="LETTER">
                <shadow type="SPmoreOPs_getLetter"></shadow>
              </value>
              <value name="STRING">
                <shadow type="text"><field name="TEXT">banana</field></shadow>
              </value>
            </block>`
          },
          {
            opcode: "forLetter",
            extensions: ["colours_operators"], blockType: Scratch.BlockType.LOOP,
            text: "for each [LETTER] in [STRING]", hideFromPalette: true,
            arguments: { LETTER: {}, STRING: { type: Scratch.ArgumentType.STRING, defaultValue: "banana"} }
          },
          {
            opcode: "getLetter", extensions: ["colours_operators"],
            blockType: Scratch.BlockType.REPORTER, hideFromPalette: true, text: "letter"
          },
        ],
        menus: {
          LOGIC: ["and", "nand", "or", "nor", "xor"],
          WITHS: ["starts", "ends"],
          EVEN_ODD: ["even", "odd"],
          PADS: ["start", "end"],
          LETTER_TYPE_MENU: { acceptReporters: true, items: ["lowercase", "uppercase"] },
          OPERATOR_MENU: ["+", "-", "*", "/"],
          STRING: { acceptReporters: true, items: ["||", "??"] },
          VARIABLES: [
            "a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z",
            "A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z"
          ]
        },
      };
    }

    async tryAddSolve() {
      if (navigator.onLine) {
        try {
          window.alert("These Blocks require a Math Library to work. Dont worry, this Library is loaded Once (editor) and is Saved to the Project");
          const links = [
            "https://cdn.jsdelivr.net/npm/nerdamer@latest/nerdamer.core.js",
            "https://cdn.jsdelivr.net/npm/nerdamer@latest/Algebra.js",
            "https://cdn.jsdelivr.net/npm/nerdamer@latest/Calculus.js",
            "https://cdn.jsdelivr.net/npm/nerdamer@latest/Solve.js"
          ];
          const texts = [];
          for (let i = 0; i < links.length; i++) {
            const response = await Scratch.fetch(links[i]);
            if (!response.ok) throw new Error("Fetch failed");
            const scriptText = await response.text();
            const scriptElement = document.createElement("script");
            scriptElement.textContent = scriptText;
            texts.push(scriptText);
            document.body.appendChild(scriptElement);
          }
          isSolverAdded = true;
          vm.extensionManager.refreshBlocks();
          loadedLibrary = texts;
          if (!Scratch.extensions.isPenguinMod) vm.runtime.extensionStorage["SPmoreOPs"] = { loaded : true, library : texts };
        } catch { alert("Fetch Failed, Unable to Import this Block") }
      } else { alert("You Must be Online to Import this Block") }
    }

    bitLogic(args) {
      const con1 = Scratch.Cast.toBoolean(args.CON1);
      const con2 = Scratch.Cast.toBoolean(args.CON2);
      switch (args.TYPE) {
        case "and" : return con1 && con2;
        case "nand": return !(con1 && con2);
        case "or" : return con1 || con2;
        case "nor": return !(con1 || con2);
        case "xor": return con1 !== con2;
      }
    }

    with(args) {
      if (args.TYPE === "starts") return args.STRING1.startsWith(args.STRING2);
      else return args.STRING1.endsWith(args.STRING2);
    }

    noContain(args) { return !vm.runtime.ext_scratch3_operators.contains(args) }

    typeString(args) {
      if (args.TYPE === "||") return args.STRING1 || args.STRING2;
      else return args.STRING1 === "undefined" || args.STRING1 === "null" ? args.STRING2 : args.STRING1;
    }

    evenOdd(args) {
      const n = Scratch.Cast.toNumber(args.NUM);
      if (args.TYPE === "even") return n % 2 === 0
      else return n % 2 !== 0
    }

    isPrime(args) {
      const n = Math.abs(Scratch.Cast.toNumber(args.NUM));
      if (n <= 1) return false;
      if (n <= 3) return true;
      if (n % 2 === 0 || n % 3 === 0) return false;
      for (let i = 5; i * i <= n; i += 6) {
        if (n % i === 0 || n % (i + 2) === 0) return false;
      }
      return true;
    }

    // requires loading library first
    evalNum(args) {
      try {
        const node = args.STRING.replace(/\s+/g, "");
        const variableName = this.getUnusedVar(node);
        if (variableName === undefined) return "No solution found";
        const solution = nerdamer.solve(`${node}=${variableName}`, variableName);
        return solution ? solution.toString() : "No solution found";
      } catch { return "undefined" }
    }
    solveFor(args) {
      try {
        const node = args.STRING.replace(/\s+/g, "");
        const solution = nerdamer.solve(node, args.VAR);
        return solution ? solution.toString() : "No solution found";
      } catch { return "undefined" }
    }

    root(args) { return Math.pow(Scratch.Cast.toNumber(args.NUM), 1 / Scratch.Cast.toNumber(args.N)) }

    exponent(args) { return Math.pow(Scratch.Cast.toNumber(args.NUM), Scratch.Cast.toNumber(args.N)) }

    simplifyFrac(args) {
      const numerator = Scratch.Cast.toNumber(args.NUM);
      const denominator = Scratch.Cast.toNumber(args.DENOM);
      const gcd = (a, b) => (b ? gcd(b, a % b) : a);
      const gcdValue = gcd(numerator, denominator);
      const result = JSON.stringify([numerator / gcdValue, denominator / gcdValue]);
      return result.includes("null") ? "[undefined]" : result;
    }

    gcd(args) {
      let num1 = Scratch.Cast.toNumber(args.NUM1);
      let num2 = Scratch.Cast.toNumber(args.NUM2);
      while (num2 !== 0) {
        let t = num2;
        num2 = num1 % num2;
        num1 = t;
     }
      return num1;
    }

    lcm(args) {
      const num1 = Scratch.Cast.toNumber(args.NUM1);
      const num2 = Scratch.Cast.toNumber(args.NUM2);
      return Math.abs(num1 * num2) / this.gcd({ NUM1 : num1, NUM2 : num2 });
    }

    negaAbs({ NUMBER }) { return -Math.abs(Scratch.Cast.toNumber(NUMBER)) }

    roundNear(args) {
      const precision = Math.max(0, Math.round(Scratch.Cast.toNumber(args.ROUND_TYPE)));
      const multiplier = Math.pow(10, precision);
      return Math.round(args.NUMBER * multiplier) / multiplier;
    }

    tripleOperator(args) {
      const nums = [Scratch.Cast.toNumber(args.NUM1), Scratch.Cast.toNumber(args.NUM2), Scratch.Cast.toNumber(args.NUM3)];
      return eval(`${nums[0]} ${args.OPERATOR1} ${nums[1]} ${args.OPERATOR2} ${nums[2]}`);
    }

    quadrupleOperator(args) {
      const nums = [Scratch.Cast.toNumber(args.NUM1), Scratch.Cast.toNumber(args.NUM2),
        Scratch.Cast.toNumber(args.NUM3), Scratch.Cast.toNumber(args.NUM4)];
      return eval(`${nums[0]} ${args.OPERATOR1} ${nums[1]} ${args.OPERATOR2} ${nums[2]} ${args.OPERATOR3} ${nums[3]}`);
    }

    trim(args) { return Scratch.Cast.toString(args.STRING).trim() }

    padding(args) {
      const length = Scratch.Cast.toNumber(args.NUM);
      if (args.TYPE === "start") return args.STRING1.padStart(length, args.STRING2);
      else return args.STRING1.padEnd(length, args.STRING2);
    }

    insertString(args) {
      const string1 = Scratch.Cast.toString(args.STRING1);
      const string2 = Scratch.Cast.toString(args.STRING2);
      const n = Scratch.Cast.toNumber(args.NUM);
      const string1Array = string1.split("");
      string1Array.splice(n, 0, ...string2.split(""));
      return string1Array.join("");
    }

    randomLetter(args) {
      let letters = "abcdefghijklmnopqrstuvwxyz";
      if (args.LETTER_TYPE === "uppercase") letters = letters.toUpperCase();
      return letters.charAt(Math.floor(Math.random() * letters.length));
    }

    replaceKey(args) {
      const regex = new RegExp(args.KEY, "g");
      let index = 0;
      return Scratch.Cast.toString(args.STRING).replace(regex, (match) => {
        index++;
        return index === Scratch.Cast.toNumber(args.ORDER) ? args.REPLACE : match;
      });
    }

    replaceKeys(args) {
      const regex = new RegExp(args.KEY, "g");
      let index = 0;
      const ord1 = Scratch.Cast.toNumber(args.ORDER);
      const ord2 = Scratch.Cast.toNumber(args.ORDER2);
      const order2 = ord1 > ord2 ? ord1 : ord2;
      return Scratch.Cast.toString(args.STRING).replace(regex, (match) => {
        index++;
        return index >= ord1 && index <= order2 ? args.REPLACE : match;
      });
    }

    randomCharRange(args) { 
      let ONE = args.ONE.charCodeAt(0);
      let TWO = args.TWO.charCodeAt(0);
      return String.fromCharCode(Math.floor(Math.random() * (TWO - ONE + 1) + ONE));
    }

    rndString(args) { return Math.random() > args.CHANCE / 100 ? args.STRING2 : args.STRING1 }

    tripleJoin({ STRING1, STRING2, STRING3 }) { return `${STRING1}${STRING2}${STRING3}` }
    quadrupleJoin({ STRING1, STRING2, STRING3, STRING4 }) { return `${STRING1}${STRING2}${STRING3}${STRING4}` }
    fiveJoin({ STRING1, STRING2, STRING3, STRING4, STRING5 }) { return `${STRING1}${STRING2}${STRING3}${STRING4}${STRING5}` }

    forLetter(args, util) {
      const string = Scratch.Cast.toString(args.STRING);
      if (util.stackFrame.index === undefined) util.stackFrame.index = 0;
      if (util.thread.stackFrames[0].SPletter === undefined) util.thread.stackFrames[0].SPletter = "";
      if (util.stackFrame.index < string.length) {
        util.thread.stackFrames[0].SPletter = string[util.stackFrame.index];
        util.stackFrame.index++;
        util.startBranch(1, true);
      }
    }
    getLetter(args, util) {
      const stack = util.thread.stackFrames;
      if (stack === undefined) return "";
      const params = stack[0].SPletter;
      return params !== undefined ? params : "";
    }

    // Helper Functions
    getUnusedVar(expression) {
      const avoidList = [
        "a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z",
        "A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z"
      ];
      const usedVariables = expression.split("").filter(char => /[a-zA-Z]/.test(char));
      for (let i = 0; i < avoidList.length; i++) {
        if (!usedVariables.includes(avoidList[i])) return avoidList[i];
      }
      // If all avoid list variables are used, default to unsolvable (overflow)
      return undefined;
    }

    // PenguinMod Storage
    serialize() {
      return { SPmoreOPs : { loaded : isSolverAdded, library : loadedLibrary } }
    }
    deserialize(data) {
      if (data.SPmoreOPs !== undefined) {
        isSolverAdded = data.SPmoreOPs.loaded;
        loadedLibrary = data.SPmoreOPs.library;
        if (loadedLibrary.length === 0) return;
        for (let i = 0; i < loadedLibrary.length; i++) {
          const scriptElement = document.createElement("script");
          scriptElement.textContent = loadedLibrary[i];
          document.body.appendChild(scriptElement);
        }
      }
    }
  }

  Scratch.extensions.register(new SPmoreOPs());
  if (!Scratch.extensions.isPenguinMod) {
    const storage = vm.runtime.extensionStorage["SPmoreOPs"];
    if (storage === undefined) return;
    for (let i = 0; i < storage.library.length; i++) {
      const scriptElement = document.createElement("script");
      scriptElement.textContent = storage.library[i];
      document.body.appendChild(scriptElement);
    }
    isSolverAdded = true;
    loadedLibrary = storage.library;
    vm.extensionManager.refreshBlocks();
  }
})(Scratch);
","https://extensions.turbowarp.org/Lily/LooksPlus.js","https://extensions.turbowarp.org/lab/text.js","https://extensions.turbowarp.org/qxsck/var-and-list.js","https://extensions.turbowarp.org/codeGIO/ExtraUtilities.js","https://extensions.turbowarp.org/-SIPC-/time.js","https://extensions.turbowarp.org/Lily/ListTools.js","https://extensions.turbowarp.org/penplus.js","https://extensions.turbowarp.org/Lily/CommentBlocks.js","data:application/x-javascript;base64,// Name: Extra Controls
// ID: SPadvControl
// Description: New Advanced Control Blocks
// By: SharkPool

// Version V.1.4.6

(function (Scratch) {
  "use strict";
  if (!Scratch.extensions.unsandboxed) throw new Error("Extra Controls must run unsandboxed");

  const vm = Scratch.vm;
  const runtime = vm.runtime;
  const regeneratedReporters = ["SPadvControl_threadArgs"];

  const menuIconURI =
"data:image/svg+xml;base64,PHN2ZyB2ZXJzaW9uPSIxLjEiIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIgeG1sbnM6eGxpbms9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsiIHdpZHRoPSI2OS41NjUyMyIgaGVpZ2h0PSI2OS41NjUyMyIgdmlld0JveD0iMCwwLDY5LjU2NTIzLDY5LjU2NTIzIj48ZyB0cmFuc2Zvcm09InRyYW5zbGF0ZSgtMjA1LjIxNzM4LC0xNDUuMjE3MzgpIj48ZyBkYXRhLXBhcGVyLWRhdGE9InsmcXVvdDtpc1BhaW50aW5nTGF5ZXImcXVvdDs6dHJ1ZX0iIGZpbGwtcnVsZT0ibm9uemVybyIgc3Ryb2tlLWxpbmVqb2luPSJtaXRlciIgc3Ryb2tlLW1pdGVybGltaXQ9IjEwIiBzdHJva2UtZGFzaGFycmF5PSIiIHN0cm9rZS1kYXNob2Zmc2V0PSIwIiBzdHlsZT0ibWl4LWJsZW5kLW1vZGU6IG5vcm1hbCI+PHBhdGggZD0iTTIwNy4yMTczOSwxODBjMCwtMTguMTA1MzMgMTQuNjc3MjgsLTMyLjc4MjYxIDMyLjc4MjYxLC0zMi43ODI2MWMxOC4xMDUzNCwwIDMyLjc4MjYyLDE0LjY3NzI4IDMyLjc4MjYyLDMyLjc4MjYxYzAsMTguMTA1MzMgLTE0LjY3NzI4LDMyLjc4MjYxIC0zMi43ODI2MiwzMi43ODI2MWMtMTguMTA1MzMsMCAtMzIuNzgyNjEsLTE0LjY3NzI4IC0zMi43ODI2MSwtMzIuNzgyNjF6IiBmaWxsPSIjZmZhYjE5IiBzdHJva2U9IiNjZjhiMTciIHN0cm9rZS13aWR0aD0iNCIgc3Ryb2tlLWxpbmVjYXA9ImJ1dHQiLz48cGF0aCBkPSJNMjYwLjE2NjY3LDE4MGgtNDAuMzMzMzMiIGZpbGw9Im5vbmUiIHN0cm9rZT0iI2ZmZmZmZiIgc3Ryb2tlLXdpZHRoPSI1IiBzdHJva2UtbGluZWNhcD0icm91bmQiLz48cGF0aCBkPSJNMjYwLjE2NjY3LDE2Ny4zOTU4NGgtNDAuMzMzMzMiIGZpbGw9Im5vbmUiIHN0cm9rZT0iI2ZmZmZmZiIgc3Ryb2tlLXdpZHRoPSI1IiBzdHJva2UtbGluZWNhcD0icm91bmQiLz48cGF0aCBkPSJNMjYwLjE2NjY3LDE5Mi42MDQxN2gtNDAuMzMzMzMiIGZpbGw9Im5vbmUiIHN0cm9rZT0iI2ZmZmZmZiIgc3Ryb2tlLXdpZHRoPSI1IiBzdHJva2UtbGluZWNhcD0icm91bmQiLz48cGF0aCBkPSJNMjIzLjgzMzM0LDE4MC4xNjY2N2MwLC0zLjQwNTc1IDIuNzYwOTEsLTYuMTY2NjYgNi4xNjY2NiwtNi4xNjY2NmMzLjQwNTc1LDAgNi4xNjY2NiwyLjc2MDkxIDYuMTY2NjYsNi4xNjY2NmMwLDMuNDA1NzUgLTIuNzYwOTEsNi4xNjY2NyAtNi4xNjY2Niw2LjE2NjY3Yy0zLjQwNTc1LDAgLTYuMTY2NjYsLTIuNzYwOTIgLTYuMTY2NjYsLTYuMTY2Njd6IiBmaWxsPSIjZmZmZmZmIiBzdHJva2U9IiNmZmFiMTkiIHN0cm9rZS13aWR0aD0iNSIgc3Ryb2tlLWxpbmVjYXA9ImJ1dHQiLz48cGF0aCBkPSJNMjQzLjgzMzM0LDE2Ny41YzAsLTMuNDA1NzUgMi43NjA5MSwtNi4xNjY2NiA2LjE2NjY2LC02LjE2NjY2YzMuNDA1NzUsMCA2LjE2NjY3LDIuNzYwOTEgNi4xNjY2Nyw2LjE2NjY2YzAsMy40MDU3NSAtMi43NjA5MSw2LjE2NjY2IC02LjE2NjY3LDYuMTY2NjZjLTMuNDA1NzUsMCAtNi4xNjY2NiwtMi43NjA5MSAtNi4xNjY2NiwtNi4xNjY2NnoiIGZpbGw9IiNmZmZmZmYiIHN0cm9rZT0iI2ZmYWIxOSIgc3Ryb2tlLXdpZHRoPSI1IiBzdHJva2UtbGluZWNhcD0iYnV0dCIvPjxwYXRoIGQ9Ik0yNDAuNjY2NjcsMTkyLjY2NjY3YzAsLTMuNDA1NzUgMi43NjA5MSwtNi4xNjY2NiA2LjE2NjY2LC02LjE2NjY2YzMuNDA1NzUsMCA2LjE2NjY2LDIuNzYwOTEgNi4xNjY2Niw2LjE2NjY2YzAsMy40MDU3NSAtMi43NjA5MSw2LjE2NjY2IC02LjE2NjY2LDYuMTY2NjZjLTMuNDA1NzUsMCAtNi4xNjY2NiwtMi43NjA5MSAtNi4xNjY2NiwtNi4xNjY2NnoiIGZpbGw9IiNmZmZmZmYiIHN0cm9rZT0iI2ZmYWIxOSIgc3Ryb2tlLXdpZHRoPSI1IiBzdHJva2UtbGluZWNhcD0iYnV0dCIvPjxwYXRoIGQ9Ik0yMjMuODMzMzQsMTgwLjE2NjY3YzAsLTMuNDA1NzUgMi43NjA5MSwtNi4xNjY2NiA2LjE2NjY2LC02LjE2NjY2YzMuNDA1NzUsMCA2LjE2NjY2LDIuNzYwOTEgNi4xNjY2Niw2LjE2NjY2YzAsMy40MDU3NSAtMi43NjA5MSw2LjE2NjY3IC02LjE2NjY2LDYuMTY2NjdjLTMuNDA1NzUsMCAtNi4xNjY2NiwtMi43NjA5MiAtNi4xNjY2NiwtNi4xNjY2N3oiIGZpbGw9IiNmZmZmZmYiIHN0cm9rZT0iI2ZmYWIxOSIgc3Ryb2tlLXdpZHRoPSIwIiBzdHJva2UtbGluZWNhcD0iYnV0dCIvPjxwYXRoIGQ9Ik0yNDMuODMzMzQsMTY3LjVjMCwtMy40MDU3NSAyLjc2MDkxLC02LjE2NjY2IDYuMTY2NjYsLTYuMTY2NjZjMy40MDU3NSwwIDYuMTY2NjcsMi43NjA5MSA2LjE2NjY3LDYuMTY2NjZjMCwzLjQwNTc1IC0yLjc2MDkxLDYuMTY2NjYgLTYuMTY2NjcsNi4xNjY2NmMtMy40MDU3NSwwIC02LjE2NjY2LC0yLjc2MDkxIC02LjE2NjY2LC02LjE2NjY2eiIgZmlsbD0iI2ZmZmZmZiIgc3Ryb2tlPSIjZmZhYjE5IiBzdHJva2Utd2lkdGg9IjAiIHN0cm9rZS1saW5lY2FwPSJidXR0Ii8+PHBhdGggZD0iTTI0MC42NjY2NywxOTIuNjY2NjdjMCwtMy40MDU3NSAyLjc2MDkxLC02LjE2NjY2IDYuMTY2NjYsLTYuMTY2NjZjMy40MDU3NSwwIDYuMTY2NjYsMi43NjA5MSA2LjE2NjY2LDYuMTY2NjZjMCwzLjQwNTc1IC0yLjc2MDkxLDYuMTY2NjYgLTYuMTY2NjYsNi4xNjY2NmMtMy40MDU3NSwwIC02LjE2NjY2LC0yLjc2MDkxIC02LjE2NjY2LC02LjE2NjY2eiIgZmlsbD0iI2ZmZmZmZiIgc3Ryb2tlPSIjZmZhYjE5IiBzdHJva2Utd2lkdGg9IjAiIHN0cm9rZS1saW5lY2FwPSJidXR0Ii8+PC9nPjwvZz48L3N2Zz4=";

  const breakIcon =
"data:image/svg+xml;base64,PHN2ZyB2ZXJzaW9uPSIxLjEiIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIgeG1sbnM6eGxpbms9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsiIHdpZHRoPSI2NS43OTU1MSIgaGVpZ2h0PSI2MC4wNzQ5MiIgdmlld0JveD0iMCwwLDY1Ljc5NTUxLDYwLjA3NDkyIj48ZyB0cmFuc2Zvcm09InRyYW5zbGF0ZSgtMjA3LjEwMjI1LC0xNDkuOTYyNTQpIj48ZyBkYXRhLXBhcGVyLWRhdGE9InsmcXVvdDtpc1BhaW50aW5nTGF5ZXImcXVvdDs6dHJ1ZX0iIGZpbGwtcnVsZT0ibm9uemVybyIgc3Ryb2tlPSJub25lIiBzdHJva2UtbGluZWNhcD0iYnV0dCIgc3Ryb2tlLWxpbmVqb2luPSJtaXRlciIgc3Ryb2tlLW1pdGVybGltaXQ9IjEwIiBzdHJva2UtZGFzaGFycmF5PSIiIHN0cm9rZS1kYXNob2Zmc2V0PSIwIiBzdHlsZT0ibWl4LWJsZW5kLW1vZGU6IG5vcm1hbCI+PHBhdGggZD0iTTIyOS4xNzQzNSwxNTQuNDM0MjJjMCwxLjIgMC41LDIuNCAxLjEsMi42YzAuOSwwLjMgMC45LDEuNSAwLjMsNC4zYy0wLjcsMyAtMS42LDQuMSAtMy45LDQuOGMtMS43LDAuNSAtNC44LDIuMyAtNi45LDMuOGMtNC44LDMuNSAtNy4yLDMuNiAtMTAuMywwLjdjLTMuNywtMy41IC0zLjEsLTcuOCAyLC0xM2MyLjMsLTIuNCA1LjgsLTUuMSA3LjcsLTZjNi4xLC0zIDEwLC0xLjkgMTAsMi44ek0yMjAuNjc0MzUsMTU1LjczNDIyYy00LjgsMyAtOS44LDguOCAtOS4yLDEwLjVjMC45LDIuMyAzLjEsMiA4LjQsLTEuNGMyLjYsLTEuNyA1LjMsLTMgNiwtM2MwLjcsMCAxLjMsLTAuNSAxLjMsLTFjMCwtMC42IC0wLjYsLTEgLTEuNCwtMWMtMS45LDAgLTIuOSwtMyAtMS41LC00LjZjMS42LC0yIC0wLjEsLTEuNyAtMy42LDAuNXoiIGZpbGwtb3BhY2l0eT0iMC4xNTY4NiIgZmlsbD0iIzAwMDAwMCIgc3Ryb2tlLXdpZHRoPSIxIi8+PHBhdGggZD0iTTIyNC4zMDc2NSwxNTUuMTk2OTJjLTEuNCwxLjYgLTAuMzgzODUsNC42Mjk4NyAxLjUxNjE1LDQuNjI5ODdjMC44LDAgMS40MDA1NSwwLjQwNzYgMS40MDA1NSwxLjAwNzZjMCwwLjUgLTAuNjAwNiwxLjAwNzU1IC0xLjMwMDYsMS4wMDc1NWMtMC43LDAgLTMuNDQyMzQsMS4zNDE3OCAtNi4wNDIzNCwzLjA0MTc4Yy01LjMsMy40IC03LjU0ODE1LDMuNjc5IC04LjQ0ODE1LDEuMzc5Yy0wLjYsLTEuNyA0LjQ1NDE2LC03LjU3Njc1IDkuMjU0MTYsLTEwLjU3Njc1YzMuNSwtMi4yIDUuMjIwMjIsLTIuNDg5MDQgMy42MjAyMiwtMC40ODkwNHoiIGRhdGEtcGFwZXItZGF0YT0ieyZxdW90O25vSG92ZXImcXVvdDs6ZmFsc2UsJnF1b3Q7b3JpZ0l0ZW0mcXVvdDs6WyZxdW90O1BhdGgmcXVvdDsseyZxdW90O2FwcGx5TWF0cml4JnF1b3Q7OnRydWUsJnF1b3Q7c2VnbWVudHMmcXVvdDs6W1tbMjIwLjY3NDM0LDE1NS43MzQyMl0sWzMuNSwtMi4yXSxbLTQuOCwzXV0sW1syMTEuNDc0MzQsMTY2LjIzNDIyXSxbLTAuNiwtMS43XSxbMC45LDIuM11dLFtbMjE5Ljg3NDM0LDE2NC44MzQyMl0sWy01LjMsMy40XSxbMi42LC0xLjddXSxbWzIyNS44NzQzNCwxNjEuODM0MjJdLFstMC43LDBdLFswLjcsMF1dLFtbMjI3LjE3NDM0LDE2MC44MzQyMl0sWzAsMC41XSxbMCwtMC42XV0sW1syMjUuNzc0MzQsMTU5LjgzNDIyXSxbMC44LDBdLFstMS45LDBdXSxbWzIyNC4yNzQzNCwxNTUuMjM0MjJdLFstMS40LDEuNl0sWzEuNiwtMl1dXSwmcXVvdDtjbG9zZWQmcXVvdDs6dHJ1ZSwmcXVvdDtmaWxsQ29sb3ImcXVvdDs6WzAsMCwwXX1dfSIgZmlsbD0iI2ZmZmZmZiIgc3Ryb2tlLXdpZHRoPSIwLjUiLz48cGF0aCBkPSJNMjQxLjQ3NDM1LDE1MC41MzQyMmw2LjEsMC42YzYuOSwwLjcgMTQsMi45IDE3LjQsNS41YzIuMSwxLjYgMi4yLDIuMiAxLjMsNi4yYy0xLjgsOC4yIC05LjYsMTIuOSAtMTUsOS4xYy0xLjYsLTEuMiAtMy40LC0yLjEgLTQsLTIuMWMtMS45LDAgLTEwLjEsLTguMiAtMTAuMSwtMTAuMWMwLC0xIDEsLTMuNCAyLjIsLTUuNXpNMjQyLjY3NDM1LDE1Ny4yMzQyMmMtMS41LDIuMiAtMS40LDIuNiAwLjgsNWMxLjMsMS40IDIuOCwyLjYgMy4yLDIuNmMwLjUsMCAyLjgsMC45IDUuMiwyLjFjNCwxLjkgNC41LDIgNi43LDAuNWMxLjQsLTAuOCAyLjcsLTMgMy4xLC00LjdjMC45LC00IC0wLjYsLTUuMyAtNy43LC02LjhjLTcuNCwtMS42IC05LjYsLTEuNCAtMTEuMywxLjN6IiBmaWxsLW9wYWNpdHk9IjAuMTU2ODYiIGZpbGw9IiMwMDAwMDAiIHN0cm9rZS13aWR0aD0iMSIvPjxwYXRoIGQ9Ik0yNTMuOTkyMDksMTU1Ljg4NzQ3YzcuMSwxLjUgOC42MzE5OSwyLjg1MTk3IDcuNzMxOTksNi44NTE5N2MtMC40LDEuNyAtMS43MTE1NSwzLjkyNzA2IC0zLjExMTU1LDQuNzI3MDZjLTIuMiwxLjUgLTIuNzM3MzUsMS40MTc3MSAtNi43MzczNSwtMC40ODIyOWMtMi40LC0xLjIgLTQuNzQzNDQsLTIuMTIzODQgLTUuMjQzNDQsLTIuMTIzODRjLTAuNCwwIC0xLjkwNzI4LC0xLjIyMjkyIC0zLjIwNzI4LC0yLjYyMjkyYy0yLjIsLTIuNCAtMi4yOTUwMSwtMi44MjUyMiAtMC43OTUwMSwtNS4wMjUyMmMxLjcsLTIuNyAzLjk2MjY1LC0yLjkyNDc2IDExLjM2MjY1LC0xLjMyNDc2eiIgZGF0YS1wYXBlci1kYXRhPSJ7JnF1b3Q7bm9Ib3ZlciZxdW90OzpmYWxzZSwmcXVvdDtvcmlnSXRlbSZxdW90OzpbJnF1b3Q7UGF0aCZxdW90Oyx7JnF1b3Q7YXBwbHlNYXRyaXgmcXVvdDs6dHJ1ZSwmcXVvdDtzZWdtZW50cyZxdW90OzpbW1syNDIuNjc0MzQsMTU3LjIzNDIyXSxbMS43LC0yLjddLFstMS41LDIuMl1dLFtbMjQzLjQ3NDM0LDE2Mi4yMzQyMl0sWy0yLjIsLTIuNF0sWzEuMywxLjRdXSxbWzI0Ni42NzQzNCwxNjQuODM0MjJdLFstMC40LDBdLFswLjUsMF1dLFtbMjUxLjg3NDM0LDE2Ni45MzQyMl0sWy0yLjQsLTEuMl0sWzQsMS45XV0sW1syNTguNTc0MzQsMTY3LjQzNDIyXSxbLTIuMiwxLjVdLFsxLjQsLTAuOF1dLFtbMjYxLjY3NDM0LDE2Mi43MzQyMl0sWy0wLjQsMS43XSxbMC45LC00XV0sW1syNTMuOTc0MzQsMTU1LjkzNDIyXSxbNy4xLDEuNV0sWy03LjQsLTEuNl1dXSwmcXVvdDtjbG9zZWQmcXVvdDs6dHJ1ZSwmcXVvdDtmaWxsQ29sb3ImcXVvdDs6WzAsMCwwXX1dfSIgZmlsbD0iI2ZmZmZmZiIgc3Ryb2tlLXdpZHRoPSIwLjUiLz48cGF0aCBkPSJNMjQ3LjM3NDM1LDE3NC45MzQyMmw0LjQsMi4xYzQuMywyLjEgNC4zLDIuMSA3LjksMC4yYzUuMywtMi44IDcsLTEuMyA3LDYuNmMwLjEsNS43IDAuMyw2LjMgMi44LDcuNmMzLjQsMS44IDQuNCw1LjYgMi40LDguOGMtMS4yLDEuOCAtNC44LDMuNSAtMTQuMSw2LjZjLTE2LjYsNS41IC0xNi41LDUuNiAtMjIuNSwtMTMuNGMtMy4yLC05LjkgLTMuMiwtMTAgLTEuMywtMTIuNWMyLC0yLjcgNi42LC0zLjQgMTAuNCwtMS43YzEuMywwLjYgMS45LDAuMiAyLjQsLTEuOHpNMjUyLjI3NDM1LDE4MS44MzQyMmMtMS40LC0wLjcgLTIuMSwtMC40IC0zLjEsMS41bC0xLjMsMi4zbC00LjMsLTIuMWMtNywtMy4zIC03LjMsLTEuOCAtMi45LDExLjNjMi4xLDYuMSA0LjIsMTEuMyA0LjUsMTEuNWMxLDAuNiAyMC44LC02LjEgMjIuNiwtNy42YzIuMiwtMS44IDEuNywtMi44IC0zLC01LjFsLTQuNCwtMi4xbDEuNCwtMy4zYzAuOCwtMS44IDEuNCwtNC4zIDEuNCwtNS40YzAsLTIuMSAtMS40LC0yLjcgLTIuNSwtMWMtMC4zLDAuNSAtMiwxIC0zLjYsMWMtMS43LDAgLTMuOCwtMC40IC00LjgsLTF6IiBmaWxsLW9wYWNpdHk9IjAuMTU2ODYiIGZpbGw9IiMwMDAwMDAiIHN0cm9rZS13aWR0aD0iMSIvPjxwYXRoIGQ9Ik0yNTcuMDkwNDksMTgyLjc4NjljMS42LDAgMy4zMTAxNCwtMC40OTUyMSAzLjYxMDE0LC0wLjk5NTIxYzEuMSwtMS43IDIuNTA3MzEsLTEuMDk0NSAyLjUwNzMxLDEuMDA1NWMwLDEuMSAtMC41OTE1MiwzLjYxMDAzIC0xLjM5MTUyLDUuNDEwMDNsLTEuMzk0MTYsMy4zMTI3NWw0LjQwMjA4LDIuMTE0MzZjNC43LDIuMyA1LjE5NzEsMy4zMTY2OCAyLjk5NzEsNS4xMTY2OGMtMS44LDEuNSAtMjEuNjc0MjQsOC4yMjUyMSAtMjIuNjc0MjQsNy42MjUyMWMtMC4zLC0wLjIgLTIuNDIyNjMsLTUuNDM3MiAtNC41MjI2MywtMTEuNTM3MmMtNC40LC0xMy4xIC00LjA4NTE0LC0xNC42NDA1OSAyLjkxNDg2LC0xMS4zNDA1OWw0LjMwNjQ0LDIuMDk0N2wxLjMwOTQ2LC0yLjMwNTE0YzEsLTEuOSAxLjcxNDI2LC0yLjIwMzUzIDMuMTE0MjYsLTEuNTAzNTNjMSwwLjYgMy4xMjA4OSwxLjAwMjQ1IDQuODIwODksMS4wMDI0NXoiIGRhdGEtcGFwZXItZGF0YT0ieyZxdW90O25vSG92ZXImcXVvdDs6ZmFsc2UsJnF1b3Q7b3JpZ0l0ZW0mcXVvdDs6WyZxdW90O1BhdGgmcXVvdDsseyZxdW90O2FwcGx5TWF0cml4JnF1b3Q7OnRydWUsJnF1b3Q7c2VnbWVudHMmcXVvdDs6W1tbMjUyLjI3NDM0LDE4MS44MzQyMl0sWzEsMC42XSxbLTEuNCwtMC43XV0sW1syNDkuMTc0MzQsMTgzLjMzNDIyXSxbMSwtMS45XSxbMCwwXV0sWzI0Ny44NzQzNCwxODUuNjM0MjJdLFtbMjQzLjU3NDM0LDE4My41MzQyMl0sWzAsMF0sWy03LC0zLjNdXSxbWzI0MC42NzQzNCwxOTQuODM0MjJdLFstNC40LC0xMy4xXSxbMi4xLDYuMV1dLFtbMjQ1LjE3NDM0LDIwNi4zMzQyMl0sWy0wLjMsLTAuMl0sWzEsMC42XV0sW1syNjcuNzc0MzQsMTk4LjczNDIyXSxbLTEuOCwxLjVdLFsyLjIsLTEuOF1dLFtbMjY0Ljc3NDM0LDE5My42MzQyMl0sWzQuNywyLjNdLFswLDBdXSxbMjYwLjM3NDM0LDE5MS41MzQyMl0sW1syNjEuNzc0MzQsMTg4LjIzNDIyXSxbMCwwXSxbMC44LC0xLjhdXSxbWzI2My4xNzQzNCwxODIuODM0MjJdLFswLDEuMV0sWzAsLTIuMV1dLFtbMjYwLjY3NDM0LDE4MS44MzQyMl0sWzEuMSwtMS43XSxbLTAuMywwLjVdXSxbWzI1Ny4wNzQzNCwxODIuODM0MjJdLFsxLjYsMF0sWy0xLjcsMF1dXSwmcXVvdDtjbG9zZWQmcXVvdDs6dHJ1ZSwmcXVvdDtmaWxsQ29sb3ImcXVvdDs6WzAsMCwwXX1dfSIgZmlsbD0iI2ZmZmZmZiIgc3Ryb2tlLXdpZHRoPSIwLjUiLz48L2c+PC9nPjwvc3ZnPg==";

  const newThread =
"data:image/svg+xml;base64,PHN2ZyB2ZXJzaW9uPSIxLjEiIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIgeG1sbnM6eGxpbms9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsiIHdpZHRoPSIyMS4zMzMzMyIgaGVpZ2h0PSIyMS4zMzMzMyIgdmlld0JveD0iMCwwLDIxLjMzMzMzLDIxLjMzMzMzIj48ZyB0cmFuc2Zvcm09InRyYW5zbGF0ZSgtMjI5LjMzMzMzLC0xNjkuMzMzMzMpIj48ZyBkYXRhLXBhcGVyLWRhdGE9InsmcXVvdDtpc1BhaW50aW5nTGF5ZXImcXVvdDs6dHJ1ZX0iIHN0cm9rZS1saW5lY2FwPSJidXR0IiBzdHJva2UtbGluZWpvaW49Im1pdGVyIiBzdHJva2UtbWl0ZXJsaW1pdD0iMTAiIHN0cm9rZS1kYXNoYXJyYXk9IiIgc3Ryb2tlLWRhc2hvZmZzZXQ9IjAiIHN0eWxlPSJtaXgtYmxlbmQtbW9kZTogbm9ybWFsIj48cGF0aCBkPSJNMjQ0LjM0NzY4LDE3Ni41OTA5OGgtMi4xMDY5NGwtMC4yODAyLDIuMTc0MTlsLTMuOTczMzUsMC4wMDYxMWwtMC4yNzQ5NSwtMi4xODAzaC0yLjA1Nzk3Yy0wLjU4NjQxLDAgLTAuODY5MjEsLTAuNzMyNjUgLTAuNDYzOTksLTEuMTU2ODJsNC4zNDQ4NywtNC41NzU4N2MwLjI1NzA5LC0wLjI1NzA3IDAuNjc0NTYsLTAuMjU3MDcgMC45MTgxOCwwbDQuMzU5NTYsNC41NzU4N2MwLjQwNDAxLDAuNDI0MTcgMC4xMTAxOSwxLjE1NjgyIC0wLjQ2NTIyLDEuMTU2ODIiIGZpbGw9Im5vbmUiIGZpbGwtcnVsZT0iZXZlbm9kZCIgc3Ryb2tlLW9wYWNpdHk9IjAuMiIgc3Ryb2tlPSIjMDAwMDAwIiBzdHJva2Utd2lkdGg9IjIuNSIvPjxwYXRoIGQ9Ik0yNDQuMzQ3NjgsMTgzLjQwOTAzYzAuNTc1NCwwIDAuODY5MjIsMC43MzI2NSAwLjQ2NTIyLDEuMTU2ODJsLTQuMzU5NTYsNC41NzU4N2MtMC4yNDM2MywwLjI1NzA3IC0wLjY2MTA5LDAuMjU3MDcgLTAuOTE4MTgsMGwtNC4zNDQ4NywtNC41NzU4N2MtMC40MDUyMywtMC40MjQxNyAtMC4xMjI0MiwtMS4xNTY4MiAwLjQ2Mzk5LC0xLjE1NjgyaDIuMDU3OTdsMC4yNTI2LC0yLjE0ODZsMy45ODA2MiwwLjAyMzE2bDAuMjk1MjgsMi4xMjU0NGgyLjEwNjk0IiBkYXRhLXBhcGVyLWRhdGE9InsmcXVvdDtpbmRleCZxdW90OzpudWxsfSIgZmlsbD0ibm9uZSIgZmlsbC1ydWxlPSJldmVub2RkIiBzdHJva2Utb3BhY2l0eT0iMC4yIiBzdHJva2U9IiMwMDAwMDAiIHN0cm9rZS13aWR0aD0iMi41Ii8+PHBhdGggZD0iTTI0NC4zNDc2OCwxNzYuNTkwOThoLTIuMTA2OTRsLTAuOTA0NzIsNi44MzgxYy0wLjA5Nzk0LDAuNzg0MDcgLTAuNzk1NzYsMS4zMzY3NyAtMS41NTQ4LDEuMjIxMDljLTAuNjEyMTIsLTAuMDg5OTggLTEuMDg5NTgsLTAuNjA0MTIgLTEuMTY0MjYsLTEuMjIxMDlsLTAuOTA0NzIsLTYuODM4MWgtMi4wNTc5N2MtMC41ODY0MSwwIC0wLjg2OTIxLC0wLjczMjY1IC0wLjQ2Mzk5LC0xLjE1NjgybDQuMzQ0ODcsLTQuNTc1ODdjMC4yNTcwOSwtMC4yNTcwNyAwLjY3NDU2LC0wLjI1NzA3IDAuOTE4MTgsMGw0LjM1OTU2LDQuNTc1ODdjMC40MDQwMSwwLjQyNDE3IDAuMTEwMTksMS4xNTY4MiAtMC40NjUyMiwxLjE1NjgyIiBmaWxsPSIjZmZmZmZmIiBmaWxsLXJ1bGU9ImV2ZW5vZGQiIHN0cm9rZT0ibm9uZSIgc3Ryb2tlLXdpZHRoPSIxIi8+PHBhdGggZD0iTTI0NC4zNDc2OCwxODMuNDA5MDNjMC41NzU0LDAgMC44NjkyMiwwLjczMjY1IDAuNDY1MjIsMS4xNTY4MmwtNC4zNTk1Niw0LjU3NTg3Yy0wLjI0MzYzLDAuMjU3MDcgLTAuNjYxMDksMC4yNTcwNyAtMC45MTgxOCwwbC00LjM0NDg3LC00LjU3NTg3Yy0wLjQwNTIzLC0wLjQyNDE3IC0wLjEyMjQyLC0xLjE1NjgyIDAuNDYzOTksLTEuMTU2ODJoMi4wNTc5N2wwLjkwNDcyLC02LjgzODExYzAuMDc0NjgsLTAuNjE2OTcgMC41NTIxNCwtMS4xMzExMSAxLjE2NDI2LC0xLjIyMTA5YzAuNzU5MDQsLTAuMTE1NjggMS40NTY4NiwwLjQzNzAyIDEuNTU0OCwxLjIyMTA5bDAuOTA0NzIsNi44MzgxMWgyLjEwNjk0IiBkYXRhLXBhcGVyLWRhdGE9InsmcXVvdDtpbmRleCZxdW90OzpudWxsfSIgZmlsbD0iI2ZmZmZmZiIgZmlsbC1ydWxlPSJldmVub2RkIiBzdHJva2U9Im5vbmUiIHN0cm9rZS13aWR0aD0iMSIvPjxwYXRoIGQ9Ik0yMjkuMzMzMzMsMTkwLjY2NjY3di0yMS4zMzMzM2gyMS4zMzMzM3YyMS4zMzMzM3oiIGZpbGw9Im5vbmUiIGZpbGwtcnVsZT0ibm9uemVybyIgc3Ryb2tlPSJub25lIiBzdHJva2Utd2lkdGg9IjAiLz48L2c+PC9nPjwvc3ZnPg==";

  const timeIcon =
"data:image/svg+xml;base64,PHN2ZyB2ZXJzaW9uPSIxLjEiIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIgeG1sbnM6eGxpbms9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsiIHdpZHRoPSIxOC40MTAyNSIgaGVpZ2h0PSIxOC40MTAyNSIgdmlld0JveD0iMCwwLDE4LjQxMDI1LDE4LjQxMDI1Ij48ZyB0cmFuc2Zvcm09InRyYW5zbGF0ZSgtMjMwLjc5NDg4LC0xNzAuNzk0OSkiPjxnIGRhdGEtcGFwZXItZGF0YT0ieyZxdW90O2lzUGFpbnRpbmdMYXllciZxdW90Ozp0cnVlfSIgZmlsbC1ydWxlPSJub256ZXJvIiBzdHJva2UtbGluZWNhcD0iYnV0dCIgc3Ryb2tlLWxpbmVqb2luPSJtaXRlciIgc3Ryb2tlLW1pdGVybGltaXQ9IjEwIiBzdHJva2UtZGFzaGFycmF5PSIiIHN0cm9rZS1kYXNob2Zmc2V0PSIwIiBzdHlsZT0ibWl4LWJsZW5kLW1vZGU6IG5vcm1hbCI+PHBhdGggZD0iTTIzMi45MjMxLDE4MC42NzQyM2MwLC0yLjUzOTI3IDEuMzM3MzYsLTQuNzY2MTggMy4zNDYxNSwtNi4wMTQ4di0wLjY3ODM2YzAsLTAuOTU2NjQgMC43NzU1MSwtMS43MzIxNSAxLjczMjE1LC0xLjczMjE1aDMuOTk3MjVjMC45NTY2NCwwIDEuNzMyMTUsMC43NzU1MSAxLjczMjE1LDEuNzMyMTV2MC42NzgzNmMyLjAwODc5LDEuMjQ4NjMgMy4zNDYxNiwzLjQ3NTU0IDMuMzQ2MTYsNi4wMTQ4YzAsMy45MDg0OCAtMy4xNjg0NSw3LjA3NjkyIC03LjA3NjkzLDcuMDc2OTJjLTMuOTA4NDgsMCAtNy4wNzY5MiwtMy4xNjg0NCAtNy4wNzY5MiwtNy4wNzY5MnpNMjQxLjYyNTU4LDE3Ny44OTQ4N2MwLjIyMzM3LDAgMC4zMzc0MiwtMC4yODQ0MSAwLjE4MDU5LC0wLjQ0OTA3bC0xLjY5MjM1LC0xLjc3NjMzYy0wLjA5NDU3LC0wLjA5OTggLTAuMjU2NjMsLTAuMDk5OCAtMC4zNTY0MywwbC0xLjY4NjY1LDEuNzc2MzNjLTAuMTU3MzEsMC4xNjQ2NiAtMC4wNDc1MiwwLjQ0OTA3IDAuMTgwMTIsMC40NDkwN2gwLjc5ODg5bDAuMzQzOTIsMi41OTk0M2MtMC4yMSwwLjE1OTgzIC0wLjM0NTU3LDAuNDEyNDQgLTAuMzQ1NTcsMC42OTY3MmMwLDAuNDgzMjUgMC4zOTE3NSwwLjg3NSAwLjg3NSwwLjg3NWMwLjAxMTM1LDAgMC4wMjI2NiwtMC4wMDAyMSAwLjAzMzksLTAuMDAwNjRsMS44OTY0OSwxLjY5ODgybC0xLjAzODU4LDAuNzIyOGMtMC4xNjA5NywwLjE2MDk3IC0wLjAzNzQ5LDAuNDM5NzEgMC4xOTAxOCwwLjQ0NDlsMi40NDg3LDAuMDYzNDFjMC4xNDExMywwIDAuMjU1NzIsLTAuMTE0NiAwLjI1MjAzLC0wLjI1MjA0bC0wLjA1OTM4LC0yLjQ1MjczYy0wLjAwNTU0LC0wLjIyNzMzIC0wLjI4NzI5LC0wLjM0Nzc4IC0wLjQ0NTIzLC0wLjE4OTgzbC0wLjU3ODM0LDAuNTc4MzRsLTEuODI4OTcsLTEuNDAxNTdjMC4wMDI3OSwtMC4wMjg0NCAwLjAwNDIxLC0wLjA1NzI4IDAuMDA0MjEsLTAuMDg2NDZjMCwtMC4yNzk2NSAtMC4xMzExOSwtMC41Mjg2NiAtMC4zMzUzOCwtMC42ODg4NGwtMC4wMjM0NSwtMi44MTc4NHoiIGZpbGw9Im5vbmUiIHN0cm9rZS1vcGFjaXR5PSIwLjIiIHN0cm9rZT0iIzAwMDAwMCIgc3Ryb2tlLXdpZHRoPSIxLjc1Ii8+PHBhdGggZD0iTTIzMC43OTQ4OSwxODkuMjA1MTZ2LTE4LjQxMDI1aDE4LjQxMDI1djE4LjQxMDI1eiIgZmlsbD0ibm9uZSIgc3Ryb2tlPSJub25lIiBzdHJva2Utd2lkdGg9IjAiLz48cGF0aCBkPSJNMjMyLjkyMzEsMTgwLjY3NDIzYzAsLTIuNTM5MjcgMS4zMzczNiwtNC43NjYxOCAzLjM0NjE1LC02LjAxNDh2LTAuNjc4MzZjMCwtMC45NTY2NCAwLjc3NTUxLC0xLjczMjE1IDEuNzMyMTUsLTEuNzMyMTVoMy45OTcyNWMwLjk1NjY0LDAgMS43MzIxNSwwLjc3NTUxIDEuNzMyMTUsMS43MzIxNXYwLjY3ODM2YzIuMDA4NzksMS4yNDg2MyAzLjM0NjE1LDMuNDc1NTQgMy4zNDYxNSw2LjAxNDhjMCwzLjkwODQ4IC0zLjE2ODQ1LDcuMDc2OTIgLTcuMDc2OTIsNy4wNzY5MmMtMy45MDg0OCwwIC03LjA3NjkyLC0zLjE2ODQ0IC03LjA3NjkyLC03LjA3Njkyek0yNDEuNjI1NTgsMTc3Ljg5NDg3YzAuMjIzMzcsMCAwLjMzNzQzLC0wLjI4NDQxIDAuMTgwNiwtMC40NDkwN2wtMS42OTIzNSwtMS43NzYzMmMtMC4wOTQ1NywtMC4wOTk4IC0wLjI1NjYzLC0wLjA5OTggLTAuMzU2NDMsMGwtMS42ODY2NSwxLjc3NjMyYy0wLjE1NzMxLDAuMTY0NjYgLTAuMDQ3NTIsMC40NDkwNyAwLjE4MDEyLDAuNDQ5MDdoMC43OTg4OWwwLjM0MzkyLDIuNTk5NDNjLTAuMjEsMC4xNTk4MyAtMC4zNDU1NywwLjQxMjQ0IC0wLjM0NTU3LDAuNjk2NzFjMCwwLjQ4MzI1IDAuMzkxNzUsMC44NzUgMC44NzUsMC44NzVjMC4wMTEzNSwwIDAuMDIyNjUsLTAuMDAwMjEgMC4wMzM5LC0wLjAwMDY0bDEuNDIyODEsMS44NTY3MWwtMC41NjQ5LDAuNTY0OTFjLTAuMTYwOTcsMC4xNjA5NyAtMC4wMzc0OSwwLjQzOTcxIDAuMTkwMTcsMC40NDQ5bDIuNDQ4NywwLjA2MzQxYzAuMTQxMTMsMCAwLjI1NTczLC0wLjExNDYgMC4yNTIwNCwtMC4yNTIwNGwtMC4wNTkzOCwtMi40NTI3MmMtMC4wMDU1NCwtMC4yMjczMyAtMC4yODcyOSwtMC4zNDc3OCAtMC40NDUyMywtMC4xODk4NGwtMC41NzgzNCwwLjU3ODM0bC0xLjgyODk4LC0xLjQwMTU3YzAuMDAyNzksLTAuMDI4NDQgMC4wMDQyMiwtMC4wNTcyOCAwLjAwNDIyLC0wLjA4NjQ2YzAsLTAuMjc5NjUgLTAuMTMxMTksLTAuNTI4NjYgLTAuMzM1MzgsLTAuNjg4ODRsMC4zNDQ5NywtMi42MDczMXoiIGZpbGw9IiNmZmZmZmYiIHN0cm9rZS1vcGFjaXR5PSIwLjIiIHN0cm9rZT0iIzAwMDAwMCIgc3Ryb2tlLXdpZHRoPSIwIi8+PC9nPjwvZz48L3N2Zz4=";

  const startFlag =
"data:image/svg+xml;base64,PHN2ZyBpZD0iTGF5ZXJfMSIgZGF0YS1uYW1lPSJMYXllciAxIiB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHZpZXdCb3g9IjAgMCAxNi42MyAxNy41Ij48ZGVmcz48c3R5bGU+LmNscy0xLC5jbHMtMntmaWxsOiM0Y2JmNTY7c3Ryb2tlOiM0NTk5M2Q7c3Ryb2tlLWxpbmVjYXA6cm91bmQ7c3Ryb2tlLWxpbmVqb2luOnJvdW5kO30uY2xzLTJ7c3Ryb2tlLXdpZHRoOjEuNXB4O308L3N0eWxlPjwvZGVmcz48dGl0bGU+aWNvbi0tZ3JlZW4tZmxhZzwvdGl0bGU+PHBhdGggY2xhc3M9ImNscy0xIiBkPSJNLjc1LDJBNi40NCw2LjQ0LDAsMCwxLDguNDQsMmgwYTYuNDQsNi40NCwwLDAsMCw3LjY5LDBWMTIuNGE2LjQ0LDYuNDQsMCwwLDEtNy42OSwwaDBhNi40NCw2LjQ0LDAsMCwwLTcuNjksMCIvPjxsaW5lIGNsYXNzPSJjbHMtMiIgeDE9IjAuNzUiIHkxPSIxNi43NSIgeDI9IjAuNzUiIHkyPSIwLjc1Ii8+PC9zdmc+";

  const keysMenu = [
    { text: "space", value: "space" },
    { text: "up arrow", value: "up arrow" }, { text: "down arrow", value: "down arrow" },
    { text: "right arrow", value: "right arrow" }, { text: "left arrow", value: "left arrow" },
    { text: "a", value: "a" }, { text: "b", value: "b" }, { text: "c", value: "c" },
    { text: "d", value: "d" }, { text: "e", value: "e" }, { text: "f", value: "f" },
    { text: "g", value: "g" }, { text: "h", value: "h" }, { text: "i", value: "i" },
    { text: "j", value: "j" }, { text: "k", value: "k" }, { text: "l", value: "l" },
    { text: "m", value: "m" }, { text: "n", value: "n" }, { text: "o", value: "o" },
    { text: "p", value: "p" }, { text: "q", value: "q" }, { text: "r", value: "r" },
    { text: "s", value: "s" }, { text: "t", value: "t" }, { text: "u", value: "u" },
    { text: "v", value: "v" }, { text: "w", value: "w" }, { text: "x", value: "x" },
    { text: "y", value: "y" }, { text: "z", value: "z" }, { text: "0", value: "0" },
    { text: "1", value: "1" }, { text: "2", value: "2" }, { text: "3", value: "3" },
    { text: "4", value: "4" }, { text: "5", value: "5" }, { text: "6", value: "6" },
    { text: "7", value: "7" }, { text: "8", value: "8" }, { text: "9", value: "9" }
  ];

  let conditionStorage = {};
  let keybinds = {};
  let issueTimes = [];
  let hats = { ...runtime._hats };
  runtime.on("KEY_PRESSED", key => {
    key = key.toLowerCase();
    // Use this for compatibility with other extensions
    if (keybinds[key] !== undefined) keybinds[key].keyV.forEach(item => { postData(item, true) });
  });
  runtime.on("AFTER_EXECUTE", () => {
    const keys = runtime.ioDevices.keyboard._keysPressed;
    for (let i = 0; i < Object.keys(keybinds).length; i++) {
      const keyName = Object.keys(keybinds)[i];
      const key = keybinds[keyName];
      if (keys.indexOf(keyName.toLowerCase()) === -1) key.keyV.forEach(item => { postData(item, false) });
    }
  });
  function postData(key, down) {
    if (key === "space") key = " ";
    if (key.includes("arrow")) key = key.charAt(0).toUpperCase() + key.slice(1).replace(" arrow", "");
    runtime.ioDevices.keyboard.postData({ key, isDown: down });
  }

  runtime.on("PROJECT_STOP_ALL", () => { conditionStorage = {}; issueTimes = [] });
  runtime.on("PROJECT_START", () => { conditionStorage = {}; issueTimes = [] });

  vm.on("EXTENSION_ADDED", tryUseScratchBlocks);
  vm.on("BLOCKSINFO_UPDATE", tryUseScratchBlocks);
  tryUseScratchBlocks();
  function tryUseScratchBlocks() {
    if (!window.ScratchBlocks) return;
    vm.removeListener("EXTENSION_ADDED", tryUseScratchBlocks);
    vm.removeListener("BLOCKSINFO_UPDATE", tryUseScratchBlocks);
    const originalCheck = ScratchBlocks.scratchBlocksUtils.isShadowArgumentReporter;
    ScratchBlocks.scratchBlocksUtils.isShadowArgumentReporter = function (block) {
      const result = originalCheck(block);
      if (result) return true;
      return block.isShadow() && regeneratedReporters.includes(block.type);
    };
  }

  // Thank you so much to @FurryR for the help <3
  function getCompiler() {
    if (vm.exports.JSGenerator && vm.exports.ScriptTreeGenerator) return vm.exports;
    else if (vm.exports.i_will_not_ask_for_help_when_these_break) return vm.exports.i_will_not_ask_for_help_when_these_break();
  }
  const compiler = getCompiler();
  if (compiler) {
    const { JSGenerator, ScriptTreeGenerator } = compiler;
    const _IRdescendStackedBlock = ScriptTreeGenerator.prototype.descendStackedBlock;
    ScriptTreeGenerator.prototype.descendStackedBlock = function (block) {
      if (block.opcode === "SPadvControl_breakLoop") {
        // confirm if inside loop
        if (check4CBlock(block.id, this.blocks)) return { kind: "SPadvControl.break" };
        else return _IRdescendStackedBlock.call(this, block);
      } else return _IRdescendStackedBlock.call(this, block);
    };
    const _JSdescendStackedBlock = JSGenerator.prototype.descendStackedBlock;
    JSGenerator.prototype.descendStackedBlock = function (node) {
      if (node.kind === "SPadvControl.break") this.source += "break;\n";
      else return _JSdescendStackedBlock.call(this, node);
    };
  }
  function check4CBlock(id, container) {
    let newID = container.getBlock(id);
    let con = true;
    if (!newID) return false;
    while (con) {
      if (newID.parent !== null) {
        newID = container.getBlock(newID.parent);
        if (container.getBranch(newID.id) !== null) {
          newID = true;
          con = false;
        }
      } else {
        newID = false;
        con = false;
        break;
      }
    }
    return newID;
  }

  class SPadvControl {
    getInfo() {
      return {
        id: "SPadvControl",
        name: "Extra Controls",
        docsURI: "https://extensions.penguinmod.com/docs/Extra-Control",
        color1: "#FFAB19",
        color2: "#EC9C13",
        color3: "#CF8B17",
        menuIconURI,
        blocks: [
          {
            opcode: "forceHat",
            extensions: ["colours_control"],
            blockType: Scratch.BlockType.COMMAND,
            text: "force hat [HAT] to [TYPE] on activate",
            arguments: {
              HAT: { type: Scratch.ArgumentType.STRING, menu: "HAT_MENU" },
              TYPE: { type: Scratch.ArgumentType.STRING, menu: "ACTIVATE" }
            }
          },
          {
            opcode: "resetHats",
            extensions: ["colours_control"],
            blockType: Scratch.BlockType.COMMAND,
            text: "reset forced hats"
          },
          "---",
          {
            opcode: "keybind",
            extensions: ["colours_control"],
            blockType: Scratch.BlockType.COMMAND,
            text: "bind key [KEY2] to [KEY1]",
            arguments: {
              KEY1: { type: Scratch.ArgumentType.STRING, menu: "keys" },
              KEY2: { type: Scratch.ArgumentType.STRING, menu: "keys" }
            }
          },
          {
            opcode: "getKeybind",
            extensions: ["colours_control"],
            blockType: Scratch.BlockType.REPORTER,
            text: "binds of [KEY] key",
            arguments: {
              KEY: { type: Scratch.ArgumentType.STRING, menu: "keys" }
            }
          },
          {
            opcode: "resetKey",
            extensions: ["colours_control"],
            blockType: Scratch.BlockType.COMMAND,
            text: "unbind all keybinds of [KEY]",
            arguments: {
              KEY: { type: Scratch.ArgumentType.STRING, menu: "keys" }
            }
          },
          {
            opcode: "resetBinds",
            extensions: ["colours_control"],
            blockType: Scratch.BlockType.COMMAND,
            text: "reset keybinds"
          },
          "---",
          {
            opcode: "repeatForUntil",
            extensions: ["colours_control"],
            blockType: Scratch.BlockType.LOOP,
            text: "repeat [NUM] or until [CON]",
            arguments: {
              NUM: { type: Scratch.ArgumentType.STRING, defaultValue: 10 },
              CON: { type: Scratch.ArgumentType.BOOLEAN }
            }
          },
          {
            opcode: "repeatSecUntil",
            extensions: ["colours_control"],
            blockType: Scratch.BlockType.LOOP,
            text: "repeat for [NUM] secs or until [CON]",
            arguments: {
              NUM: { type: Scratch.ArgumentType.STRING, defaultValue: 1 },
              CON: { type: Scratch.ArgumentType.BOOLEAN }
            }
          },
          {
            opcode: "spayedCondition",
            extensions: ["colours_control"],
            blockType: Scratch.BlockType.LOOP,
            text: ["if [CON1] start loop", "repeat until [CON2]"],
            branchIconURI: "",
            arguments: {
              CON1: { type: Scratch.ArgumentType.BOOLEAN },
              CON2: { type: Scratch.ArgumentType.BOOLEAN }
            }
          },
          "---",
          {
            opcode: "breakLoop",
            extensions: ["colours_control"],
            blockType: Scratch.BlockType.COMMAND,
            text: "break out loop [ICON]",
            isTerminal: true,
            arguments: {
              ICON: { type: Scratch.ArgumentType.IMAGE, dataURI: breakIcon }
            }
          },
          {
            opcode: "waitChanged",
            extensions: ["colours_control"],
            blockType: Scratch.BlockType.LOOP,
            branchCount: -1, branchIconURI: "",
            text: "wait until [THING] changes",
            arguments: {
              THING: {}
            }
          },
          {
            opcode: "runFlag",
            extensions: ["colours_control"],
            blockType: Scratch.BlockType.COMMAND,
            text: "run [FLAG] and continue",
            arguments: {
              FLAG: { type: Scratch.ArgumentType.IMAGE, dataURI: startFlag }
            }
          },
          "---",
          {
            opcode: "simuRun",
            extensions: ["colours_control"],
            blockType: Scratch.BlockType.CONDITIONAL,
            text: "simultaneously run",
            branchCount: 2
          },
          {
            opcode: "runType",
            extensions: ["colours_control"],
            blockType: Scratch.BlockType.LOOP,
            text: "run [TYPE]",
            arguments: {
              TYPE: { type: Scratch.ArgumentType.STRING, menu: "runTypes" }
            }
          },
          {
            opcode: "asyncCode",
            extensions: ["colours_control"],
            blockType: Scratch.BlockType.LOOP,
            branchIconURI: "",
            text: "[ICON] async",
            arguments: {
              ICON: { type: Scratch.ArgumentType.IMAGE, dataURI: timeIcon }
            }
          },
          {
            opcode: "tryCatch",
            extensions: ["colours_control"],
            blockType: Scratch.BlockType.CONDITIONAL,
            text: ["try", "catch"],
            branchCount: 2
          },
          { blockType: Scratch.BlockType.XML, xml: `<block type="SPadvControl_newThreadAdv"><value name="ARGS"><shadow type="text"><field name="TEXT">{ info : 1 }</field></shadow></value><value name="FRAME"><shadow type="SPadvControl_threadArgs"></shadow></value></block>` },
          {
            opcode: "newThreadAdv", blockType: Scratch.BlockType.LOOP,
            extensions: ["colours_control"],
            text: "start new thread with [FRAME] set to [ARGS]",
            hideFromPalette: true, branchIconURI: newThread,
            arguments: {
              ARGS: { type: Scratch.ArgumentType.STRING, defaultValue: "{ info : 1 }" },
              FRAME: {}
            }
          },
          {
            opcode: "threadArgs", blockType: Scratch.BlockType.REPORTER,
            extensions: ["colours_control"], hideFromPalette: true, text: "argument"
          },
          "---",
          {
            opcode: "ifRunBlock",
            extensions: ["colours_control"],
            blockType: Scratch.BlockType.CONDITIONAL,
            text: "step through blocks while [CON]",
            branchCount: 1,
            arguments: {
              CON: { type: Scratch.ArgumentType.BOOLEAN }
            }
          },
          {
            opcode: "ifPart",
            extensions: ["colours_control"],
            blockType: Scratch.BlockType.CONDITIONAL,
            text: ["if [CON]", "my ID [ID]"],
            branchCount: 1,
            arguments: {
              CON: { type: Scratch.ArgumentType.BOOLEAN },
              ID: { type: Scratch.ArgumentType.STRING, defaultValue: "my-block1" }
            }
          },
          {
            opcode: "elsePart",
            extensions: ["colours_control"],
            blockType: Scratch.BlockType.CONDITIONAL,
            text: ["else", "my ID [ID]"],
            branchCount: 1,
            arguments: {
              ID: { type: Scratch.ArgumentType.STRING, defaultValue: "my-block1" }
            }
          },
          {
            opcode: "ifElseVal",
            extensions: ["colours_control"],
            blockType: Scratch.BlockType.BOOLEAN,
            text: "if with ID [ID] true?",
            arguments: {
              ID: { type: Scratch.ArgumentType.STRING, defaultValue: "my-block1" }
            }
          },
          "---",
          {
            opcode: "onCall",
            extensions: ["colours_control"],
            blockType: Scratch.BlockType.CONDITIONAL,
            text: "on call [CALL] run",
            branchCount: 1,
            arguments: {
              CALL: { type: Scratch.ArgumentType.STRING, defaultValue: "branch1" }
            }
          },
          {
            opcode: "runBranch",
            extensions: ["colours_control"],
            blockType: Scratch.BlockType.COMMAND,
            text: "call [ID] to run",
            arguments: {
              ID: { type: Scratch.ArgumentType.STRING, defaultValue: "branch1" }
            }
          },
          {
            opcode: "runBranchWait",
            extensions: ["colours_control"],
            blockType: Scratch.BlockType.COMMAND,
            text: "call [ID] to run and wait",
            arguments: {
              ID: { type: Scratch.ArgumentType.STRING, defaultValue: "branch1" }
            }
          },
          "---",
          {
            opcode: "runInSprite",
            extensions: ["colours_control"],
            blockType: Scratch.BlockType.CONDITIONAL,
            text: ["as [SPRITE] do", "then [TYPE] to finish"],
            arguments: {
              SPRITE: { type: Scratch.ArgumentType.STRING, menu: "targets3" },
              TYPE: { type: Scratch.ArgumentType.STRING, menu: "contType" },
            }
          },
          {
            opcode: "getInSprite",
            extensions: ["colours_control"],
            blockType: Scratch.BlockType.REPORTER,
            text: "get [THING] from [SPRITE]",
            arguments: {
              SPRITE: { type: Scratch.ArgumentType.STRING, menu: "targets" },
              THING: {}
            }
          },
          "---",
          {
            opcode: "asClone",
            extensions: ["colours_control"],
            blockType: Scratch.BlockType.CONDITIONAL,
            text: "as clones of [SPRITE] with [VAR] set to [VAL]",
            arguments: {
              SPRITE: { type: Scratch.ArgumentType.STRING, menu: "targets2" },
              VAR: { type: Scratch.ArgumentType.STRING, defaultValue: "my variable" },
              VAL: { type: Scratch.ArgumentType.STRING, defaultValue: "0" }
            }
          },
          {
            opcode: "getInClone",
            extensions: ["colours_control"],
            blockType: Scratch.BlockType.REPORTER,
            text: "get [THING] from clone [ID] of [SPRITE] with [VAR] set to [VAL]",
            arguments: {
              SPRITE: { type: Scratch.ArgumentType.STRING, menu: "targets2" },
              THING: {},
              ID: { type: Scratch.ArgumentType.NUMBER, defaultValue: 1 },
              VAR: { type: Scratch.ArgumentType.STRING, defaultValue: "my variable" },
              VAL: { type: Scratch.ArgumentType.STRING, defaultValue: "0" }
            }
          },
          {
            opcode: "deleteRun",
            extensions: ["colours_control"],
            blockType: Scratch.BlockType.LOOP,
            text: "delete this clone and tell main sprite",
            isTerminal: true
          },
        ],
        menus: {
          ACTIVATE: ["finish", "restart"],
          HAT_MENU: { acceptReporters: true, items: "organizeHats" },
          targets: { acceptReporters: true, items: this.getTargets(false, false) },
          targets2: { acceptReporters: true, items: this.getTargets(true, false) },
          targets3: { acceptReporters: true, items: this.getTargets(false, true) },
          runTypes: {
            acceptReporters: true,
            items: ["forward", "reversed", "forward and reversed", "randomized"]
          },
          contType: { acceptReporters: true, items: ["wait", "dont wait"] },
          keys: { acceptReporters: true, items: keysMenu }
        },
      };
    }

    getTargets(myself, all) {
      const spriteNames = [];
      if (myself) spriteNames.push({ text: "myself", value: "_myself_" });
      if (!myself) spriteNames.push({ text: "Stage", value: "_stage_" });
      if (all) {
        spriteNames.push({ text: "All Sprites", value: "_all_" });
        spriteNames.push({ text: "All Main Sprites", value: "_all_2" });
        spriteNames.push({ text: "All Clones", value: "_all_3" });
      }  
      const targets = Scratch.vm.runtime.targets;
      for (let index = 1; index < targets.length; index++) {
        const target = targets[index];
        if (target.isOriginal) spriteNames.push({ text: target.getName(), value: target.getName() });
      }
      return spriteNames.length > 0 ? spriteNames : [""];
    }

    organizeHats() {
      const allHats = runtime._hats;
      const vanillaHats = [
        {text: "when I start as clone", value: "control_start_as_clone"},
        {text: "when green flag clicked", value: "event_whenflagclicked"},
        {text: "when key pressed", value: "event_whenkeypressed"},
        {text: "when sprite clicked", value: "event_whenthisspriteclicked"},
        {text: "when stage clicked", value: "event_whenstageclicked"},
        {text: "when backdrop switches", value: "event_whenbackdropswitchesto"},
        {text: "when touching object", value: "event_whentouchingobject"},
        {text: "when value greater than", value: "event_whengreaterthan"},
        {text: "when broadcast received", value: "event_whenbroadcastreceived"}
      ];
      const startIndex = Object.keys(allHats).findIndex(key => key === "event_whenbroadcastreceived");
      const filteredHats = Object.keys(allHats)
        .filter((key, index) => index > startIndex)
        .map(key => ({ text: key, value: key }));
      return [...vanillaHats, ...filteredHats];
    }

    forceHat(args) {
      const type = args.TYPE === "restart";
      const thisHat = runtime._hats[args.HAT];
      if (thisHat) thisHat.restartExistingThreads = type;
    }

    resetHats(args) {
      const currentHats = runtime._hats;
      for (const key in hats) {
        currentHats[key].restartExistingThreads = hats[key].restartExistingThreads;
      }
      hats = { ...runtime._hats };
    }

    keybind(args) {
      const key1 = Scratch.Cast.toString(args.KEY1);
      const key2 = Scratch.Cast.toString(args.KEY2);
      if (key1 === key2) return;
      if (keybinds[key1]) {
        if (keybinds[key1].keyV.indexOf(key2) === -1) keybinds[key1].keyV.push(key2);
      } else { keybinds[key1] = { keyV : [key2] } }
    }

    getKeybind(args) {
      const key = keybinds[Scratch.Cast.toString(args.KEY)];
      return key ? JSON.stringify(key.keyV) : `["${args.KEY}"]`;
    }

    resetKey(args) { delete keybinds[Scratch.Cast.toString(args.KEY)] }

    resetBinds() { keybinds = {} }

    runFlag(_, util) {
      const thisThread = util.thread.topBlock;
      runtime.emit("PROJECT_START_BEFORE_RESET");
      runtime.threads
        .filter(thread => thread.topBlock !== thisThread)
        .forEach(thread => thread.stopThisScript());
      // green flag behaviour
      runtime.emit("PROJECT_START");
      runtime.updateCurrentMSecs();
      runtime.ioDevices.clock.resetProjectTimer();
      runtime.targets.forEach(target => target.clearEdgeActivatedValues());
      for (let i = runtime.targets.length - 1; i >= 0; i--) {
        const thisTarget = runtime.targets[i];
        thisTarget.onGreenFlag();
        if (!thisTarget.isOriginal) {
          runtime.disposeTarget(thisTarget);
          runtime.stopForTarget(thisTarget);
        }
      }
      runtime.startHats("event_whenflagclicked");
    }

    repeatForUntil(args, util) {
      const condition = Scratch.Cast.toBoolean(args.CON);
      if (typeof util.stackFrame.loopCounter === "undefined") util.stackFrame.loopCounter = Math.round(Scratch.Cast.toNumber(args.NUM));
      util.stackFrame.loopCounter--;
      if (!condition && util.stackFrame.loopCounter >= 0) util.startBranch(1, true);
    }

    repeatSecUntil(args, util) {
      const condition = Scratch.Cast.toBoolean(args.CON);
      if (condition) return; // Dont run once
      if (util.stackTimerNeedsInit()) {
        args.NUM = Math.max(0, 1000 * args.NUM);
        util.startStackTimer(args.NUM);
        Scratch.vm.runtime.requestRedraw();
        util.startBranch(1, true);
      } else if (!util.stackTimerFinished() && !condition) {
        util.startBranch(1, true);
      }
    }

    spayedCondition(args, util) {
      if (typeof util.stackFrame.index === "undefined") util.stackFrame.index = true;
      if (!Scratch.Cast.toBoolean(args.CON1) && util.stackFrame.index) return;
      else {
        if (!Scratch.Cast.toBoolean(args.CON2)) {
          util.stackFrame.index = false;
          util.startBranch(1, true);
        } else {
          util.stackFrame.index = true;
          return;
        }
      }
    }

    simuRun(args, util) {
      if (
        util.thread.target.blocks.getBranch(util.thread.peekStack(), 1) &&
        util.thread.target.blocks.getBranch(util.thread.peekStack(), 2)
      ) {
        let thread1 = util.thread.target.blocks.getBranch(util.thread.peekStack(), 1);
        const thread2 = util.thread.target.blocks.getBranch(util.thread.peekStack(), 2);
        const target = util.target;
        const newRuntime = util.sequencer.runtime;
        //minimize push time
        thread1 = newRuntime._pushThread(thread1, target);
        thread1.status = 1;
        newRuntime._pushThread(thread2, target);
        thread1.status = 0;
      }
    }

    async runType(args, util) {
      const branch = util.thread.target.blocks.getBranch(util.thread.peekStack(), 1);
      if (branch) {
        if (args.TYPE === "forward") runtime._pushThread(branch, util.target);
        else if (args.TYPE === "reversed" || args.TYPE === "randomized") {
          const container = util.target.blocks;
          let blockOrder = [];
          let ID = branch;
          while (ID !== null) {
            blockOrder.push(ID);
            var blockInfo = container.getBlock(ID);
            ID = blockInfo.next;
          }
          if (args.TYPE === "reversed") blockOrder = blockOrder.reverse();
          else blockOrder = blockOrder.sort(() => Math.random() - 0.5);
          for (let i = 0; i < blockOrder.length; i++) {
            ID = blockOrder[i];
            var blockInfo = container.getBlock(ID);
            var oldInfo = [blockInfo.parent, blockInfo.next];
            blockInfo.parent = null;
            blockInfo.next = null;
            var thread = runtime._pushThread(ID, util.target, {stackClick: true});
            thread.stack = [];
            thread.pushStack(ID);
            if (vm.runtime.compilerOptions.enabled) thread.tryCompile();
            await new Promise(resolve => {
              const interval = setInterval(() => {
                if (!vm.runtime.isActiveThread(thread)) {
                  clearInterval(interval);
                  resolve();
                }
              }, 1);
            });
            blockInfo.parent = oldInfo[0];
            blockInfo.next = oldInfo[1];
          }
        } else {
          const thread = runtime._pushThread(branch, util.target);
          await new Promise(resolve => {
            const checkThread = () => {
              if (!vm.runtime.isActiveThread(thread)) resolve();
              else setTimeout(checkThread, 1);
            };
            checkThread();
          });
          await this.runType({ ...args, TYPE: "reversed" }, util);
        }
      }
    }

    onCall() { /* ignore initially running */ }

    runBranch(args, util) {
      const callID = Scratch.Cast.toString(args.ID);
      const promises = [];
      const threads2Wait = []; // used for "run and wait"
      for (const target of runtime.targets) {
        const blocks = target.blocks;
        const blockKeys = Object.keys(blocks._blocks);
        for (const key of blockKeys) {
          const block = blocks._blocks[key];
          if (block.opcode === "SPadvControl_onCall") {
            let input = blocks.getBlock(block.inputs.CALL.block)?.fields?.TEXT?.value;
            let isText = Scratch.Cast.toBoolean(input);
            // If the user simply inputs "false" or "true", we should prevent that
            if (Scratch.Cast.toString(isText) === input) isText = true;
            if (input === undefined && !isText) {
              promises.push(this.getOutput(block.inputs?.CALL?.block, target)
                .then(output => {
                  input = output === callID;
                  if (block.opcode === "SPadvControl_onCall" && input) {
                    const blockID = blocks._blocks[key].id;
                    const branch = blocks.getBranch(blockID, 1);
                    if (branch) threads2Wait.push(util.sequencer.runtime._pushThread(branch, target));
                  }
                })
              );
            } else if (isText && input === callID) {
              const blockID = blocks._blocks[key].id;
              const branch = blocks.getBranch(blockID, 1);
              if (branch) threads2Wait.push(util.sequencer.runtime._pushThread(branch, target));
            }
          }
        }
      }
      if (promises.length === 0) return threads2Wait;
      else return Promise.all(promises).then(() => threads2Wait);
    }
    async getOutput(blockID, target) {
      const oldVal = runtime.compilerOptions.enabled;
      runtime.compilerOptions.enabled = false;
      const thread = runtime._pushThread(blockID, target);
      runtime.compilerOptions.enabled = oldVal;
      thread.isCompiled = false;
      return new Promise(resolve => {
        const interval = setInterval(() => {
          const reported = Scratch.Cast.toString(thread.justReported);
          if (reported !== "null") {
            clearInterval(interval);
            resolve(reported);
          }
        }, 1);
      });
    }

    async runBranchWait(args, util) {
      let threads2Wait = await this.runBranch(args, util);
      await new Promise(resolve => {
        const interval = setInterval(() => {
          for (let i = threads2Wait.length - 1; i >= 0; i--) {
            if (!vm.runtime.isActiveThread(threads2Wait[i])) threads2Wait.splice(i, 1);
          }
          if (threads2Wait.length === 0) {
            clearInterval(interval);
            resolve();
          }
        }, 1);
      });
    }

    async tryCatch(_, util) {
      const branch = util.thread.target.blocks.getBranch(util.thread.peekStack(), 1);
      if (branch) {
        const thread = runtime._pushThread(branch, util.target);
        await new Promise(resolve => {
          const checkThread = () => {
            thread.pushTime = Math.floor(Date.now() / 100) * 100;
            if (!vm.runtime.isActiveThread(thread)) resolve();
            else if (issueTimes.indexOf(thread.pushTime) !== -1) {
              thread.stopThisScript();
              resolve();
            }
            else setTimeout(checkThread, 1);
          };
          checkThread();
        });
        if (issueTimes.indexOf(thread.pushTime) !== -1) util.startBranch(2, false);
      }
    }

    async asyncCode(args, util) {
      const target = util.target;
      const container = target.blocks;
      if (util.thread.target.blocks.getBranch(util.thread.peekStack(), 1)) {
        let ID = util.thread.target.blocks.getBranch(util.thread.peekStack(), 1);
        while (ID !== null) {
          var blockInfo = container.getBlock(ID);
          var oldInfo = [blockInfo.parent, blockInfo.next];
          blockInfo.parent = null;
          blockInfo.next = null;
          var thread = runtime._pushThread(ID, target, {stackClick: true});
          thread.stack = [];
          thread.pushStack(ID);
          if (vm.runtime.compilerOptions.enabled) thread.tryCompile();
          await new Promise(resolve => {
            const interval = setInterval(() => {
              if (!vm.runtime.isActiveThread(thread)) {
                clearInterval(interval);
                resolve();
              }
            }, 10);
          });
          blockInfo.parent = oldInfo[0];
          blockInfo.next = oldInfo[1];
          ID = blockInfo.next;
        }
      }
    }

    ifRunBlock(args, util) {
      const branch = util.thread.target.blocks.getBranch(util.thread.peekStack(), 1);
      const con = Scratch.Cast.toBoolean(args.CON);
      if (branch) {
        if (con) {
          if (util.stackFrame.SPctrlThread === undefined) util.stackFrame.SPctrlThread = runtime._pushThread(branch, util.target);
          if (runtime.isActiveThread(util.stackFrame.SPctrlThread)) util.startBranch(2, true);
        } else if (util.stackFrame.SPctrlThread !== undefined) {
          const thread = util.stackFrame.SPctrlThread;
          if (runtime.isActiveThread(thread)) thread.stopThisScript();
        }
      }
    }

    ifPart(args, util) {
      const con = Scratch.Cast.toBoolean(args.CON);
      conditionStorage[Scratch.Cast.toString(args.ID)] = con;
      if (con) util.startBranch(1, false);
    }

    elsePart(args, util) {
      const ID = Scratch.Cast.toString(args.ID);
      if (conditionStorage[ID] !== undefined && conditionStorage[ID] === false) util.startBranch(1, false);
    }

    ifElseVal(args) {
      const ID = Scratch.Cast.toString(args.ID);
      return Scratch.Cast.toBoolean(conditionStorage[ID]);
    }

    async runInSprite(args, util) {
      const branch = util.thread.target.blocks.getBranch(util.thread.peekStack(), 1);
      let newTarget = args.SPRITE === "_stage_" ? runtime.getTargetForStage() : runtime.getSpriteTargetByName(args.SPRITE);
      let targets = runtime.targets;
      let thread;
      if (!branch) return;
      if (Scratch.Cast.toString(args.SPRITE).startsWith("_all_")) {
        if (args.SPRITE.includes("2")) targets = targets.filter(target => target.isOriginal); // Main Sprites
        if (args.SPRITE.includes("3")) targets = targets.filter(target => !target.isOriginal); // Clones
        newTarget = targets[0];
      }
      if (newTarget) {
        thread = runtime._pushThread(branch, util.target);
        thread.target = newTarget;
        if (runtime.compilerOptions.enabled) thread.tryCompile();
      }
      if (Scratch.Cast.toString(args.SPRITE).startsWith("_all_")) {
        for (let i = 0; i < targets.length; i++) {
          const newThread = runtime._pushThread(branch, util.target);
          newThread.target = targets[i];
          if (runtime.compilerOptions.enabled) newThread.tryCompile();
        }
      }
      // Branch is the same, no need to wait for all threads to finish when they are the same
      if (args.TYPE === "wait" && thread) {
        await new Promise(resolve => {
          const interval = setInterval(() => {
            if (!vm.runtime.isActiveThread(thread)) {
              clearInterval(interval);
              resolve();
            }
          }, 1);
        });
      }
    }

    async getInSprite(args, util) {
      const container = util.thread.blockContainer;
      let branch = container.getBlock(util.thread.isCompiled ? util.thread.peekStack() : util.thread.peekStackFrame().op.id);
      branch = branch.inputs.THING;
      const newTarget = args.SPRITE === "_stage_" ? runtime.getTargetForStage() : runtime.getSpriteTargetByName(args.SPRITE);
      if (branch !== undefined && newTarget) return await this.getTargetVal(newTarget, branch, util.target);
      return "";
    }

    asClone(args, util) {
      const target = args.SPRITE === "_myself_" ? util.target : runtime.getSpriteTargetByName(args.SPRITE);
      if (!target) return;
      const clones = target.sprite.clones;
      const branch = util.thread.target.blocks.getBranch(util.thread.peekStack(), 1);
      if (branch) {
        for (var i = 1; i < clones.length; i++) {
          if (clones[i]) {
            const variable = clones[i].lookupVariableByNameAndType(args.VAR, "", clones[i]);
            const value = Scratch.Cast.toString(args.VAL);
            if (variable && Scratch.Cast.toString(variable.value) === value) {
              if (args.SPRITE === "_myself_") runtime._pushThread(branch, clones[i]);
              else {
                const thread = runtime._pushThread(branch, util.target);
                thread.target = clones[i];
                if (runtime.compilerOptions.enabled) thread.tryCompile();
              }
            }
          }
        }
      }
    }

    async getInClone(args, util) {
      const container = util.thread.blockContainer;
      let branch = container.getBlock(util.thread.isCompiled ? util.thread.peekStack() : util.thread.peekStackFrame().op.id);
      branch = branch.inputs.THING;

      const target = args.SPRITE === "_myself_" ? util.target : runtime.getSpriteTargetByName(args.SPRITE);
      if (!target) return "";
      const clones = target.sprite.clones;
      let newTarget = [];
      for (let i = 1; i < clones.length; i++) {
        if (clones[i]) {
          const variable = clones[i].lookupVariableByNameAndType(args.VAR, "", clones[i]);
          const value = Scratch.Cast.toString(args.VAL);
          if (variable && Scratch.Cast.toString(variable.value) === value) newTarget.push(clones[i]);
        }
      }
      newTarget = newTarget[Scratch.Cast.toNumber(args.ID) - 1];
      if (branch !== undefined && newTarget) return await this.getTargetVal(newTarget, branch, util.target);
      return "";
    }

    async getTargetVal(newTarget, block, ogTarget) {
      const oldVal = runtime.compilerOptions.enabled;
      runtime.compilerOptions.enabled = false;
      if (block.block === null) return "";
      const thread = runtime._pushThread(block.block, ogTarget);
      runtime.compilerOptions.enabled = oldVal;
      thread.isCompiled = false;
      thread.target = newTarget;
      return new Promise(resolve => {
        const interval = setInterval(() => {
          const reported = Scratch.Cast.toString(thread.justReported);
          if (reported !== "null") {
            clearInterval(interval);
            resolve(reported);
          }
        }, 1);
      });
    }

    deleteRun(args, util) {
      const target =  util.target;
      if (target.isOriginal) return;
      const branch = util.thread.target.blocks.getBranch(util.thread.peekStack(), 1);
      runtime.disposeTarget(target);
      runtime.stopForTarget(target);
      if (branch) runtime._pushThread(branch, target.sprite.clones[0]);
    }

    newThreadAdv(args, util) {
      const branch = util.thread.target.blocks.getBranch(util.thread.peekStack(), 0);
      if (branch) {
        const thread = util.sequencer.runtime._pushThread(branch, util.target);
        const params = thread.SPadvCtrl;
        if (typeof params === "undefined") thread.stackFrames[0].SPadvCtrl = {};
        thread.stackFrames[0].SPadvCtrl.arg = Scratch.Cast.toString(args.ARGS);
      }
    }
    threadArgs(args, util) {
      const stack = util.thread.stackFrames;
      if (typeof stack === "undefined") return "";
      const params = stack[0].SPadvCtrl;
      if (typeof params === "undefined") return "";
      return params.arg || "";
    }

    waitChanged(args, util) {
      const input = Scratch.Cast.toString(args.THING);
      if (util.stackFrame.SPwaitChange === undefined) util.stackFrame.SPwaitChange = input;
      if (Scratch.Cast.compare(util.stackFrame.SPwaitChange, input) === 0) util.startBranch(1, true);
    }

    // Will work like a normal Break Loop when compiler is on, otherwise will run this:
    breakLoop(_, util) {
      return new Promise(resolve => {
        const container = util.thread.blockContainer;
        const myID = container.getBlock(util.thread.isCompiled ? util.thread.peekStack() : util.thread.peekStackFrame().op.id);
        let newID = myID;
        let con = true;
        if (!runtime.compilerOptions.enabled) {
          console.warn("For this 'Break Out Loop' block to work properly, please Enable the Compiler");
        }
        if (!newID) {
          resolve();
          return;
        }
        while (con) {
          if (newID.parent !== null) {
            newID = container.getBlock(newID.parent);
            // check if block is IN or UNDER this Loop Block
            if (container.getBranch(newID.id) !== null && this.isInLoop(container, myID.id, newID.id)) {
              con = false;
            }
          } else {
            newID = null;
            con = false;
            break;
          }
        }
        if (!newID) {
          resolve();
          return;
        }
        newID = newID.next || this.getOuterNext(container, newID);
        util.stopThisScript();
        if (newID) vm.runtime._pushThread(newID, util.target);
        resolve();
      });
    }
    isInLoop(container, myID, loopBlock) {
      let value = false;
      let ID = container.getBranch(loopBlock, 1);
      if (ID) {
        while (ID !== null) {
          var blockInfo = container.getBlock(ID);
          if (ID === myID) value = true;
          ID = blockInfo.next;
        }
      }
      return value;
    }
    getOuterNext(container, block) {
      let value = null;
      let ID = block;
      while (ID !== null) {
        ID = container.getBlock(ID.parent);
        if (ID) {
          if (container.getBranch(ID.id) !== null && ID.next) {
            value = ID.next;
            ID = null;
          }
        } else { ID = null }
      }
      return value;
    }
  }
  window.onerror = function() { issueTimes.push(Math.floor(Date.now() / 100) * 100) };

  Scratch.extensions.register(new SPadvControl());
})(Scratch);
","data:application/x-javascript;base64,(function(Scratch) {
    'use strict';
    const ico = "data:image/svg+xml;base64,PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPCFET0NUWVBFIHN2ZyBQVUJMSUMgIi0vL1czQy8vRFREIFNWRyAxLjEvL0VOIiAiaHR0cDovL3d3dy53My5vcmcvR3JhcGhpY3MvU1ZHLzEuMS9EVEQvc3ZnMTEuZHRkIj4KPHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHZlcnNpb249IjEuMSIgd2lkdGg9IjUxMnB4IiBoZWlnaHQ9IjUxMnB4IiBzdHlsZT0ic2hhcGUtcmVuZGVyaW5nOmdlb21ldHJpY1ByZWNpc2lvbjsgdGV4dC1yZW5kZXJpbmc6Z2VvbWV0cmljUHJlY2lzaW9uOyBpbWFnZS1yZW5kZXJpbmc6b3B0aW1pemVRdWFsaXR5OyBmaWxsLXJ1bGU6ZXZlbm9kZDsgY2xpcC1ydWxlOmV2ZW5vZGQiIHhtbG5zOnhsaW5rPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rIj4KPGc+PHBhdGggc3R5bGU9Im9wYWNpdHk6MC45ODciIGZpbGw9IiNmNzllNjAiIGQ9Ik0gMjI4LjUsLTAuNSBDIDIzMy4xNjcsLTAuNSAyMzcuODMzLC0wLjUgMjQyLjUsLTAuNUMgMjkyLjgzNSwxLjgzNjM4IDM0MC41MDEsMTQuNjY5NyAzODUuNSwzOEMgNDEzLjYxNSw1My4xMTUyIDQzNS40NDksNzQuNjE1MiA0NTEsMTAyLjVDIDQ1NC45NTMsMTEwLjA2NiA0NTcuNDUzLDExOC4wNjYgNDU4LjUsMTI2LjVDIDQ0OC4zOCwxMDEuMTU0IDQzMS4zOCw4MS42NTQxIDQwNy41LDY4QyAzNjcuNTYsNDUuMjYxMyAzMjQuNTYsMzIuNTk0NyAyNzguNSwzMEMgMjYzLjY2MSwyOS4xNzI0IDI0OC45OTQsMjkuMzM5MSAyMzQuNSwzMC41QyAxOTEuNDMsMzIuMjQ0NyAxNTAuNzYzLDQzLjA3OCAxMTIuNSw2M0MgOTQuMjgyLDczLjIxMDkgNzguNDQ4Niw4Ni4zNzc1IDY1LDEwMi41QyA0NS4yNDkyLDEzMS41OTUgNDUuOTE1OCwxNjAuMjYyIDY3LDE4OC41QyA3NS44MTM4LDE5OC43MzYgODUuNDgwNSwyMDguMDY5IDk2LDIxNi41QyA5Ny44NjA1LDIxOC44ODggOTkuMTkzOSwyMjEuNTU0IDEwMCwyMjQuNUMgMTAwLjUsMjkzLjQ5OSAxMDAuNjY3LDM2Mi40OTkgMTAwLjUsNDMxLjVDIDEwMC4wNjksNDQyLjU3OCAxMDAuNTY5LDQ1My41NzggMTAyLDQ2NC41QyAxMDUuMzU1LDQ3MS42ODcgMTEwLjUyMiw0NzcuMDIxIDExNy41LDQ4MC41QyA4OC42OTY0LDQ3My4zNjIgNzIuNjk2NCw0NTUuMDI5IDY5LjUsNDI1LjVDIDY5LjY2NjcsMzYxLjQ5OSA2OS41LDI5Ny40OTkgNjksMjMzLjVDIDQ5LjIyMDIsMjE3LjU5IDM0LjU1MzUsMTk3LjkyMyAyNSwxNzQuNUMgMTQuNDAzNywxMzYuODkgMjIuMDcwNCwxMDMuNTU3IDQ4LDc0LjVDIDc4Ljc4OTcsNDQuMDExNSAxMTUuMjksMjMuMTc4MSAxNTcuNSwxMkMgMTgwLjk3LDUuODY3NDggMjA0LjYzNiwxLjcwMDgyIDIyOC41LC0wLjUgWiIvPjwvZz4KPGc+PHBhdGggc3R5bGU9Im9wYWNpdHk6MSIgZmlsbD0iI2Q3N2Q0MSIgZD0iTSAyNDIuNSwtMC41IEMgMjU1LjgzMywtMC41IDI2OS4xNjcsLTAuNSAyODIuNSwtMC41QyAzMzMuOTk4LDIuOTQzMTQgMzgxLjk5OCwxNy43NzY1IDQyNi41LDQ0QyA0NTEuMjU2LDU5LjA4ODMgNDcwLjA5LDc5LjU4ODMgNDgzLDEwNS41QyA0OTcuNjY2LDE0NS41MDEgNDkwLjk5OSwxODEuNTAxIDQ2MywyMTMuNUMgNDU2LjMwMywyMjAuNTMyIDQ0OS4zMDMsMjI3LjE5OCA0NDIsMjMzLjVDIDQ0MS45NzksMzExLjE5MyA0NDEuMzEzLDM4OC44NiA0NDAsNDY2LjVDIDQzMy41NDMsNDkwLjQ1OCA0MTguMzc2LDUwNS40NTggMzk0LjUsNTExLjVDIDMwMS44MzMsNTExLjUgMjA5LjE2Nyw1MTEuNSAxMTYuNSw1MTEuNUMgOTIuNjIzOSw1MDUuNDU4IDc3LjQ1NzIsNDkwLjQ1OCA3MSw0NjYuNUMgNjkuNjM4NCw0NTIuODc0IDY5LjEzODQsNDM5LjIwOCA2OS41LDQyNS41QyA3Mi42OTY0LDQ1NS4wMjkgODguNjk2NCw0NzMuMzYyIDExNy41LDQ4MC41QyAyMDguMTM5LDQ4MS42NTkgMjk4LjgwNSw0ODEuODI2IDM4OS41LDQ4MUMgNDAxLjUxMiw0NzcuNjUyIDQwOC42NzksNDY5LjgxOSA0MTEsNDU3LjVDIDQxMS4zMzMsMzc5LjUgNDExLjY2NywzMDEuNSA0MTIsMjIzLjVDIDQxMi43MjUsMjIxLjA1MSA0MTMuNzI1LDIxOC43MTcgNDE1LDIxNi41QyA0MjQuMjY3LDIwOS4yMzYgNDMyLjkzNCwyMDEuMjM2IDQ0MSwxOTIuNUMgNDU3Ljc3MSwxNzMuNDE2IDQ2My42MDUsMTUxLjQxNiA0NTguNSwxMjYuNUMgNDU3LjQ1MywxMTguMDY2IDQ1NC45NTMsMTEwLjA2NiA0NTEsMTAyLjVDIDQzNS40NDksNzQuNjE1MiA0MTMuNjE1LDUzLjExNTIgMzg1LjUsMzhDIDM0MC41MDEsMTQuNjY5NyAyOTIuODM1LDEuODM2MzggMjQyLjUsLTAuNSBaIi8+PC9nPgo8Zz48cGF0aCBzdHlsZT0ib3BhY2l0eToxIiBmaWxsPSIjZmNkOGIzIiBkPSJNIDIzNC41LDMwLjUgQyAyNDguOTk0LDI5LjMzOTEgMjYzLjY2MSwyOS4xNzI0IDI3OC41LDMwQyAzMjQuNTYsMzIuNTk0NyAzNjcuNTYsNDUuMjYxMyA0MDcuNSw2OEMgNDMxLjM4LDgxLjY1NDEgNDQ4LjM4LDEwMS4xNTQgNDU4LjUsMTI2LjVDIDQ2My42MDUsMTUxLjQxNiA0NTcuNzcxLDE3My40MTYgNDQxLDE5Mi41QyA0MzIuOTM0LDIwMS4yMzYgNDI0LjI2NywyMDkuMjM2IDQxNSwyMTYuNUMgNDEzLjcyNSwyMTguNzE3IDQxMi43MjUsMjIxLjA1MSA0MTIsMjIzLjVDIDQxMS42NjcsMzAxLjUgNDExLjMzMywzNzkuNSA0MTEsNDU3LjVDIDQwOC42NzksNDY5LjgxOSA0MDEuNTEyLDQ3Ny42NTIgMzg5LjUsNDgxQyAyOTguODA1LDQ4MS44MjYgMjA4LjEzOSw0ODEuNjU5IDExNy41LDQ4MC41QyAxMTAuNTIyLDQ3Ny4wMjEgMTA1LjM1NSw0NzEuNjg3IDEwMiw0NjQuNUMgMTAwLjU2OSw0NTMuNTc4IDEwMC4wNjksNDQyLjU3OCAxMDAuNSw0MzEuNUMgMTA0LjA4LDQ0MS41NzcgMTExLjA4LDQ0OC4wNzcgMTIxLjUsNDUxQyAyMDAuODMzLDQ1MS42NjcgMjgwLjE2Nyw0NTEuNjY3IDM1OS41LDQ1MUMgMzcwLjM2LDQ0OC4xNCAzNzcuMTkzLDQ0MS4zMDcgMzgwLDQzMC41QyAzODAuMzMzLDM2MS44MzMgMzgwLjY2NywyOTMuMTY3IDM4MSwyMjQuNUMgMzg1LjAzNSwyMTUuNzk2IDM5MS4yMDEsMjA4Ljk2MyAzOTkuNSwyMDRDIDQ0MS43MjksMTYyLjMxMyA0NDAuNzI5LDEyMS42NDYgMzk2LjUsODJDIDM2Ni43MzcsNTkuNDU4NyAzMzMuNDAzLDQ0LjQ1ODcgMjk2LjUsMzdDIDI3Ni4wNjEsMzIuNTMyIDI1NS4zOTQsMzAuMzY1NCAyMzQuNSwzMC41IFoiLz48L2c+CjxnPjxwYXRoIHN0eWxlPSJvcGFjaXR5OjEiIGZpbGw9IiNmZWU3YzciIGQ9Ik0gMjM0LjUsMzAuNSBDIDI1NS4zOTQsMzAuMzY1NCAyNzYuMDYxLDMyLjUzMiAyOTYuNSwzN0MgMzMzLjQwMyw0NC40NTg3IDM2Ni43MzcsNTkuNDU4NyAzOTYuNSw4MkMgNDQwLjcyOSwxMjEuNjQ2IDQ0MS43MjksMTYyLjMxMyAzOTkuNSwyMDRDIDM5MS4yMDEsMjA4Ljk2MyAzODUuMDM1LDIxNS43OTYgMzgxLDIyNC41QyAzODAuNjY3LDI5My4xNjcgMzgwLjMzMywzNjEuODMzIDM4MCw0MzAuNUMgMzc3LjE5Myw0NDEuMzA3IDM3MC4zNiw0NDguMTQgMzU5LjUsNDUxQyAyODAuMTY3LDQ1MS42NjcgMjAwLjgzMyw0NTEuNjY3IDEyMS41LDQ1MUMgMTExLjA4LDQ0OC4wNzcgMTA0LjA4LDQ0MS41NzcgMTAwLjUsNDMxLjVDIDEwMC42NjcsMzYyLjQ5OSAxMDAuNSwyOTMuNDk5IDEwMCwyMjQuNUMgOTkuMTkzOSwyMjEuNTU0IDk3Ljg2MDUsMjE4Ljg4OCA5NiwyMTYuNUMgODUuNDgwNSwyMDguMDY5IDc1LjgxMzgsMTk4LjczNiA2NywxODguNUMgNDUuOTE1OCwxNjAuMjYyIDQ1LjI0OTIsMTMxLjU5NSA2NSwxMDIuNUMgNzguNDQ4Niw4Ni4zNzc1IDk0LjI4Miw3My4yMTA5IDExMi41LDYzQyAxNTAuNzYzLDQzLjA3OCAxOTEuNDMsMzIuMjQ0NyAyMzQuNSwzMC41IFoiLz48L2c+CjxnPjxwYXRoIHN0eWxlPSJvcGFjaXR5OjEiIGZpbGw9IiNmMmMzOTgiIGQ9Ik0gMTUzLjUsOTguNSBDIDE1OS41MjMsOTcuMTk2NiAxNjMuMTg5LDk5LjUzIDE2NC41LDEwNS41QyAxNjIuMDkxLDExMi43MDIgMTU3LjU5MSwxMTQuMzY5IDE1MSwxMTAuNUMgMTQ4LjUyMywxMDUuNjY5IDE0OS4zNTYsMTAxLjY2OSAxNTMuNSw5OC41IFoiLz48L2c+CjxnPjxwYXRoIHN0eWxlPSJvcGFjaXR5OjEiIGZpbGw9IiNmMmM0OTgiIGQ9Ik0gMzMwLjUsMTEyLjUgQyAzMzguMjAxLDExMi4zNjIgMzQxLjM2NywxMTYuMDI5IDM0MCwxMjMuNUMgMzM0LjgzNywxMjkuMDYyIDMzMC4xNzEsMTI4LjcyOSAzMjYsMTIyLjVDIDMyNS40MzgsMTE4LjIzMiAzMjYuOTM4LDExNC44OTggMzMwLjUsMTEyLjUgWiIvPjwvZz4KPGc+PHBhdGggc3R5bGU9Im9wYWNpdHk6MSIgZmlsbD0iI2YyYzM5OCIgZD0iTSAxMjQuNSwxNDAuNSBDIDEzMC41MjMsMTM5LjE5NyAxMzQuMTg5LDE0MS41MyAxMzUuNSwxNDcuNUMgMTMzLjA5MSwxNTQuNzAyIDEyOC41OTEsMTU2LjM2OSAxMjIsMTUyLjVDIDExOS41MjMsMTQ3LjY2OSAxMjAuMzU2LDE0My42NjkgMTI0LjUsMTQwLjUgWiIvPjwvZz4KPGc+PHBhdGggc3R5bGU9Im9wYWNpdHk6MSIgZmlsbD0iI2YyYzQ5OSIgZD0iTSAzNzQuNSwxNDIuNSBDIDM4NC4xMSwxNDIuOTM2IDM4Ni43NzYsMTQ3LjQzNiAzODIuNSwxNTZDIDM3NC40NjMsMTU5LjYwMSAzNzAuMjk2LDE1Ny4xMDEgMzcwLDE0OC41QyAzNzEuMzMyLDE0Ni4zNCAzNzIuODMyLDE0NC4zNCAzNzQuNSwxNDIuNSBaIi8+PC9nPgo8Zz48cGF0aCBzdHlsZT0ib3BhY2l0eToxIiBmaWxsPSIjZjJjNDk4IiBkPSJNIDIwNy41LDE2MS41IEMgMjE1LjE2MSwxNjAuNjYzIDIxOC42NjEsMTYzLjk5NiAyMTgsMTcxLjVDIDIxNC4yOTUsMTc1Ljk4MiAyMDkuOTYyLDE3Ni42NDkgMjA1LDE3My41QyAyMDIuNTIzLDE2OC42NjkgMjAzLjM1NiwxNjQuNjY5IDIwNy41LDE2MS41IFoiLz48L2c+CjxnPjxwYXRoIHN0eWxlPSJvcGFjaXR5OjEiIGZpbGw9IiNmMmMzOTciIGQ9Ik0gMzUyLjUsMjE5LjUgQyAzNjEuNjEsMjE5Ljc3MiAzNjQuNDQzLDIyNC4xMDUgMzYxLDIzMi41QyAyOTQuMTY3LDI5OS4zMzMgMjI3LjMzMywzNjYuMTY3IDE2MC41LDQzM0MgMTUxLjg3Niw0MzUuNzEzIDE0OC4wNDMsNDMyLjU0NiAxNDksNDIzLjVDIDIxNy4wMzUsMzU1LjYzMiAyODQuODY4LDI4Ny42MzIgMzUyLjUsMjE5LjUgWiIvPjwvZz4KPGc+PHBhdGggc3R5bGU9Im9wYWNpdHk6MSIgZmlsbD0iI2YyYzQ5OCIgZD0iTSAyOTYuNSwyMjEuNSBDIDMwNi4wOTgsMjIyLjM2MiAzMDguNTk4LDIyNy4wMjkgMzA0LDIzNS41QyAyNTcuMTY3LDI4Mi4zMzMgMjEwLjMzMywzMjkuMTY3IDE2My41LDM3NkMgMTU2Ljg2MSwzODAuMTc3IDE1Mi41MjcsMzc4LjUxMSAxNTAuNSwzNzFDIDE1MC41NDIsMzY5LjAzMyAxNTEuMDQyLDM2Ny4xOTkgMTUyLDM2NS41QyAyMDAuMDYyLDMxNy4yNzIgMjQ4LjIyOCwyNjkuMjcyIDI5Ni41LDIyMS41IFoiLz48L2c+CjxnPjxwYXRoIHN0eWxlPSJvcGFjaXR5OjEiIGZpbGw9IiNmMmMzOTciIGQ9Ik0gMjMxLjUsMjI5LjUgQyAyNDEuMjQ1LDIyOC40MDUgMjQ0LjQxMSwyMzIuNDA1IDI0MSwyNDEuNUMgMjE3LjE2NywyNjUuMzMzIDE5My4zMzMsMjg5LjE2NyAxNjkuNSwzMTNDIDE2MC44OTQsMzE1LjczMiAxNTcuMDYxLDMxMi41NjYgMTU4LDMwMy41QyAxODIuNzAyLDI3OC45NjUgMjA3LjIwMiwyNTQuMjk5IDIzMS41LDIyOS41IFoiLz48L2c+CjxnPjxwYXRoIHN0eWxlPSJvcGFjaXR5OjEiIGZpbGw9IiNmMmMzOTciIGQ9Ik0gMzQ5LjUsMjc2LjUgQyAzNTkuMTQ4LDI3NS40OCAzNjIuMzE1LDI3OS40OCAzNTksMjg4LjVDIDMxMS41LDMzNiAyNjQsMzgzLjUgMjE2LjUsNDMxQyAyMDcuOTI4LDQzMy43NjkgMjA0LjA5NCw0MzAuNjAyIDIwNSw0MjEuNUMgMjUzLjM2OCwzNzMuMjk5IDMwMS41MzUsMzI0Ljk2NSAzNDkuNSwyNzYuNSBaIi8+PC9nPgo8Zz48cGF0aCBzdHlsZT0ib3BhY2l0eToxIiBmaWxsPSIjZjJjNDk4IiBkPSJNIDM0My41LDMzOS41IEMgMzUzLjYxNSwzNDAuMTExIDM1Ni4xMTUsMzQ0Ljc3OCAzNTEsMzUzLjVDIDMyNy44MzMsMzc2LjY2NyAzMDQuNjY3LDM5OS44MzMgMjgxLjUsNDIzQyAyNzYuNzQsNDI2Ljc3NyAyNzIuNTczLDQyNi4yNzcgMjY5LDQyMS41QyAyNjguMjEsNDE4LjM2NiAyNjguNTQzLDQxNS4zNjYgMjcwLDQxMi41QyAyOTQuMzk1LDM4Ny45MzggMzE4Ljg5NSwzNjMuNjA1IDM0My41LDMzOS41IFoiLz48L2c+Cjwvc3ZnPgo="

    class ToastNotifsExt {
        getInfo() {
            return {
                id: 'toastnotifs',
                name: 'Toast Notifications',
                menuIconURI: ico,
                blockIconURI: ico,
                color1: '#905c1b',
                blocks: [
                    {
                        opcode: 'showToast',
                        text: 'Show Toast with text [TEXT] with image [IMAGE] image rounded? [ROUNDED]',
                        blockType: Scratch.BlockType.COMMAND,
                        arguments: {
                            TEXT: {
                                type: Scratch.ArgumentType.STRING,
                                defaultValue: 'Toast!'
                            },
                            IMAGE: {
                                type: Scratch.ArgumentType.STRING,
                                defaultValue: 'https://penguinmod.com/navicon.png'
                            },
                            ROUNDED: {
                                type: Scratch.ArgumentType.STRING,
                                menu: 'imgRounded',
                                defaultValue: 'no'
                            }
                        }
                    },
                    {
                        opcode: 'showNotificationToast',
                        text: 'Show Notification Toast with text [TEXT] at position [POSITION] and type [TYPE] size [SIZE] custom css? [STYLES]',
                        blockType: Scratch.BlockType.COMMAND,
                        arguments: {
                            TEXT: {
                                type: Scratch.ArgumentType.STRING,
                                defaultValue: 'Hello, World!'
                            },
                            POSITION: {
                                type: Scratch.ArgumentType.STRING,
                                menu: 'position',
                                defaultValue: 'up'
                            },
                            TYPE: {
                                type: Scratch.ArgumentType.STRING,
                                menu: 'type',
                                defaultValue: 'info'
                            },
                            SIZE: {
                                type: Scratch.ArgumentType.NUMBER,
                                defaultValue: 16
                            },
                            STYLES: {
                                type: Scratch.ArgumentType.STRING,
                                defaultValue: ''
                            }
                        }
                    }
                ],
                menus: {
                    position: ['up', 'middle', 'down'],
                    type: ['info', 'success', 'warning', 'error'],
                    imgRounded: ['yes', 'no']
                }
            };
        }

        showNotificationToast(args) {
            var text = args.TEXT;
            var position = args.POSITION;
            var type = args.TYPE;
            var size = args.SIZE;
            var styles = args.STYLES;

            var existingStyle = document.getElementById('notificationToastStyle');
            if (existingStyle) {
                existingStyle.remove();
            }

            var notificationToastStyle = document.createElement('style');
            notificationToastStyle.id = 'notificationToastStyle';
            notificationToastStyle.textContent = `
                .notification-toast {
                    position: fixed;
                    z-index: 9999;
                    right: 10px;
                    padding: 10px 20px;
                    border-radius: 5px;
                    font-family: Arial, sans-serif;
                    font-size: ${size}px;
                    background-color: rgba(0, 0, 0, 0.8);
                    ${styles}
                    animation: slideIn 0.5s ease-in-out;
                }
                .notification-toast.up {
                    top: 10px;
                }
                .notification-toast.middle {
                    top: 50%;
                    transform: translateY(-50%);
                }
                .notification-toast.down {
                    bottom: 10px;
                }
                .notification-toast.info {
                    color: #2196F3;
                }
                .notification-toast.success {
                    color: #4CAF50;
                }
                .notification-toast.warning {
                    color: #FFEB3B;
                }
                .notification-toast.error {
                    color: #F44336;
                }
                .notification-toast .line {
                    border-top: 3px solid;
                    margin-bottom: 5px;
                }
                .notification-toast .close-button {
                    position: absolute;
                    top: 5px;
                    right: 5px;
                    cursor: pointer;
                }
                .notification-toast .close-button:hover {
                    color: #fff;
                }
                @keyframes slideIn {
                    from {
                        right: -300px;
                    }
                    to {
                        right: 10px;
                    }
                }
                @keyframes fadeOut {
                    from {
                        opacity: 1;
                    }
                    to {
                        opacity: 0;
                    }
                }
            `;
            document.head.appendChild(notificationToastStyle);

            var notificationToast = document.createElement('div');
            notificationToast.className = `notification-toast ${position} ${type}`;
            notificationToast.innerHTML = `<span class="close-button">×</span><div class="line ${type}"></div>${text}`;
            document.body.appendChild(notificationToast);

            var closeButton = notificationToast.querySelector('.close-button');
            closeButton.addEventListener('click', function() {
                notificationToast.classList.add('fade-out');
                setTimeout(function() {
                    notificationToast.remove();
                    notificationToastStyle.remove();
                }, 500);
            });

            setTimeout(function() {
                notificationToast.classList.add('fade-out');
                setTimeout(function() {
                    notificationToast.remove();
                    notificationToastStyle.remove();
                }, 500);
            }, 5000);
        }

        showToast(args) {
            let round
            var text = args.TEXT;
            var image = args.IMAGE
            var isRounded = args.ROUNDED
            var existingStyle = document.getElementById('toastStyle');
            if (existingStyle) {
                existingStyle.remove();
            }

            if (isRounded === "yes") {
                round = "border-radius: 50%;"
            }

            var toastStyle = document.createElement('style');
            toastStyle.id = 'toastStyle';
            toastStyle.textContent = `
                #toast {
                    position: fixed;
                    z-index: 9999;
                    top: -100px;
                    left: 50%;
                    transform: translateX(-50%);
                    background-color: #333;
                    color: #fff;
                    padding: 20px;
                    border-radius: 10px;
                    font-family: Arial, sans-serif;
                    font-size: 18px;
                    display: flex;
                    align-items: center;
                    transition: top 0.5s ease;
                }
                #toast img {
                    width: 64px;
                    height: 64px;
                    margin-right: 10px;
                    ${round}
                }
                #toast .points {
                    margin-left: 10px;
                }
            `;
            document.head.appendChild(toastStyle);

            var toast = document.createElement('div');
            toast.id = 'toast';

            if (image) {
                var img = document.createElement('img');
                img.src = image;
                img.width = 64;
                img.height = 64;
                toast.appendChild(img);
            }

            var content = document.createElement('div');
            content.style.display = 'flex';
            content.style.alignItems = 'center';
            content.textContent = text;
            toast.appendChild(content);

            document.body.appendChild(toast);

            setTimeout(function() {
                toast.style.top = '0';
            }, 100);

            setTimeout(function() {
                toast.style.top = '-100px';
                setTimeout(function() {
                    toast.remove();
                    toastStyle.remove();
                }, 500);
            }, 2000);
        }
    }

    Scratch.extensions.register(new ToastNotifsExt());
})(Scratch);
","data:application/x-javascript;base64,// Name: Particle Tools
// ID: ParticleToolsSP
// Description: Tools for making particle engines easier.
// By: SharkPool

// Version V.1.2.0

(function (Scratch) {
  "use strict";
  if (!Scratch.extensions.unsandboxed) throw new Error("Particle Tools must run unsandboxed");

  const vm = Scratch.vm;
  const runtime = vm.runtime;

  const menuIconURI =
"data:image/svg+xml;base64,PHN2ZyB2ZXJzaW9uPSIxLjEiIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIgeG1sbnM6eGxpbms9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsiIHdpZHRoPSIxNDQuMjkzODgiIGhlaWdodD0iMTQ0LjI5Mzg4IiB2aWV3Qm94PSIwLDAsMTQ0LjI5Mzg4LDE0NC4yOTM4OCI+PGRlZnM+PGxpbmVhckdyYWRpZW50IHgxPSIyMzcuNDQwOTUiIHkxPSIxNDEuMzYxOSIgeDI9IjIzNy40NDA5NSIgeTI9IjE3Ny4xNDUzMiIgZ3JhZGllbnRVbml0cz0idXNlclNwYWNlT25Vc2UiIGlkPSJjb2xvci0xIj48c3RvcCBvZmZzZXQ9IjAiIHN0b3AtY29sb3I9IiNmZmZmZmYiLz48c3RvcCBvZmZzZXQ9IjEiIHN0b3AtY29sb3I9IiMwMDkwZmYiLz48L2xpbmVhckdyYWRpZW50PjxsaW5lYXJHcmFkaWVudCB4MT0iMjQyLjU1OTA2IiB5MT0iMTgzLjQxNzEzIiB4Mj0iMjQyLjU1OTA2IiB5Mj0iMjE4LjYzODEiIGdyYWRpZW50VW5pdHM9InVzZXJTcGFjZU9uVXNlIiBpZD0iY29sb3ItMiI+PHN0b3Agb2Zmc2V0PSIwIiBzdG9wLWNvbG9yPSIjMDA5MGZmIi8+PHN0b3Agb2Zmc2V0PSIxIiBzdG9wLWNvbG9yPSIjZmZmZmZmIi8+PC9saW5lYXJHcmFkaWVudD48bGluZWFyR3JhZGllbnQgeDE9IjIwMS4zNjE5MSIgeTE9IjE4Mi41NTkwNiIgeDI9IjIzNS4xNzY3NiIgeTI9IjE4Mi41NTkwNiIgZ3JhZGllbnRVbml0cz0idXNlclNwYWNlT25Vc2UiIGlkPSJjb2xvci0zIj48c3RvcCBvZmZzZXQ9IjAiIHN0b3AtY29sb3I9IiNmZmZmZmYiLz48c3RvcCBvZmZzZXQ9IjEiIHN0b3AtY29sb3I9IiMwMDkwZmYiLz48L2xpbmVhckdyYWRpZW50PjxsaW5lYXJHcmFkaWVudCB4MT0iMjQ1LjM4NTY5IiB5MT0iMTc3LjQ0MDk1IiB4Mj0iMjc4LjYzODEiIHkyPSIxNzcuNDQwOTUiIGdyYWRpZW50VW5pdHM9InVzZXJTcGFjZU9uVXNlIiBpZD0iY29sb3ItNCI+PHN0b3Agb2Zmc2V0PSIwIiBzdG9wLWNvbG9yPSIjMDA5MGZmIi8+PHN0b3Agb2Zmc2V0PSIxIiBzdG9wLWNvbG9yPSIjZmZmZmZmIi8+PC9saW5lYXJHcmFkaWVudD48bGluZWFyR3JhZGllbnQgeDE9IjI1MC41NTQzIiB5MT0iMTU3LjcxNTAzIiB4Mj0iMjY5LjY5MjU0IiB5Mj0iMTYxLjQyMjAzIiBncmFkaWVudFVuaXRzPSJ1c2VyU3BhY2VPblVzZSIgaWQ9ImNvbG9yLTUiPjxzdG9wIG9mZnNldD0iMCIgc3RvcC1jb2xvcj0iIzAwOTBmZiIvPjxzdG9wIG9mZnNldD0iMSIgc3RvcC1jb2xvcj0iI2ZmZmZmZiIvPjwvbGluZWFyR3JhZGllbnQ+PGxpbmVhckdyYWRpZW50IHgxPSIyMTAuMzA3NDYiIHkxPSIxOTguNTc3OTgiIHgyPSIyMjkuNDQ1NzEiIHkyPSIyMDIuMjg0OTciIGdyYWRpZW50VW5pdHM9InVzZXJTcGFjZU9uVXNlIiBpZD0iY29sb3ItNiI+PHN0b3Agb2Zmc2V0PSIwIiBzdG9wLWNvbG9yPSIjZmZmZmZmIi8+PHN0b3Agb2Zmc2V0PSIxIiBzdG9wLWNvbG9yPSIjMDA5MGZmIi8+PC9saW5lYXJHcmFkaWVudD48bGluZWFyR3JhZGllbnQgeDE9IjIwNS42MTg3NSIgeTE9IjE1OS4yNTA5NiIgeDI9IjIzMi41MTU1OCIgeTI9IjE2My41ODI5MiIgZ3JhZGllbnRVbml0cz0idXNlclNwYWNlT25Vc2UiIGlkPSJjb2xvci03Ij48c3RvcCBvZmZzZXQ9IjAiIHN0b3AtY29sb3I9IiNmZmZmZmYiLz48c3RvcCBvZmZzZXQ9IjEiIHN0b3AtY29sb3I9IiMwMDkwZmYiLz48L2xpbmVhckdyYWRpZW50PjxsaW5lYXJHcmFkaWVudCB4MT0iMjQ4LjM0MjE1IiB5MT0iMTk2LjkyMTMyIiB4Mj0iMjc0LjQ2ODc2IiB5Mj0iMjAxLjEyOTIzIiBncmFkaWVudFVuaXRzPSJ1c2VyU3BhY2VPblVzZSIgaWQ9ImNvbG9yLTgiPjxzdG9wIG9mZnNldD0iMCIgc3RvcC1jb2xvcj0iIzAwOTBmZiIvPjxzdG9wIG9mZnNldD0iMSIgc3RvcC1jb2xvcj0iI2ZmZmZmZiIvPjwvbGluZWFyR3JhZGllbnQ+PC9kZWZzPjxnIHRyYW5zZm9ybT0idHJhbnNsYXRlKC0xNjcuODUzMDYsLTEwNy44NTMwNikiPjxnIGRhdGEtcGFwZXItZGF0YT0ieyZxdW90O2lzUGFpbnRpbmdMYXllciZxdW90Ozp0cnVlfSIgZmlsbC1ydWxlPSJub256ZXJvIiBzdHJva2UtbGluZWNhcD0iYnV0dCIgc3Ryb2tlLWxpbmVqb2luPSJtaXRlciIgc3Ryb2tlLW1pdGVybGltaXQ9IjEwIiBzdHJva2UtZGFzaGFycmF5PSIiIHN0cm9rZS1kYXNob2Zmc2V0PSIwIiBzdHlsZT0ibWl4LWJsZW5kLW1vZGU6IG5vcm1hbCI+PHBhdGggZD0iTTE2Ny44NTMwNiwxODBjMCwtMzkuODQ1NjYgMzIuMzAxMjgsLTcyLjE0Njk0IDcyLjE0Njk0LC03Mi4xNDY5NGMzOS44NDU2NSwwIDcyLjE0Njk0LDMyLjMwMTI4IDcyLjE0Njk0LDcyLjE0Njk0YzAsMzkuODQ1NjYgLTMyLjMwMTI4LDcyLjE0Njk0IC03Mi4xNDY5NCw3Mi4xNDY5NGMtMzkuODQ1NjYsMCAtNzIuMTQ2OTQsLTMyLjMwMTI4IC03Mi4xNDY5NCwtNzIuMTQ2OTR6IiBkYXRhLXBhcGVyLWRhdGE9InsmcXVvdDtpbmRleCZxdW90OzpudWxsfSIgZmlsbD0iIzAwOTBmZiIgc3Ryb2tlPSJub25lIiBzdHJva2Utd2lkdGg9IjAiLz48cGF0aCBkPSJNMjM0LjE1ODQ5LDE0MS4zNjE5aDkuMzU4MDVjMCwwIC01LjA5MjkzLDkuODg1MTUgLTYuMTA0MDIsMTkuMTE4NzJjLTEuMTI2NTgsMTAuMjg4MzIgMi4wNzY5MywxNi42NjQ3IDEuNjMyNDQsMTYuNjY0N2MtMC44MTU5LDAgLTYuNTUxNTIsLTYuMzg5OTcgLTcuNTM3NzEsLTE2LjY4Mzk5Yy0wLjg4MzkyLC05LjIyNjQ3IDIuNjUxMjUsLTE5LjA5OTQzIDIuNjUxMjUsLTE5LjA5OTQzeiIgZGF0YS1wYXBlci1kYXRhPSJ7JnF1b3Q7aW5kZXgmcXVvdDs6bnVsbH0iIGZpbGw9InVybCgjY29sb3ItMSkiIHN0cm9rZT0iI2ZmZmZmZiIgc3Ryb2tlLXdpZHRoPSIwIi8+PHBhdGggZD0iTTI0NS44NDE1MiwyMTguNjM4MWgtOS4zNTgwNGMwLDAgNS4wOTI5NCwtOS44ODUxNSA2LjEwNDAzLC0xOS4xMTg3MmMxLjEyNjU4LC0xMC4yODgzMiAtMS4yMzMyNywtMTYuMTAyMjYgLTAuNzg4NzksLTE2LjEwMjI2YzAuODE1OSwwIDUuNzA3ODcsNS44Mjc1NCA2LjY5NDA2LDE2LjEyMTU0YzAuODgzOTIsOS4yMjY0NyAtMi42NTEyNiwxOS4wOTk0MyAtMi42NTEyNiwxOS4wOTk0M3oiIGRhdGEtcGFwZXItZGF0YT0ieyZxdW90O2luZGV4JnF1b3Q7Om51bGx9IiBmaWxsPSJ1cmwoI2NvbG9yLTIpIiBzdHJva2U9IiNmZmZmZmYiIHN0cm9rZS13aWR0aD0iMCIvPjxwYXRoIGQ9Ik0yMDEuMzYxOTEsMTg1Ljg0MTUydi05LjM1ODA0YzAsMCA5Ljg4NTE1LDUuMDkyOTQgMTkuMTE4NzEsNi4xMDQwM2MxMC4yODgzMiwxLjEyNjU4IDE0LjY5NjE0LC0wLjk1MjA0IDE0LjY5NjE0LC0wLjUwNzU1YzAsMC44MTU5IC00LjQyMTQxLDUuNDI2NjQgLTE0LjcxNTQzLDYuNDEyODNjLTkuMjI2NDcsMC44ODM5MiAtMTkuMDk5NDIsLTIuNjUxMjUgLTE5LjA5OTQyLC0yLjY1MTI1eiIgZGF0YS1wYXBlci1kYXRhPSJ7JnF1b3Q7aW5kZXgmcXVvdDs6bnVsbH0iIGZpbGw9InVybCgjY29sb3ItMykiIHN0cm9rZT0iI2ZmZmZmZiIgc3Ryb2tlLXdpZHRoPSIwIi8+PHBhdGggZD0iTTI3OC42MzgxLDE3NC4xNTg0OXY5LjM1ODA1YzAsMCAtOS44ODUxNSwtNS4wOTI5MyAtMTkuMTE4NzIsLTYuMTA0MDJjLTEwLjI4ODMyLC0xLjEyNjU4IC0xNC4xMzM2OSwwLjY3MDgyIC0xNC4xMzM2OSwwLjIyNjMzYzAsLTAuODE1OSAzLjg1ODk3LC01LjE0NTQxIDE0LjE1Mjk4LC02LjEzMTZjOS4yMjY0NywtMC44ODM5MiAxOS4wOTk0MiwyLjY1MTI1IDE5LjA5OTQyLDIuNjUxMjV6IiBkYXRhLXBhcGVyLWRhdGE9InsmcXVvdDtpbmRleCZxdW90OzpudWxsfSIgZmlsbD0idXJsKCNjb2xvci00KSIgc3Ryb2tlPSIjZmZmZmZmIiBzdHJva2Utd2lkdGg9IjAiLz48cGF0aCBkPSJNMjY2LjQ5MzQzLDE0Ny40NzA4M2w0Ljk0MjM2LDQuOTUxMjdjMCwwIC03LjkxOTk0LDIuNTI2MTIgLTEzLjMzOTM1LDYuODY3NzdjLTYuMDM4NDcsNC44Mzc2MiAtOS42NTQzLDExLjUzMzcyIC05Ljg4OTA1LDExLjI5ODU1Yy0wLjQzMDksLTAuNDMxNjggMS44NTQ4LC04LjQ3NDY5IDYuNzgwNDQsLTE0LjQzMzE3YzQuNDE0ODMsLTUuMzQwNTUgMTEuNTA1NiwtOC42ODQ0MyAxMS41MDU2LC04LjY4NDQzeiIgZGF0YS1wYXBlci1kYXRhPSJ7JnF1b3Q7aW5kZXgmcXVvdDs6bnVsbH0iIGZpbGw9InVybCgjY29sb3ItNSkiIHN0cm9rZT0iI2ZmZmZmZiIgc3Ryb2tlLXdpZHRoPSIwIi8+PHBhdGggZD0iTTIxMy41MDY1NywyMTIuNTI5MThsLTQuOTQyMzcsLTQuOTUxMjdjMCwwIDcuOTE5OTQsLTIuNTI2MTIgMTMuMzM5MzUsLTYuODY3NzdjNi4wMzg0NywtNC44Mzc2MiA5LjY1NDMsLTExLjUzMzcyIDkuODg5MDUsLTExLjI5ODU0YzAuNDMwOSwwLjQzMTY4IC0xLjg1NDgsOC40NzQ2OSAtNi43ODA0NCwxNC40MzMxNmMtNC40MTQ4Myw1LjM0MDU1IC0xMS41MDU1OSw4LjY4NDQzIC0xMS41MDU1OSw4LjY4NDQzeiIgZGF0YS1wYXBlci1kYXRhPSJ7JnF1b3Q7aW5kZXgmcXVvdDs6bnVsbH0iIGZpbGw9InVybCgjY29sb3ItNikiIHN0cm9rZT0iI2ZmZmZmZiIgc3Ryb2tlLXdpZHRoPSIwIi8+PHBhdGggZD0iTTIwNi4yMTQzLDE1NS41NTMyM2w0LjgxOTE0LC01LjM1MjIxYzAsMCAzLjAzMDk2LDguMDAzNDEgNy43OTEzLDEzLjMzNjczYzUuMzA0MTEsNS45NDI1MyAxMi4zODYwMSw5LjI5MjY5IDEyLjE1NzExLDkuNTQ2OTJjLTAuNDIwMTcsMC40NjY2MyAtOC44MTM3OSwtMS40NDIzMSAtMTUuMjA5MTgsLTYuMTc5MzljLTUuNzMyMTUsLTQuMjQ1ODQgLTkuNTU4MzUsLTExLjM1MjAzIC05LjU1ODM1LC0xMS4zNTIwM3oiIGRhdGEtcGFwZXItZGF0YT0ieyZxdW90O2luZGV4JnF1b3Q7Om51bGx9IiBmaWxsPSJ1cmwoI2NvbG9yLTcpIiBzdHJva2U9IiNmZmZmZmYiIHN0cm9rZS13aWR0aD0iMCIvPjxwYXRoIGQ9Ik0yNzMuODkwMjcsMjA0LjcyMTA4bC00LjY4MTE0LDUuMTk4OTRjMCwwIC0yLjk0NDE2LC03Ljc3NDIzIC03LjU2ODE4LC0xMi45NTQ4MWMtNS4xNTIyMiwtNS43NzIzNyAtMTIuMDMxMzIsLTkuMDI2NTkgLTExLjgwODk4LC05LjI3MzU0YzAuNDA4MTMsLTAuNDUzMjcgOC41NjE0MSwxLjQwMTAxIDE0Ljc3MzY2LDYuMDAyNDZjNS41NjgwMSw0LjEyNDI2IDkuMjg0NjQsMTEuMDI2OTUgOS4yODQ2NCwxMS4wMjY5NXoiIGRhdGEtcGFwZXItZGF0YT0ieyZxdW90O2luZGV4JnF1b3Q7Om51bGx9IiBmaWxsPSJ1cmwoI2NvbG9yLTgpIiBzdHJva2U9IiNmZmZmZmYiIHN0cm9rZS13aWR0aD0iMCIvPjxwYXRoIGQ9Ik0yMzEuODUyNjEsMTQwLjk3NDA1YzAsLTQuNjM0MjMgMy43NTY3OCwtOC4zOTEwMiA4LjM5MTAxLC04LjM5MTAyYzQuNjM0MjMsMCA4LjM5MTAyLDMuNzU2NzkgOC4zOTEwMiw4LjM5MTAyYzAsNC42MzQyMyAtMy43NTY3OSw4LjM5MTAxIC04LjM5MTAyLDguMzkxMDFjLTQuNjM0MjMsMCAtOC4zOTEwMSwtMy43NTY3OCAtOC4zOTEwMSwtOC4zOTEwMXoiIGRhdGEtcGFwZXItZGF0YT0ieyZxdW90O2luZGV4JnF1b3Q7Om51bGx9IiBmaWxsPSIjZmZmZmZmIiBzdHJva2U9IiNmZmZmZmYiIHN0cm9rZS13aWR0aD0iMS41Ii8+PHBhdGggZD0iTTI0OC4xNDc0LDIxOS4wMjU5NmMwLDQuNjM0MjMgLTMuNzU2NzksOC4zOTEwMSAtOC4zOTEwMiw4LjM5MTAxYy00LjYzNDIzLDAgLTguMzkxMDEsLTMuNzU2NzggLTguMzkxMDEsLTguMzkxMDFjMCwtNC42MzQyMyAzLjc1Njc4LC04LjM5MTAyIDguMzkxMDEsLTguMzkxMDJjNC42MzQyMywwIDguMzkxMDIsMy43NTY3OSA4LjM5MTAyLDguMzkxMDJ6IiBkYXRhLXBhcGVyLWRhdGE9InsmcXVvdDtpbmRleCZxdW90OzpudWxsfSIgZmlsbD0iI2ZmZmZmZiIgc3Ryb2tlPSIjZmZmZmZmIiBzdHJva2Utd2lkdGg9IjEuNSIvPjxwYXRoIGQ9Ik0yMDAuOTc0MDUsMTg4LjE0NzRjLTQuNjM0MjMsMCAtOC4zOTEwMiwtMy43NTY3OSAtOC4zOTEwMiwtOC4zOTEwMmMwLC00LjYzNDIzIDMuNzU2NzksLTguMzkxMDEgOC4zOTEwMiwtOC4zOTEwMWM0LjYzNDIzLDAgOC4zOTEwMSwzLjc1Njc4IDguMzkxMDEsOC4zOTEwMWMwLDQuNjM0MjMgLTMuNzU2NzgsOC4zOTEwMiAtOC4zOTEwMSw4LjM5MTAyeiIgZGF0YS1wYXBlci1kYXRhPSJ7JnF1b3Q7aW5kZXgmcXVvdDs6bnVsbH0iIGZpbGw9IiNmZmZmZmYiIHN0cm9rZT0iI2ZmZmZmZiIgc3Ryb2tlLXdpZHRoPSIxLjUiLz48cGF0aCBkPSJNMjc5LjAyNTk2LDE3MS44NTI2MWM0LjYzNDIzLDAgOC4zOTEwMSwzLjc1Njc4IDguMzkxMDEsOC4zOTEwMWMwLDQuNjM0MjMgLTMuNzU2NzksOC4zOTEwMiAtOC4zOTEwMSw4LjM5MTAyYy00LjYzNDIzLDAgLTguMzkxMDIsLTMuNzU2NzkgLTguMzkxMDIsLTguMzkxMDJjMCwtNC42MzQyMyAzLjc1NjgsLTguMzkxMDEgOC4zOTEwMiwtOC4zOTEwMXoiIGRhdGEtcGFwZXItZGF0YT0ieyZxdW90O2luZGV4JnF1b3Q7Om51bGx9IiBmaWxsPSIjZmZmZmZmIiBzdHJva2U9IiNmZmZmZmYiIHN0cm9rZS13aWR0aD0iMS41Ii8+PHBhdGggZD0iTTI2NS40ODA4LDE0Ni4wNDU5NmMyLjQ1MTk0LC0yLjQ0NzUzIDYuNDIzNzQsLTIuNDQzOTUgOC44NzEyNywwLjAwNzk5YzIuNDQ3NTIsMi40NTE5NCAyLjQ0Mzk1LDYuNDIzNzQgLTAuMDA3OTksOC44NzEyNmMtMi40NTE5NCwyLjQ0NzUzIC02LjQyMzc0LDIuNDQzOTUgLTguODcxMjYsLTAuMDA3OTljLTIuNDQ3NTIsLTIuNDUxOTQgLTIuNDQzOTYsLTYuNDIzNzQgMC4wMDc5OCwtOC44NzEyNnoiIGRhdGEtcGFwZXItZGF0YT0ieyZxdW90O2luZGV4JnF1b3Q7Om51bGx9IiBmaWxsPSIjZmZmZmZmIiBzdHJva2U9IiNmZmZmZmYiIHN0cm9rZS13aWR0aD0iMS41Ii8+PHBhdGggZD0iTTIxNC41MTkxOSwyMTMuOTU0MDRjLTIuNDUxOTQsMi40NDc1MyAtNi40MjM3NCwyLjQ0Mzk1IC04Ljg3MTI3LC0wLjAwNzk5Yy0yLjQ0NzUzLC0yLjQ1MTk0IC0yLjQ0Mzk1LC02LjQyMzc0IDAuMDA3OTksLTguODcxMjdjMi40NTE5NCwtMi40NDc1MyA2LjQyMzczLC0yLjQ0Mzk1IDguODcxMjYsMC4wMDc5OWMyLjQ0NzUzLDIuNDUxOTQgMi40NDM5Niw2LjQyMzc0IC0wLjAwNzk4LDguODcxMjZ6IiBkYXRhLXBhcGVyLWRhdGE9InsmcXVvdDtpbmRleCZxdW90OzpudWxsfSIgZmlsbD0iI2ZmZmZmZiIgc3Ryb2tlPSIjZmZmZmZmIiBzdHJva2Utd2lkdGg9IjEuNSIvPjxwYXRoIGQ9Ik0yMDQuODA1LDE1Ni42NzIzMWMtMi42NTA0OSwtMi4zODY1IC0yLjg2NDQ5LC02LjQ2OTc5IC0wLjQ3Nzk5LC05LjEyMDI4YzIuMzg2NSwtMi42NTA0OSA2LjQ2OTc5LC0yLjg2NDQ5IDkuMTIwMjcsLTAuNDc3OTljMi42NTA0OSwyLjM4NjUgMi44NjQ1LDYuNDY5NzkgMC40Nzc5OSw5LjEyMDI3Yy0yLjM4NjUsMi42NTA0OSAtNi40Njk3OSwyLjg2NDUgLTkuMTIwMjgsMC40Nzh6IiBkYXRhLXBhcGVyLWRhdGE9InsmcXVvdDtpbmRleCZxdW90OzpudWxsfSIgZmlsbD0iI2ZmZmZmZiIgc3Ryb2tlPSIjZmZmZmZmIiBzdHJva2Utd2lkdGg9IjEuNSIvPjxwYXRoIGQ9Ik0yNzUuMjU5MiwyMDMuNjM0MDRjMi41NzQ1OSwyLjMxODE2IDIuNzgyNDYsNi4yODQ1MiAwLjQ2NDMsOC44NTkxMWMtMi4zMTgxNiwyLjU3NDU5IC02LjI4NDUxLDIuNzgyNDYgLTguODU5MTEsMC40NjQzYy0yLjU3NDU5LC0yLjMxODE2IC0yLjc4MjQ2LC02LjI4NDUyIC0wLjQ2NDMsLTguODU5MWMyLjMxODE2LC0yLjU3NDU5IDYuMjg0NTIsLTIuNzgyNDcgOC44NTkxMSwtMC40NjQzeiIgZGF0YS1wYXBlci1kYXRhPSJ7JnF1b3Q7aW5kZXgmcXVvdDs6bnVsbH0iIGZpbGw9IiNmZmZmZmYiIHN0cm9rZT0iI2ZmZmZmZiIgc3Ryb2tlLXdpZHRoPSIxLjUiLz48L2c+PC9nPjwvc3ZnPg==";

  class ParticleToolsSP {
    constructor() {
      this.IDs = {};
      this.IDcount = 0;
      this.Gravity = 9.8;
    }

    getInfo() {
      return {
        id: "ParticleToolsSP",
        name: "Particle Tools",
        docsURI: "https://extensions.penguinmod.com/docs/particle-tools",
        color1: "#0090ff",
        menuIconURI,
        blocks: [
          {
            opcode: "genID",
            blockType: Scratch.BlockType.COMMAND,
            text: "generate new particle ID with velocity x [VELX] and y [VELY]",
            arguments: {
              VELX: {
                type: Scratch.ArgumentType.NUMBER,
                defaultValue: 5
              },
              VELY: {
                type: Scratch.ArgumentType.NUMBER,
                defaultValue: 8
              },
            },
          },
          {
            opcode: "replaceID",
            blockType: Scratch.BlockType.COMMAND,
            text: "replace particle ID [ID] with velocity x [VELX] and y [VELY]",
            arguments: {
              VELX: {
                type: Scratch.ArgumentType.NUMBER,
                defaultValue: 5
              },
              VELY: {
                type: Scratch.ArgumentType.NUMBER,
                defaultValue: 8
              },
              ID: {
                type: Scratch.ArgumentType.NUMBER,
                defaultValue: 1
              },
            },
          },
          { blockType: Scratch.BlockType.LABEL, text: "Operations" },
          {
            opcode: "deleteID",
            blockType: Scratch.BlockType.COMMAND,
            text: "delete all particle IDs"
          },
          {
            opcode: "deleteOneID",
            blockType: Scratch.BlockType.COMMAND,
            text: "delete particle ID [NAME]",
            arguments: {
              NAME: {
                type: Scratch.ArgumentType.NUMBER,
                defaultValue: 1
              },
            },
          },
          {
            opcode: "whenID",
            blockType: Scratch.BlockType.EVENT,
            text: "when particle ID is [TYPE]",
            isEdgeActivated: false,
            arguments: {
              TYPE: {
                type: Scratch.ArgumentType.STRING,
                menu: "EVENT"
              },
            },
          },
          "---",
          {
            opcode: "reportID",
            blockType: Scratch.BlockType.REPORTER,
            text: "particle ID [NAME] [REPORT]",
            arguments: {
              NAME: {
                type: Scratch.ArgumentType.NUMBER,
                defaultValue: 1
              },
              REPORT: {
                type: Scratch.ArgumentType.STRING,
                menu: "REPORT_TYPE"
              },
            },
          },
          {
            opcode: "existID",
            blockType: Scratch.BlockType.BOOLEAN,
            text: "particle ID [NAME] [TYPE] ?",
            arguments: {
              TYPE: {
                type: Scratch.ArgumentType.STRING,
                menu: "EXIST"
              },
              NAME: {
                type: Scratch.ArgumentType.NUMBER,
                defaultValue: 1
              }
            },
          },
          {
            opcode: "reportCnt",
            blockType: Scratch.BlockType.REPORTER,
            text: "number of particle IDs",
          },
          { blockType: Scratch.BlockType.LABEL, text: "Velocity Randomizer" },
          {
            opcode: "genVel",
            blockType: Scratch.BlockType.REPORTER,
            text: "pick random [MIN] to [MAX] precision [TorF]",
            arguments: {
              MIN: {
                type: Scratch.ArgumentType.NUMBER,
                defaultValue: -5
              },
              MAX: {
                type: Scratch.ArgumentType.NUMBER,
                defaultValue: 5
              },
              TorF: {
                type: Scratch.ArgumentType.STRING,
                menu: "PRECISION"
              },
            },
          },
          { blockType: Scratch.BlockType.LABEL, text: "Gravity Force" },
          {
            opcode: "setGravity",
            blockType: Scratch.BlockType.COMMAND,
            text: "set gravity to [GRAVITY]",
            arguments: {
              GRAVITY: {
                type: Scratch.ArgumentType.NUMBER,
                defaultValue: 9.8
              },
            },
          },
          {
            opcode: "currentGrav",
            blockType: Scratch.BlockType.REPORTER,
            text: "current gravity"
          },
          {
            opcode: "updateGravity",
            blockType: Scratch.BlockType.COMMAND,
            text: "update [REPORT] with gravity for particle ID:[ID]",
            arguments: {
              ID: {
                type: Scratch.ArgumentType.NUMBER,
                defaultValue: 1
              },
              REPORT: {
                type: Scratch.ArgumentType.STRING,
                menu: "REPORT_TYPE"
              },
            },
          },
          {
            opcode: "updateCustomGravity",
            blockType: Scratch.BlockType.COMMAND,
            text: "update [REPORT] with force [INPUT] for particle ID:[ID]",
            arguments: {
              ID: {
                type: Scratch.ArgumentType.NUMBER,
                defaultValue: 1
              },
              INPUT: {
                type: Scratch.ArgumentType.NUMBER,
                defaultValue: 1.5
              },
              REPORT: {
                type: Scratch.ArgumentType.STRING,
                menu: "REPORT_TYPE"
              },
            },
          },
        ],
        menus: {
          REPORT_TYPE: {
            acceptReporters: true,
            items: ["all", "x velocity", "y velocity"]
          },
          PRECISION: {
            acceptReporters: true,
            items: ["on", "off"]
          },
          EXIST: {
            acceptReporters: false,
            items: ["exists", "used"]
          },
          EVENT: {
            acceptReporters: false,
            items: ["added", "deleted"]
          },
        }
      };
    }

    genID(args) {
      this.IDcount++;
      this.IDs[this.IDcount] = {
        ID: this.IDcount.toString(),
        "X Velocity": args.VELX.toString(),
        "Y Velocity": args.VELY.toString(),
        active: false
      };
      runtime.startHats("ParticleToolsSP_whenID", { TYPE: "added" });
    }

    replaceID(args) {
      if (this.IDs[args.ID] === undefined) this.IDcount++;
      this.IDs[args.ID] = {
        ID: args.ID.toString(),
        "X Velocity": args.VELX.toString(),
        "Y Velocity": args.VELY.toString(),
        active: false
      };
      runtime.startHats("ParticleToolsSP_whenID", { TYPE: "added" });
    }

    reportID(args) {
      const ID = args.NAME;
      if (this.IDs[ID] === undefined) return "ID doesnt exist!";
      const Value = this.IDs[ID];
      delete Value.active;
      if (args.REPORT === "all") return JSON.stringify(Value);
      else if (args.REPORT === "x velocity") {
        this.IDs[ID].active = true;
        return Value["X Velocity"];
      } else {
        this.IDs[ID].active = true;
        return Value["Y Velocity"];
      }
    }

    updateGravity(args) {
      const ID = args.ID;
      if (this.IDs[ID] !== undefined) {
        this.IDs[ID].active = true;
        const Value = this.IDs[ID];
        const currentXVelocity = parseFloat(Value["X Velocity"]);
        const currentYVelocity = parseFloat(Value["Y Velocity"]);
        const newXVelocity = currentXVelocity - this.Gravity;
        const newYVelocity = currentYVelocity - this.Gravity;
        if (args.REPORT === "all") {
          Value["X Velocity"] = newXVelocity.toString();
          Value["Y Velocity"] = newYVelocity.toString();
        } else if (args.REPORT === "x velocity") {
          Value["X Velocity"] = newXVelocity.toString();
        } else {
          Value["Y Velocity"] = newYVelocity.toString();
        }
      }
    }

    updateCustomGravity(args) {
      const ID = args.ID;
      if (this.IDs[ID] !== undefined) {
        this.IDs[ID].active = true;
        const Value = this.IDs[ID];
        const currentXVelocity = parseFloat(Value["X Velocity"]);
        const currentYVelocity = parseFloat(Value["Y Velocity"]);
        const newXVelocity = currentXVelocity - args.INPUT;
        const newYVelocity = currentYVelocity - args.INPUT;
        if (args.REPORT === "all") {
          Value["X Velocity"] = newXVelocity.toString();
          Value["Y Velocity"] = newYVelocity.toString();
        } else if (args.REPORT === "x velocity") {
          Value["X Velocity"] = newXVelocity.toString();
        } else {
          Value["Y Velocity"] = newYVelocity.toString();
        }
      }
    }

    genVel(args) {
      if (args.TorF === "on") {
        const max = Scratch.Cast.toNumber(args.MAX);
        const min = Scratch.Cast.toNumber(args.MIN);
        return Math.round((Math.random() * (max - min + 1) + min) * 10000) /10000;
      } else {
        const max = Scratch.Cast.toNumber(args.MAX);
        const min = Scratch.Cast.toNumber(args.MIN);
        return Math.floor(Math.random() * (max - min + 1) + min);
      }
    }

    reportCnt() { return this.IDcount }

    currentGrav() { return this.Gravity }

    deleteID() {
      if (Object.keys(this.IDs).length > 0) runtime.startHats("ParticleToolsSP_whenID", { TYPE: "deleted" });
      this.IDs = {};
      this.IDcount = 0;
    }

    deleteOneID(args) {
      const ID = args.NAME;
      if (this.IDs[ID]) {
        runtime.startHats("ParticleToolsSP_whenID", { TYPE: "deleted" });
        delete this.IDs[ID];
        if (this.IDcount > 0) this.IDcount--;
      }
    }

    existID(args) {
      if (args.TYPE === "exists") return Scratch.Cast.toBoolean(this.IDs[args.NAME]);
      else return (this.IDs[args.NAME] && this.IDs[args.NAME].active) || false;
    }

    setGravity(args) { this.Gravity = args.GRAVITY }
  }

  Scratch.extensions.register(new ParticleToolsSP());
})(Scratch);
","https://extensions.turbowarp.org/CST1229/zip.js","data:text/plain;base64,// Name: CLΩ
// ID: clomega
// Description: API blocks for CloudLink Omega. Unleash your potential.
// By: MikeDEV
// License: MIT

(() => {
  // src/index.ts
  (function (Scratch2) {
    if (!Scratch2.extensions.unsandboxed) {
      throw new Error("Sandboxed mode is not supported in this extension.");
    }
    function generateSlotsArray() {
      return Array.from({ length: 10 }, (_, i) => (i + 1).toString());
    }
    class OmegaAuth {
      // Declare types
      rootApiURL;
      rootWsURL;
      selectedUgi;
      registerSuccess;
      loginSuccess;
      saveSuccess;
      loadSuccess;
      sessionToken;
      statusCodes;
      loadedData;
      constructor() {
        this.rootApiURL = "https://omega.mikedev101.cc";
        this.rootWsURL = "wss://omega.mikedev101.cc";
        this.selectedUgi = "01HNPHRWS0N0AYMM5K4HN31V4W";
        this.registerSuccess = false;
        this.loginSuccess = false;
        this.saveSuccess = false;
        this.loadSuccess = false;
        (this.sessionToken = ""),
          (this.statusCodes = {
            register: "",
            login: "",
            load: "",
            save: "",
          });
        this.loadedData = "";
      }
      async Login(email, password) {
        try {
          const response = await fetch(`${this.rootApiURL}/api/v0/login`, {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              email,
              password,
            }),
          });
          const data = await response.text();
          if (response.ok) {
            console.log("Account logged in successfully.");
            this.sessionToken = data;
          } else {
            console.warn("Account login failed:", data);
          }
          this.loginSuccess = response.ok;
          this.statusCodes.login = response.status.toString();
        } catch (error) {
          console.error("Error getting login token:", error);
        }
      }
      async Save(save_slot, save_data) {
        try {
          const response = await fetch(`${this.rootApiURL}/api/v0/save`, {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              token: this.sessionToken,
              ugi: this.selectedUgi,
              save_slot,
              save_data,
            }),
          });
          const data = await response.text();
          if (response.ok) {
            console.log("Saved data successfully.");
          } else {
            console.warn("Save failed:", data);
          }
          this.saveSuccess = response.ok;
          this.statusCodes.save = response.status.toString();
        } catch (error) {
          console.error("Error saving data:", error);
        }
      }
      async Load(save_slot) {
        try {
          const response = await fetch(`${this.rootApiURL}/api/v0/load`, {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              token: this.sessionToken,
              ugi: this.selectedUgi,
              save_slot,
            }),
          });
          const data = await response.text();
          if (response.ok) {
            console.log("Loaded data successfully.");
            this.loadedData = data;
          } else {
            console.warn("Load failed:", data);
          }
          this.loadSuccess = response.ok;
          this.statusCodes.load = response.status.toString();
        } catch (error) {
          console.error("Error loading data:", error);
        }
      }
      async Register(email, username, password) {
        try {
          const response = await fetch(`${this.rootApiURL}/api/v0/register`, {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              email,
              username,
              password,
            }),
          });
          const data = await response.text();
          if (data == "OK") {
            console.log("Account registered successfully.");
          } else {
            console.warn("Account registration failed:", data);
          }
          this.registerSuccess = data == "OK";
          this.statusCodes.register = response.status.toString();
        } catch (error) {
          console.error("Error getting response:", error);
          this.registerSuccess = false;
        }
      }
    }
    const OmegaAuthInstance = new OmegaAuth();
    class CloudLinkOmega {
      // Declare types
      vm;
      runtime;
      blockIconURI;
      menuIconURI;
      constructor(runtime) {
        this.runtime = runtime;
        this.blockIconURI =
          "data:image/svg+xml;base64,PHN2ZyB3aWR0aD0iMTc3IiBoZWlnaHQ9IjEyMyIgdmlld0JveD0iMCAwIDE3NyAxMjMiIGZpbGw9Im5vbmUiIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyI+CjxnIGNsaXAtcGF0aD0idXJsKCNjbGlwMF8xXzUzKSI+CjxwYXRoIGZpbGwtcnVsZT0iZXZlbm9kZCIgY2xpcC1ydWxlPSJldmVub2RkIiBkPSJNMTM0LjMyIDM4LjUxMjlDMTU3LjU2MSAzOC41MTI5IDE3Ni4zOTkgNTcuMzUyMyAxNzYuMzk5IDgwLjU5MThDMTc2LjM5OSAxMDMuODMxIDE1Ny41NjEgMTIyLjY3MSAxMzQuMzIgMTIyLjY3MUg0Mi4wNzg5QzE4LjgzOCAxMjIuNjcxIDAgMTAzLjgzMSAwIDgwLjU5MThDMCA1Ny4zNTIzIDE4LjgzOCAzOC41MTI5IDQyLjA3ODkgMzguNTEyOUg0Ni4yNjc4QzQ4LjA3OTMgMTYuOTQyMyA2Ni4xNjEzIDAgODguMTk5MyAwQzExMC4yMzcgMCAxMjguMzE5IDE2Ljk0MjMgMTMwLjEzMSAzOC41MTI5SDEzNC4zMloiIGZpbGw9IndoaXRlIi8+CjxwYXRoIGQ9Ik0xMTcuMjc4IDk4Ljk3MDNDMTE3LjI3OCAxMDEuMzY0IDExNS4zMzggMTAzLjMwNCAxMTIuOTQ0IDEwMy4zMDRIOTcuNTQ4MkM5NS4xNTQ5IDEwMy4zMDQgOTMuMjE0OCAxMDEuMzY0IDkzLjIxNDggOTguOTcwM1Y4OS42MTU4QzkzLjIxNDggODcuOTQwOCA5NC4xODAzIDg2LjQxNTkgOTUuNjk0MiA4NS42OTkxQzEwMS41ODUgODIuOTExIDEwNS4zOTEgNzYuOTAxMyAxMDUuMzkxIDcwLjM4ODlDMTA1LjM5MSA2MS4wNTQ2IDk3Ljc5NjcgNTMuNDYwNCA4OC40NjIyIDUzLjQ2MDRDNzkuMTI3NyA1My40NjA0IDcxLjUzMzcgNjEuMDU0NiA3MS41MzM3IDcwLjM4ODlDNzEuNTMzNyA3Ni45MDE1IDc1LjMzOTkgODIuOTExIDgxLjIzMDUgODUuNjk5MUM4Mi43NDQ1IDg2LjQxNTYgODMuNzEgODcuOTQwNiA4My43MSA4OS42MTU4Vjk4Ljk3MDNDODMuNzEgMTAxLjM2NCA4MS43NyAxMDMuMzA0IDc5LjM3NjYgMTAzLjMwNEg2My45ODAyQzYxLjU4NjkgMTAzLjMwNCA1OS42NDY4IDEwMS4zNjQgNTkuNjQ2OCA5OC45NzAzQzU5LjY0NjggOTYuNTc3IDYxLjU4NjkgOTQuNjM2OSA2My45ODAyIDk0LjYzNjlINzUuMDQzM1Y5Mi4xODc1QzcxLjgwMDIgOTAuMTg5NCA2OS4wMzQyIDg3LjQ4NzcgNjYuOTQ5NiA4NC4yNjA3QzY0LjI3ODcgODAuMTI2MiA2Mi44NjY5IDc1LjMyOTYgNjIuODY2OSA3MC4zODg5QzYyLjg2NjkgNTYuMjc1NSA3NC4zNDg5IDQ0Ljc5MzYgODguNDYyMiA0NC43OTM2QzEwMi41NzYgNDQuNzkzNiAxMTQuMDU4IDU2LjI3NTUgMTE0LjA1OCA3MC4zODg3QzExNC4wNTggNzUuMzI5NCAxMTIuNjQ2IDgwLjEyNjIgMTA5Ljk3NSA4NC4yNjA1QzEwNy44OTEgODcuNDg3NSAxMDUuMTI1IDkwLjE4OTQgMTAxLjg4MiA5Mi4xODc1Vjk0LjYzNjlIMTEyLjk0NEMxMTUuMzM4IDk0LjYzNjkgMTE3LjI3OCA5Ni41NzcgMTE3LjI3OCA5OC45NzAzWiIgZmlsbD0iI0ZGNEQ0QyIvPgo8L2c+CjxkZWZzPgo8Y2xpcFBhdGggaWQ9ImNsaXAwXzFfNTMiPgo8cmVjdCB3aWR0aD0iMTc2LjM5OSIgaGVpZ2h0PSIxMjIuNjcxIiBmaWxsPSJ3aGl0ZSIvPgo8L2NsaXBQYXRoPgo8L2RlZnM+Cjwvc3ZnPgo=";
        this.menuIconURI =
          "data:image/svg+xml;base64,PHN2ZyB3aWR0aD0iMjI2IiBoZWlnaHQ9IjIyNiIgdmlld0JveD0iMCAwIDIyNiAyMjYiIGZpbGw9Im5vbmUiIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyI+CjxnIGNsaXAtcGF0aD0idXJsKCNjbGlwMF8xXzIpIj4KPHBhdGggZD0iTTAgMTEyLjY3N0MwIDUwLjQ0NzQgNTAuNDQ3NCAwIDExMi42NzcgMEMxNzQuOTA3IDAgMjI1LjM1NSA1MC40NDc0IDIyNS4zNTUgMTEyLjY3N0MyMjUuMzU1IDE3NC45MDcgMTc0LjkwNyAyMjUuMzU1IDExMi42NzcgMjI1LjM1NUM1MC40NDc0IDIyNS4zNTUgMCAxNzQuOTA3IDAgMTEyLjY3N1oiIGZpbGw9IiNGRjRENEMiLz4KPHBhdGggZmlsbC1ydWxlPSJldmVub2RkIiBjbGlwLXJ1bGU9ImV2ZW5vZGQiIGQ9Ik0xNTguNTM1IDgzLjc2MTJDMTgxLjc3NiA4My43NjEyIDIwMC42MTQgMTAyLjYwMSAyMDAuNjE0IDEyNS44NEMyMDAuNjE0IDE0OS4wOCAxODEuNzc2IDE2Ny45MTkgMTU4LjUzNSAxNjcuOTE5SDY2LjI5NDFDNDMuMDUzMiAxNjcuOTE5IDI0LjIxNTIgMTQ5LjA4IDI0LjIxNTIgMTI1Ljg0QzI0LjIxNTIgMTAyLjYwMSA0My4wNTMyIDgzLjc2MTIgNjYuMjk0MSA4My43NjEySDcwLjQ4M0M3Mi4yOTQ1IDYyLjE5MDcgOTAuMzc2NSA0NS4yNDg0IDExMi40MTQgNDUuMjQ4NEMxMzQuNDUyIDQ1LjI0ODQgMTUyLjUzNCA2Mi4xOTA3IDE1NC4zNDYgODMuNzYxMkgxNTguNTM1WiIgZmlsbD0id2hpdGUiLz4KPHBhdGggZD0iTTE0MS40OTMgMTQ0LjIxOUMxNDEuNDkzIDE0Ni42MTIgMTM5LjU1MyAxNDguNTUyIDEzNy4xNTkgMTQ4LjU1MkgxMjEuNzYzQzExOS4zNyAxNDguNTUyIDExNy40MyAxNDYuNjEyIDExNy40MyAxNDQuMjE5VjEzNC44NjRDMTE3LjQzIDEzMy4xODkgMTE4LjM5NSAxMzEuNjY0IDExOS45MDkgMTMwLjk0N0MxMjUuOCAxMjguMTU5IDEyOS42MDYgMTIyLjE1IDEyOS42MDYgMTE1LjYzN0MxMjkuNjA2IDEwNi4zMDMgMTIyLjAxMiA5OC43MDg3IDExMi42NzcgOTguNzA4N0MxMDMuMzQzIDk4LjcwODcgOTUuNzQ4OSAxMDYuMzAzIDk1Ljc0ODkgMTE1LjYzN0M5NS43NDg5IDEyMi4xNSA5OS41NTUxIDEyOC4xNTkgMTA1LjQ0NiAxMzAuOTQ3QzEwNi45NiAxMzEuNjY0IDEwNy45MjUgMTMzLjE4OSAxMDcuOTI1IDEzNC44NjRWMTQ0LjIxOUMxMDcuOTI1IDE0Ni42MTIgMTA1Ljk4NSAxNDguNTUyIDEwMy41OTIgMTQ4LjU1Mkg4OC4xOTU0Qzg1LjgwMiAxNDguNTUyIDgzLjg2MiAxNDYuNjEyIDgzLjg2MiAxNDQuMjE5QzgzLjg2MiAxNDEuODI1IDg1LjgwMiAxMzkuODg1IDg4LjE5NTQgMTM5Ljg4NUg5OS4yNTg1VjEzNy40MzZDOTYuMDE1NCAxMzUuNDM4IDkzLjI0OTQgMTMyLjczNiA5MS4xNjQ4IDEyOS41MDlDODguNDkzOSAxMjUuMzc1IDg3LjA4MjEgMTIwLjU3OCA4Ny4wODIxIDExNS42MzdDODcuMDgyMSAxMDEuNTI0IDk4LjU2NCA5MC4wNDIgMTEyLjY3NyA5MC4wNDJDMTI2Ljc5MSA5MC4wNDIgMTM4LjI3MyAxMDEuNTI0IDEzOC4yNzMgMTE1LjYzN0MxMzguMjczIDEyMC41NzggMTM2Ljg2MSAxMjUuMzc1IDEzNC4xOSAxMjkuNTA5QzEzMi4xMDYgMTMyLjczNiAxMjkuMzQgMTM1LjQzOCAxMjYuMDk3IDEzNy40MzZWMTM5Ljg4NUgxMzcuMTU5QzEzOS41NTMgMTM5Ljg4NSAxNDEuNDkzIDE0MS44MjUgMTQxLjQ5MyAxNDQuMjE5WiIgZmlsbD0iI0ZGNEQ0QyIvPgo8L2c+CjxkZWZzPgo8Y2xpcFBhdGggaWQ9ImNsaXAwXzFfMiI+CjxyZWN0IHdpZHRoPSIyMjUuMzU1IiBoZWlnaHQ9IjIyNS4zNTUiIGZpbGw9IndoaXRlIi8+CjwvY2xpcFBhdGg+CjwvZGVmcz4KPC9zdmc+Cg==";
      }
      // Define blocks used in the extension
      getInfo() {
        return {
          id: "clomega",
          name: "CL\u03A9",
          docsURI:
            "https://github.com/cloudlink-omega/extension/wiki/Extension",
          blockIconURI: this.blockIconURI,
          menuIconURI: this.menuIconURI,
          color1: "#FF4D4C",
          color2: "#FF7473",
          color3: "#A13332",
          blocks: [
            {
              opcode: "set_ugi",
              blockType: Scratch2.BlockType.COMMAND,
              text: "Set [UGI] as this project's Unique Game ID (UGI)",
              arguments: {
                UGI: {
                  type: Scratch2.ArgumentType.STRING,
                  defaultValue: "01HNPHRWS0N0AYMM5K4HN31V4W",
                },
              },
            },
            {
              opcode: "build_server_url",
              blockType: Scratch2.BlockType.REPORTER,
              text: "Signaling Server URL with set UGI",
            },
            {
              opcode: "change_api_url",
              blockType: Scratch2.BlockType.COMMAND,
              text: "Use [URL] as API Server",
              arguments: {
                URL: {
                  type: Scratch2.ArgumentType.STRING,
                  defaultValue: "https://omega.mikedev101.cc",
                },
              },
            },
            {
              opcode: "change_wss_url",
              blockType: Scratch2.BlockType.COMMAND,
              text: "Use [URL] as Signaling Server",
              arguments: {
                URL: {
                  type: Scratch2.ArgumentType.STRING,
                  defaultValue: "wss://omega.mikedev101.cc",
                },
              },
            },
            {
              opcode: "get_token",
              blockType: Scratch2.BlockType.REPORTER,
              text: "Session Token",
            },
            {
              opcode: "login_status_code",
              blockType: Scratch2.BlockType.REPORTER,
              text: "Login status code",
            },
            {
              opcode: "was_login_successful",
              blockType: Scratch2.BlockType.BOOLEAN,
              text: "Was login successful?",
            },
            {
              opcode: "login_account",
              blockType: Scratch2.BlockType.COMMAND,
              text: "Login with email: [EMAIL] password: [PASSWORD]",
              arguments: {
                EMAIL: {
                  type: Scratch2.ArgumentType.STRING,
                  defaultValue: "",
                },
                PASSWORD: {
                  type: Scratch2.ArgumentType.STRING,
                  defaultValue: "",
                },
              },
            },
            {
              opcode: "register_status_code",
              blockType: Scratch2.BlockType.REPORTER,
              text: "Registration status code",
            },
            {
              opcode: "was_register_successful",
              blockType: Scratch2.BlockType.BOOLEAN,
              text: "Was registration successful?",
            },
            {
              opcode: "register_account",
              blockType: Scratch2.BlockType.COMMAND,
              text: "Register with email: [EMAIL] username: [USERNAME] password: [PASSWORD]",
              arguments: {
                EMAIL: {
                  type: Scratch2.ArgumentType.STRING,
                  defaultValue: "",
                },
                USERNAME: {
                  type: Scratch2.ArgumentType.STRING,
                  defaultValue: "",
                },
                PASSWORD: {
                  type: Scratch2.ArgumentType.STRING,
                  defaultValue: "",
                },
              },
            },
            {
              opcode: "save_status_code",
              blockType: Scratch2.BlockType.REPORTER,
              text: "Save status code",
            },
            {
              opcode: "was_save_successful",
              blockType: Scratch2.BlockType.BOOLEAN,
              text: "Was save successful?",
            },
            {
              opcode: "save_slot",
              blockType: Scratch2.BlockType.COMMAND,
              text: "Write to save slot [SLOT] with [DATA]",
              arguments: {
                SLOT: {
                  type: Scratch2.ArgumentType.NUMBER,
                  defaultValue: "1",
                  menu: "SlotMenu",
                },
                DATA: {
                  type: Scratch2.ArgumentType.STRING,
                  defaultValue: "something to save",
                },
              },
            },
            {
              opcode: "load_status_code",
              blockType: Scratch2.BlockType.REPORTER,
              text: "Load status code",
            },
            {
              opcode: "was_load_successful",
              blockType: Scratch2.BlockType.BOOLEAN,
              text: "Was load successful?",
            },
            {
              opcode: "loaded_slot_data",
              blockType: Scratch2.BlockType.REPORTER,
              text: "Loaded save data",
            },
            {
              opcode: "load_slot",
              blockType: Scratch2.BlockType.COMMAND,
              text: "Read from save slot [SLOT]",
              arguments: {
                SLOT: {
                  type: Scratch2.ArgumentType.NUMBER,
                  defaultValue: "1",
                  menu: "SlotMenu",
                },
              },
            },
          ],
          menus: {
            SlotMenu: {
              acceptReporters: true,
              items: generateSlotsArray(),
            },
          },
        };
      }
      change_api_url({ URL: URL2 }) {
        OmegaAuthInstance.rootApiURL = URL2;
      }
      change_wss_url({ URL: URL2 }) {
        OmegaAuthInstance.rootWsURL = URL2;
      }
      async login_account({ EMAIL, PASSWORD }) {
        await OmegaAuthInstance.Login(EMAIL.toString(), PASSWORD.toString());
      }
      register_status_code() {
        return OmegaAuthInstance.statusCodes.register;
      }
      login_status_code() {
        return OmegaAuthInstance.statusCodes.login;
      }
      save_status_code() {
        return OmegaAuthInstance.statusCodes.save;
      }
      load_status_code() {
        return OmegaAuthInstance.statusCodes.load;
      }
      was_save_successful() {
        return OmegaAuthInstance.saveSuccess;
      }
      async save_slot({ SLOT, DATA }) {
        await OmegaAuthInstance.Save(SLOT, DATA.toString());
      }
      was_load_successful() {
        return OmegaAuthInstance.loadSuccess;
      }
      loaded_slot_data() {
        return OmegaAuthInstance.loadedData;
      }
      async load_slot({ SLOT }) {
        await OmegaAuthInstance.Load(SLOT);
      }
      was_login_successful() {
        return OmegaAuthInstance.loginSuccess;
      }
      async register_account({ EMAIL, USERNAME, PASSWORD }) {
        await OmegaAuthInstance.Register(
          EMAIL.toString(),
          USERNAME.toString(),
          PASSWORD.toString()
        );
      }
      was_register_successful() {
        return OmegaAuthInstance.registerSuccess;
      }
      get_token() {
        return OmegaAuthInstance.sessionToken;
      }
      build_server_url() {
        const url = new URL(`${OmegaAuthInstance.rootWsURL}/api/v0/signaling`);
        url.searchParams.append("ugi", OmegaAuthInstance.selectedUgi);
        return url.toString();
      }
      set_ugi({ UGI }) {
        OmegaAuthInstance.selectedUgi = UGI.toString();
      }
    }
    if (Scratch2.vm?.runtime) {
      Scratch2.extensions.register(new CloudLinkOmega(Scratch2.runtime));
    } else {
      window.tempExt = {
        Extension: CloudLinkOmega,
        info: {
          extensionId: "clomega",
          name: "clomega.name",
          description: "clomega.description",
          featured: true,
          disabled: false,
          collaboratorList: [
            {
              collaborator: "MikeDEV",
              collaboratorURL: "https://github.com/MikeDev101",
            },
          ],
        },
        l10n: {
          en: {
            "clomega.name": "CL\u03A9",
            "clomega.description":
              "API blocks for CloudLink Omega. Unleash your potential.",
          },
        },
      };
    }
  })(Scratch);
})();","https://extensions.turbowarp.org/local-storage.js"],"bakeExtensions":true,"maxTextureDimension":2048}